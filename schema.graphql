### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Ads {
  createdAt: DateTime!
  id: Int!
  index: Int!
  name: String!
  position: AdsPosition!
  updatedAt: DateTime!
  url: String!
}

type AdsAvgAggregateOutputType {
  id: Float
  index: Float
}

input AdsAvgOrderByAggregateInput {
  id: SortOrder
  index: SortOrder
}

type AdsCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  index: Int!
  name: Int!
  position: Int!
  updatedAt: Int!
  url: Int!
}

input AdsCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  index: SortOrder
  name: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input AdsCreateInput {
  createdAt: DateTime
  index: Int
  name: String!
  position: AdsPosition
  updatedAt: DateTime
  url: String!
}

input AdsCreateManyInput {
  createdAt: DateTime
  id: Int
  index: Int
  name: String!
  position: AdsPosition
  updatedAt: DateTime
  url: String!
}

type AdsMaxAggregateOutputType {
  createdAt: DateTime
  id: Int
  index: Int
  name: String
  position: AdsPosition
  updatedAt: DateTime
  url: String
}

input AdsMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  index: SortOrder
  name: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

type AdsMinAggregateOutputType {
  createdAt: DateTime
  id: Int
  index: Int
  name: String
  position: AdsPosition
  updatedAt: DateTime
  url: String
}

input AdsMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  index: SortOrder
  name: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input AdsOrderByWithAggregationInput {
  _avg: AdsAvgOrderByAggregateInput
  _count: AdsCountOrderByAggregateInput
  _max: AdsMaxOrderByAggregateInput
  _min: AdsMinOrderByAggregateInput
  _sum: AdsSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  index: SortOrder
  name: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input AdsOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  index: SortOrder
  name: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

enum AdsPosition {
  BOTTOM
  TOP
  TOP_COMIC
}

enum AdsScalarFieldEnum {
  createdAt
  id
  index
  name
  position
  updatedAt
  url
}

input AdsScalarWhereWithAggregatesInput {
  AND: [AdsScalarWhereWithAggregatesInput]
  NOT: [AdsScalarWhereWithAggregatesInput]
  OR: [AdsScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  index: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  position: EnumAdsPositionWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  url: StringWithAggregatesFilter
}

type AdsSumAggregateOutputType {
  id: Int
  index: Int
}

input AdsSumOrderByAggregateInput {
  id: SortOrder
  index: SortOrder
}

input AdsUncheckedCreateInput {
  createdAt: DateTime
  id: Int
  index: Int
  name: String!
  position: AdsPosition
  updatedAt: DateTime
  url: String!
}

input AdsUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  index: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: EnumAdsPositionFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input AdsUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  index: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: EnumAdsPositionFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input AdsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  index: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: EnumAdsPositionFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input AdsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  index: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: EnumAdsPositionFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input AdsWhereInput {
  AND: [AdsWhereInput]
  NOT: [AdsWhereInput]
  OR: [AdsWhereInput]
  createdAt: DateTimeFilter
  id: IntFilter
  index: IntFilter
  name: StringFilter
  position: EnumAdsPositionFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input AdsWhereUniqueInput {
  id: Int
  name: String
}

type AggregateAds {
  _avg: AdsAvgAggregateOutputType
  _count: AdsCountAggregateOutputType
  _max: AdsMaxAggregateOutputType
  _min: AdsMinAggregateOutputType
  _sum: AdsSumAggregateOutputType
}

type AggregateAuthor {
  _avg: AuthorAvgAggregateOutputType
  _count: AuthorCountAggregateOutputType
  _max: AuthorMaxAggregateOutputType
  _min: AuthorMinAggregateOutputType
  _sum: AuthorSumAggregateOutputType
}

type AggregateChapter {
  _avg: ChapterAvgAggregateOutputType
  _count: ChapterCountAggregateOutputType
  _max: ChapterMaxAggregateOutputType
  _min: ChapterMinAggregateOutputType
  _sum: ChapterSumAggregateOutputType
}

type AggregateChapterBookmark {
  _avg: ChapterBookmarkAvgAggregateOutputType
  _count: ChapterBookmarkCountAggregateOutputType
  _max: ChapterBookmarkMaxAggregateOutputType
  _min: ChapterBookmarkMinAggregateOutputType
  _sum: ChapterBookmarkSumAggregateOutputType
}

type AggregateComic {
  _avg: ComicAvgAggregateOutputType
  _count: ComicCountAggregateOutputType
  _max: ComicMaxAggregateOutputType
  _min: ComicMinAggregateOutputType
  _sum: ComicSumAggregateOutputType
}

type AggregateComicBookmark {
  _avg: ComicBookmarkAvgAggregateOutputType
  _count: ComicBookmarkCountAggregateOutputType
  _max: ComicBookmarkMaxAggregateOutputType
  _min: ComicBookmarkMinAggregateOutputType
  _sum: ComicBookmarkSumAggregateOutputType
}

type AggregateGenre {
  _avg: GenreAvgAggregateOutputType
  _count: GenreCountAggregateOutputType
  _max: GenreMaxAggregateOutputType
  _min: GenreMinAggregateOutputType
  _sum: GenreSumAggregateOutputType
}

type AggregateMissing {
  _avg: MissingAvgAggregateOutputType
  _count: MissingCountAggregateOutputType
  _max: MissingMaxAggregateOutputType
  _min: MissingMinAggregateOutputType
  _sum: MissingSumAggregateOutputType
}

type AggregatePerfomanceAnalytic {
  _avg: PerfomanceAnalyticAvgAggregateOutputType
  _count: PerfomanceAnalyticCountAggregateOutputType
  _max: PerfomanceAnalyticMaxAggregateOutputType
  _min: PerfomanceAnalyticMinAggregateOutputType
  _sum: PerfomanceAnalyticSumAggregateOutputType
}

type AggregateReport {
  _avg: ReportAvgAggregateOutputType
  _count: ReportCountAggregateOutputType
  _max: ReportMaxAggregateOutputType
  _min: ReportMinAggregateOutputType
  _sum: ReportSumAggregateOutputType
}

type AggregateUser {
  _avg: UserAvgAggregateOutputType
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
  _sum: UserSumAggregateOutputType
}

type AuthResponse {
  message: String
  status: Boolean
  token: String
  user: User
}

type Author {
  _count: AuthorCountOutputType!
  comics(cursor: ComicWhereUniqueInput, distinct: ComicScalarFieldEnum, orderBy: ComicOrderByWithRelationInput, skip: Int, take: Int, where: ComicWhereInput): [Comic!]!
  createdAt: DateTime!
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime!
}

type AuthorAvgAggregateOutputType {
  id: Float
}

input AuthorAvgOrderByAggregateInput {
  id: SortOrder
}

type AuthorCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input AuthorCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type AuthorCountOutputType {
  comics: Int!
}

input AuthorCreateInput {
  comics: ComicCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  name: String!
  slug: String!
  updatedAt: DateTime
}

input AuthorCreateManyInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input AuthorCreateNestedOneWithoutComicsInput {
  connect: AuthorWhereUniqueInput
  connectOrCreate: AuthorCreateOrConnectWithoutComicsInput
  create: AuthorUncheckedCreateWithoutComicsInput
}

input AuthorCreateOrConnectWithoutComicsInput {
  create: AuthorUncheckedCreateWithoutComicsInput!
  where: AuthorWhereUniqueInput!
}

input AuthorCreateWithoutComicsInput {
  createdAt: DateTime
  name: String!
  slug: String!
  updatedAt: DateTime
}

type AuthorMaxAggregateOutputType {
  createdAt: DateTime
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input AuthorMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type AuthorMinAggregateOutputType {
  createdAt: DateTime
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input AuthorMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input AuthorOrderByWithAggregationInput {
  _avg: AuthorAvgOrderByAggregateInput
  _count: AuthorCountOrderByAggregateInput
  _max: AuthorMaxOrderByAggregateInput
  _min: AuthorMinOrderByAggregateInput
  _sum: AuthorSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input AuthorOrderByWithRelationInput {
  comics: ComicOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input AuthorRelationFilter {
  is: AuthorWhereInput
  isNot: AuthorWhereInput
}

enum AuthorScalarFieldEnum {
  createdAt
  id
  name
  slug
  updatedAt
}

input AuthorScalarWhereWithAggregatesInput {
  AND: [AuthorScalarWhereWithAggregatesInput]
  NOT: [AuthorScalarWhereWithAggregatesInput]
  OR: [AuthorScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AuthorSearch {
  authors: [Author]
  exhaustiveNbHits: Boolean
  limit: Int
  offset: Int
  processingTimeMs: Int
  total: Int
}

type AuthorSumAggregateOutputType {
  id: Int
}

input AuthorSumOrderByAggregateInput {
  id: SortOrder
}

input AuthorUncheckedCreateInput {
  comics: ComicUncheckedCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input AuthorUncheckedCreateWithoutComicsInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input AuthorUncheckedUpdateInput {
  comics: ComicUncheckedUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUncheckedUpdateWithoutComicsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpdateInput {
  comics: ComicUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpdateOneRequiredWithoutComicsInput {
  connect: AuthorWhereUniqueInput
  connectOrCreate: AuthorCreateOrConnectWithoutComicsInput
  create: AuthorUncheckedCreateWithoutComicsInput
  update: AuthorUncheckedUpdateWithoutComicsInput
  upsert: AuthorUpsertWithoutComicsInput
}

input AuthorUpdateWithoutComicsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpsertWithoutComicsInput {
  create: AuthorUncheckedCreateWithoutComicsInput!
  update: AuthorUncheckedUpdateWithoutComicsInput!
}

input AuthorWhereInput {
  AND: [AuthorWhereInput]
  NOT: [AuthorWhereInput]
  OR: [AuthorWhereInput]
  comics: ComicListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input AuthorWhereUniqueInput {
  id: Int
  name: String
  slug: String
}

type BatchPayload {
  count: Int!
}

"""BigInt custom scalar type"""
scalar BigInt

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Chapter {
  _count: ChapterCountOutputType!
  batchs: String
  chapterbookmarks(cursor: ChapterBookmarkWhereUniqueInput, distinct: ChapterBookmarkScalarFieldEnum, orderBy: ChapterBookmarkOrderByWithRelationInput, skip: Int, take: Int, where: ChapterBookmarkWhereInput): [ChapterBookmark!]!
  comic: Comic!
  comicId: Int!
  createdAt: DateTime!
  id: Int!
  imageCount: Int!
  imageDetails: Json
  imageUrls: [String!]!
  name: Float!
  originalImageCount: Int!
  processed: Boolean!
  quality: ChapterQuality!
  title: String
  updatedAt: DateTime!
  views: Int!
}

type ChapterAvgAggregateOutputType {
  comicId: Float
  id: Float
  imageCount: Float
  name: Float
  originalImageCount: Float
  views: Float
}

input ChapterAvgOrderByAggregateInput {
  comicId: SortOrder
  id: SortOrder
  imageCount: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  views: SortOrder
}

type ChapterBookmark {
  chapter: Chapter!
  chapterId: Int!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  userId: Int!
  users: User!
}

type ChapterBookmarkAvgAggregateOutputType {
  chapterId: Float
  id: Float
  userId: Float
}

input ChapterBookmarkAvgOrderByAggregateInput {
  chapterId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type ChapterBookmarkCountAggregateOutputType {
  _all: Int!
  chapterId: Int!
  createdAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input ChapterBookmarkCountOrderByAggregateInput {
  chapterId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ChapterBookmarkCreateInput {
  chapter: ChapterCreateNestedOneWithoutChapterbookmarksInput!
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateNestedOneWithoutChapterbookmarksInput!
}

input ChapterBookmarkCreateManyChapterInput {
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input ChapterBookmarkCreateManyChapterInputEnvelope {
  data: ChapterBookmarkCreateManyChapterInput!
  skipDuplicates: Boolean
}

input ChapterBookmarkCreateManyInput {
  chapterId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input ChapterBookmarkCreateManyUsersInput {
  chapterId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input ChapterBookmarkCreateManyUsersInputEnvelope {
  data: ChapterBookmarkCreateManyUsersInput!
  skipDuplicates: Boolean
}

input ChapterBookmarkCreateNestedManyWithoutChapterInput {
  connect: [ChapterBookmarkWhereUniqueInput]
  connectOrCreate: [ChapterBookmarkCreateOrConnectWithoutChapterInput]
  create: [ChapterBookmarkCreateWithoutChapterInput]
  createMany: ChapterBookmarkCreateManyChapterInputEnvelope
}

input ChapterBookmarkCreateNestedManyWithoutUsersInput {
  connect: [ChapterBookmarkWhereUniqueInput]
  connectOrCreate: [ChapterBookmarkCreateOrConnectWithoutUsersInput]
  create: [ChapterBookmarkCreateWithoutUsersInput]
  createMany: ChapterBookmarkCreateManyUsersInputEnvelope
}

input ChapterBookmarkCreateOrConnectWithoutChapterInput {
  create: ChapterBookmarkUncheckedCreateWithoutChapterInput!
  where: ChapterBookmarkWhereUniqueInput!
}

input ChapterBookmarkCreateOrConnectWithoutUsersInput {
  create: ChapterBookmarkUncheckedCreateWithoutUsersInput!
  where: ChapterBookmarkWhereUniqueInput!
}

input ChapterBookmarkCreateWithoutChapterInput {
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateNestedOneWithoutChapterbookmarksInput!
}

input ChapterBookmarkCreateWithoutUsersInput {
  chapter: ChapterCreateNestedOneWithoutChapterbookmarksInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input ChapterBookmarkListRelationFilter {
  every: ChapterBookmarkWhereInput
  none: ChapterBookmarkWhereInput
  some: ChapterBookmarkWhereInput
}

type ChapterBookmarkMaxAggregateOutputType {
  chapterId: Int
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int
}

input ChapterBookmarkMaxOrderByAggregateInput {
  chapterId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ChapterBookmarkMinAggregateOutputType {
  chapterId: Int
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int
}

input ChapterBookmarkMinOrderByAggregateInput {
  chapterId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ChapterBookmarkOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChapterBookmarkOrderByWithAggregationInput {
  _avg: ChapterBookmarkAvgOrderByAggregateInput
  _count: ChapterBookmarkCountOrderByAggregateInput
  _max: ChapterBookmarkMaxOrderByAggregateInput
  _min: ChapterBookmarkMinOrderByAggregateInput
  _sum: ChapterBookmarkSumOrderByAggregateInput
  chapterId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ChapterBookmarkOrderByWithRelationInput {
  chapter: ChapterOrderByWithRelationInput
  chapterId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  users: UserOrderByWithRelationInput
}

enum ChapterBookmarkScalarFieldEnum {
  chapterId
  createdAt
  id
  updatedAt
  userId
}

input ChapterBookmarkScalarWhereInput {
  AND: [ChapterBookmarkScalarWhereInput]
  NOT: [ChapterBookmarkScalarWhereInput]
  OR: [ChapterBookmarkScalarWhereInput]
  chapterId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input ChapterBookmarkScalarWhereWithAggregatesInput {
  AND: [ChapterBookmarkScalarWhereWithAggregatesInput]
  NOT: [ChapterBookmarkScalarWhereWithAggregatesInput]
  OR: [ChapterBookmarkScalarWhereWithAggregatesInput]
  chapterId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type ChapterBookmarkSumAggregateOutputType {
  chapterId: Int
  id: Int
  userId: Int
}

input ChapterBookmarkSumOrderByAggregateInput {
  chapterId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ChapterBookmarkUncheckedCreateInput {
  chapterId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input ChapterBookmarkUncheckedCreateNestedManyWithoutChapterInput {
  connect: [ChapterBookmarkWhereUniqueInput]
  connectOrCreate: [ChapterBookmarkCreateOrConnectWithoutChapterInput]
  create: [ChapterBookmarkCreateWithoutChapterInput]
  createMany: ChapterBookmarkCreateManyChapterInputEnvelope
}

input ChapterBookmarkUncheckedCreateNestedManyWithoutUsersInput {
  connect: [ChapterBookmarkWhereUniqueInput]
  connectOrCreate: [ChapterBookmarkCreateOrConnectWithoutUsersInput]
  create: [ChapterBookmarkCreateWithoutUsersInput]
  createMany: ChapterBookmarkCreateManyUsersInputEnvelope
}

input ChapterBookmarkUncheckedCreateWithoutChapterInput {
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input ChapterBookmarkUncheckedCreateWithoutUsersInput {
  chapterId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input ChapterBookmarkUncheckedUpdateInput {
  chapterId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ChapterBookmarkUncheckedUpdateManyInput {
  chapterId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ChapterBookmarkUncheckedUpdateManyWithoutChapterInput {
  connect: [ChapterBookmarkWhereUniqueInput]
  connectOrCreate: [ChapterBookmarkCreateOrConnectWithoutChapterInput]
  create: [ChapterBookmarkCreateWithoutChapterInput]
  createMany: ChapterBookmarkCreateManyChapterInputEnvelope
  delete: [ChapterBookmarkWhereUniqueInput]
  deleteMany: [ChapterBookmarkScalarWhereInput]
  disconnect: [ChapterBookmarkWhereUniqueInput]
  set: [ChapterBookmarkWhereUniqueInput]
  update: [ChapterBookmarkUpdateWithWhereUniqueWithoutChapterInput]
  updateMany: [ChapterBookmarkUpdateManyWithWhereWithoutChapterInput]
  upsert: [ChapterBookmarkUpsertWithWhereUniqueWithoutChapterInput]
}

input ChapterBookmarkUncheckedUpdateManyWithoutChapterbookmarksInput {
  chapterId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChapterBookmarkUncheckedUpdateManyWithoutUsersInput {
  connect: [ChapterBookmarkWhereUniqueInput]
  connectOrCreate: [ChapterBookmarkCreateOrConnectWithoutUsersInput]
  create: [ChapterBookmarkCreateWithoutUsersInput]
  createMany: ChapterBookmarkCreateManyUsersInputEnvelope
  delete: [ChapterBookmarkWhereUniqueInput]
  deleteMany: [ChapterBookmarkScalarWhereInput]
  disconnect: [ChapterBookmarkWhereUniqueInput]
  set: [ChapterBookmarkWhereUniqueInput]
  update: [ChapterBookmarkUpdateWithWhereUniqueWithoutUsersInput]
  updateMany: [ChapterBookmarkUpdateManyWithWhereWithoutUsersInput]
  upsert: [ChapterBookmarkUpsertWithWhereUniqueWithoutUsersInput]
}

input ChapterBookmarkUncheckedUpdateWithoutChapterInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ChapterBookmarkUncheckedUpdateWithoutUsersInput {
  chapterId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChapterBookmarkUpdateInput {
  chapter: ChapterUpdateOneRequiredWithoutChapterbookmarksInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateOneRequiredWithoutChapterbookmarksInput
}

input ChapterBookmarkUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChapterBookmarkUpdateManyWithWhereWithoutChapterInput {
  data: ChapterBookmarkUncheckedUpdateManyWithoutChapterbookmarksInput!
  where: ChapterBookmarkScalarWhereInput!
}

input ChapterBookmarkUpdateManyWithWhereWithoutUsersInput {
  data: ChapterBookmarkUncheckedUpdateManyWithoutChapterbookmarksInput!
  where: ChapterBookmarkScalarWhereInput!
}

input ChapterBookmarkUpdateManyWithoutChapterInput {
  connect: [ChapterBookmarkWhereUniqueInput]
  connectOrCreate: [ChapterBookmarkCreateOrConnectWithoutChapterInput]
  create: [ChapterBookmarkCreateWithoutChapterInput]
  createMany: ChapterBookmarkCreateManyChapterInputEnvelope
  delete: [ChapterBookmarkWhereUniqueInput]
  deleteMany: [ChapterBookmarkScalarWhereInput]
  disconnect: [ChapterBookmarkWhereUniqueInput]
  set: [ChapterBookmarkWhereUniqueInput]
  update: [ChapterBookmarkUpdateWithWhereUniqueWithoutChapterInput]
  updateMany: [ChapterBookmarkUpdateManyWithWhereWithoutChapterInput]
  upsert: [ChapterBookmarkUpsertWithWhereUniqueWithoutChapterInput]
}

input ChapterBookmarkUpdateManyWithoutUsersInput {
  connect: [ChapterBookmarkWhereUniqueInput]
  connectOrCreate: [ChapterBookmarkCreateOrConnectWithoutUsersInput]
  create: [ChapterBookmarkCreateWithoutUsersInput]
  createMany: ChapterBookmarkCreateManyUsersInputEnvelope
  delete: [ChapterBookmarkWhereUniqueInput]
  deleteMany: [ChapterBookmarkScalarWhereInput]
  disconnect: [ChapterBookmarkWhereUniqueInput]
  set: [ChapterBookmarkWhereUniqueInput]
  update: [ChapterBookmarkUpdateWithWhereUniqueWithoutUsersInput]
  updateMany: [ChapterBookmarkUpdateManyWithWhereWithoutUsersInput]
  upsert: [ChapterBookmarkUpsertWithWhereUniqueWithoutUsersInput]
}

input ChapterBookmarkUpdateWithWhereUniqueWithoutChapterInput {
  data: ChapterBookmarkUncheckedUpdateWithoutChapterInput!
  where: ChapterBookmarkWhereUniqueInput!
}

input ChapterBookmarkUpdateWithWhereUniqueWithoutUsersInput {
  data: ChapterBookmarkUncheckedUpdateWithoutUsersInput!
  where: ChapterBookmarkWhereUniqueInput!
}

input ChapterBookmarkUpdateWithoutChapterInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateOneRequiredWithoutChapterbookmarksInput
}

input ChapterBookmarkUpdateWithoutUsersInput {
  chapter: ChapterUpdateOneRequiredWithoutChapterbookmarksInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ChapterBookmarkUpsertWithWhereUniqueWithoutChapterInput {
  create: ChapterBookmarkUncheckedCreateWithoutChapterInput!
  update: ChapterBookmarkUncheckedUpdateWithoutChapterInput!
  where: ChapterBookmarkWhereUniqueInput!
}

input ChapterBookmarkUpsertWithWhereUniqueWithoutUsersInput {
  create: ChapterBookmarkUncheckedCreateWithoutUsersInput!
  update: ChapterBookmarkUncheckedUpdateWithoutUsersInput!
  where: ChapterBookmarkWhereUniqueInput!
}

input ChapterBookmarkWhereInput {
  AND: [ChapterBookmarkWhereInput]
  NOT: [ChapterBookmarkWhereInput]
  OR: [ChapterBookmarkWhereInput]
  chapter: ChapterWhereInput
  chapterId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
  users: UserWhereInput
}

input ChapterBookmarkWhereUniqueInput {
  id: Int
}

type ChapterCountAggregateOutputType {
  _all: Int!
  batchs: Int!
  comicId: Int!
  createdAt: Int!
  id: Int!
  imageCount: Int!
  imageDetails: Int!
  imageUrls: Int!
  name: Int!
  originalImageCount: Int!
  processed: Int!
  quality: Int!
  title: Int!
  updatedAt: Int!
  views: Int!
}

input ChapterCountOrderByAggregateInput {
  batchs: SortOrder
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageCount: SortOrder
  imageDetails: SortOrder
  imageUrls: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  processed: SortOrder
  quality: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

type ChapterCountOutputType {
  chapterbookmarks: Int!
}

input ChapterCreateInput {
  batchs: String
  chapterbookmarks: ChapterBookmarkCreateNestedManyWithoutChapterInput
  comic: ComicCreateNestedOneWithoutChaptersInput!
  createdAt: DateTime
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterCreateManyComicInput {
  batchs: String
  createdAt: DateTime
  id: Int
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterCreateManyComicInputEnvelope {
  data: ChapterCreateManyComicInput!
  skipDuplicates: Boolean
}

input ChapterCreateManyInput {
  batchs: String
  comicId: Int!
  createdAt: DateTime
  id: Int
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterCreateManyimageUrlsInput {
  set: String!
}

input ChapterCreateNestedManyWithoutComicInput {
  connect: [ChapterWhereUniqueInput]
  connectOrCreate: [ChapterCreateOrConnectWithoutComicInput]
  create: [ChapterCreateWithoutComicInput]
  createMany: ChapterCreateManyComicInputEnvelope
}

input ChapterCreateNestedOneWithoutChapterbookmarksInput {
  connect: ChapterWhereUniqueInput
  connectOrCreate: ChapterCreateOrConnectWithoutChapterbookmarksInput
  create: ChapterUncheckedCreateWithoutChapterbookmarksInput
}

input ChapterCreateOrConnectWithoutChapterbookmarksInput {
  create: ChapterUncheckedCreateWithoutChapterbookmarksInput!
  where: ChapterWhereUniqueInput!
}

input ChapterCreateOrConnectWithoutComicInput {
  create: ChapterUncheckedCreateWithoutComicInput!
  where: ChapterWhereUniqueInput!
}

input ChapterCreateWithoutChapterbookmarksInput {
  batchs: String
  comic: ComicCreateNestedOneWithoutChaptersInput!
  createdAt: DateTime
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterCreateWithoutComicInput {
  batchs: String
  chapterbookmarks: ChapterBookmarkCreateNestedManyWithoutChapterInput
  createdAt: DateTime
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterCreateimageUrlsInput {
  set: String!
}

input ChapterListRelationFilter {
  every: ChapterWhereInput
  none: ChapterWhereInput
  some: ChapterWhereInput
}

type ChapterMaxAggregateOutputType {
  batchs: String
  comicId: Int
  createdAt: DateTime
  id: Int
  imageCount: Int
  name: Float
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterMaxOrderByAggregateInput {
  batchs: SortOrder
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageCount: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  processed: SortOrder
  quality: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

type ChapterMinAggregateOutputType {
  batchs: String
  comicId: Int
  createdAt: DateTime
  id: Int
  imageCount: Int
  name: Float
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterMinOrderByAggregateInput {
  batchs: SortOrder
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageCount: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  processed: SortOrder
  quality: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

input ChapterOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChapterOrderByWithAggregationInput {
  _avg: ChapterAvgOrderByAggregateInput
  _count: ChapterCountOrderByAggregateInput
  _max: ChapterMaxOrderByAggregateInput
  _min: ChapterMinOrderByAggregateInput
  _sum: ChapterSumOrderByAggregateInput
  batchs: SortOrder
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageCount: SortOrder
  imageDetails: SortOrder
  imageUrls: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  processed: SortOrder
  quality: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

input ChapterOrderByWithRelationInput {
  batchs: SortOrder
  chapterbookmarks: ChapterBookmarkOrderByRelationAggregateInput
  comic: ComicOrderByWithRelationInput
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageCount: SortOrder
  imageDetails: SortOrder
  imageUrls: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  processed: SortOrder
  quality: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

enum ChapterQuality {
  HQ
  LQ
  NORMAL
}

input ChapterRelationFilter {
  is: ChapterWhereInput
  isNot: ChapterWhereInput
}

enum ChapterScalarFieldEnum {
  batchs
  comicId
  createdAt
  id
  imageCount
  imageDetails
  imageUrls
  name
  originalImageCount
  processed
  quality
  title
  updatedAt
  views
}

input ChapterScalarWhereInput {
  AND: [ChapterScalarWhereInput]
  NOT: [ChapterScalarWhereInput]
  OR: [ChapterScalarWhereInput]
  batchs: StringNullableFilter
  comicId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  imageCount: IntFilter
  imageDetails: JsonNullableFilter
  imageUrls: StringNullableListFilter
  name: FloatFilter
  originalImageCount: IntFilter
  processed: BoolFilter
  quality: EnumChapterQualityFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
  views: IntFilter
}

input ChapterScalarWhereWithAggregatesInput {
  AND: [ChapterScalarWhereWithAggregatesInput]
  NOT: [ChapterScalarWhereWithAggregatesInput]
  OR: [ChapterScalarWhereWithAggregatesInput]
  batchs: StringNullableWithAggregatesFilter
  comicId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  imageCount: IntWithAggregatesFilter
  imageDetails: JsonNullableWithAggregatesFilter
  imageUrls: StringNullableListFilter
  name: FloatWithAggregatesFilter
  originalImageCount: IntWithAggregatesFilter
  processed: BoolWithAggregatesFilter
  quality: EnumChapterQualityWithAggregatesFilter
  title: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  views: IntWithAggregatesFilter
}

type ChapterSumAggregateOutputType {
  comicId: Int
  id: Int
  imageCount: Int
  name: Float
  originalImageCount: Int
  views: Int
}

input ChapterSumOrderByAggregateInput {
  comicId: SortOrder
  id: SortOrder
  imageCount: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  views: SortOrder
}

input ChapterUncheckedCreateInput {
  batchs: String
  chapterbookmarks: ChapterBookmarkUncheckedCreateNestedManyWithoutChapterInput
  comicId: Int!
  createdAt: DateTime
  id: Int
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterUncheckedCreateNestedManyWithoutComicInput {
  connect: [ChapterWhereUniqueInput]
  connectOrCreate: [ChapterCreateOrConnectWithoutComicInput]
  create: [ChapterCreateWithoutComicInput]
  createMany: ChapterCreateManyComicInputEnvelope
}

input ChapterUncheckedCreateWithoutChapterbookmarksInput {
  batchs: String
  comicId: Int!
  createdAt: DateTime
  id: Int
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterUncheckedCreateWithoutComicInput {
  batchs: String
  chapterbookmarks: ChapterBookmarkUncheckedCreateNestedManyWithoutChapterInput
  createdAt: DateTime
  id: Int
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterUncheckedUpdateInput {
  batchs: NullableStringFieldUpdateOperationsInput
  chapterbookmarks: ChapterBookmarkUncheckedUpdateManyWithoutChapterInput
  comicId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUncheckedUpdateManyInput {
  batchs: NullableStringFieldUpdateOperationsInput
  comicId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUncheckedUpdateManyWithoutChaptersInput {
  batchs: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUncheckedUpdateManyWithoutComicInput {
  connect: [ChapterWhereUniqueInput]
  connectOrCreate: [ChapterCreateOrConnectWithoutComicInput]
  create: [ChapterCreateWithoutComicInput]
  createMany: ChapterCreateManyComicInputEnvelope
  delete: [ChapterWhereUniqueInput]
  deleteMany: [ChapterScalarWhereInput]
  disconnect: [ChapterWhereUniqueInput]
  set: [ChapterWhereUniqueInput]
  update: [ChapterUpdateWithWhereUniqueWithoutComicInput]
  updateMany: [ChapterUpdateManyWithWhereWithoutComicInput]
  upsert: [ChapterUpsertWithWhereUniqueWithoutComicInput]
}

input ChapterUncheckedUpdateWithoutChapterbookmarksInput {
  batchs: NullableStringFieldUpdateOperationsInput
  comicId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUncheckedUpdateWithoutComicInput {
  batchs: NullableStringFieldUpdateOperationsInput
  chapterbookmarks: ChapterBookmarkUncheckedUpdateManyWithoutChapterInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUpdateInput {
  batchs: NullableStringFieldUpdateOperationsInput
  chapterbookmarks: ChapterBookmarkUpdateManyWithoutChapterInput
  comic: ComicUpdateOneRequiredWithoutChaptersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUpdateManyMutationInput {
  batchs: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUpdateManyWithWhereWithoutComicInput {
  data: ChapterUncheckedUpdateManyWithoutChaptersInput!
  where: ChapterScalarWhereInput!
}

input ChapterUpdateManyWithoutComicInput {
  connect: [ChapterWhereUniqueInput]
  connectOrCreate: [ChapterCreateOrConnectWithoutComicInput]
  create: [ChapterCreateWithoutComicInput]
  createMany: ChapterCreateManyComicInputEnvelope
  delete: [ChapterWhereUniqueInput]
  deleteMany: [ChapterScalarWhereInput]
  disconnect: [ChapterWhereUniqueInput]
  set: [ChapterWhereUniqueInput]
  update: [ChapterUpdateWithWhereUniqueWithoutComicInput]
  updateMany: [ChapterUpdateManyWithWhereWithoutComicInput]
  upsert: [ChapterUpsertWithWhereUniqueWithoutComicInput]
}

input ChapterUpdateOneRequiredWithoutChapterbookmarksInput {
  connect: ChapterWhereUniqueInput
  connectOrCreate: ChapterCreateOrConnectWithoutChapterbookmarksInput
  create: ChapterUncheckedCreateWithoutChapterbookmarksInput
  update: ChapterUncheckedUpdateWithoutChapterbookmarksInput
  upsert: ChapterUpsertWithoutChapterbookmarksInput
}

input ChapterUpdateWithWhereUniqueWithoutComicInput {
  data: ChapterUncheckedUpdateWithoutComicInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpdateWithoutChapterbookmarksInput {
  batchs: NullableStringFieldUpdateOperationsInput
  comic: ComicUpdateOneRequiredWithoutChaptersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUpdateWithoutComicInput {
  batchs: NullableStringFieldUpdateOperationsInput
  chapterbookmarks: ChapterBookmarkUpdateManyWithoutChapterInput
  createdAt: DateTimeFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUpdateimageUrlsInput {
  push: [String]
  set: [String]
}

input ChapterUpsertWithWhereUniqueWithoutComicInput {
  create: ChapterUncheckedCreateWithoutComicInput!
  update: ChapterUncheckedUpdateWithoutComicInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpsertWithoutChapterbookmarksInput {
  create: ChapterUncheckedCreateWithoutChapterbookmarksInput!
  update: ChapterUncheckedUpdateWithoutChapterbookmarksInput!
}

input ChapterWhereInput {
  AND: [ChapterWhereInput]
  NOT: [ChapterWhereInput]
  OR: [ChapterWhereInput]
  batchs: StringNullableFilter
  chapterbookmarks: ChapterBookmarkListRelationFilter
  comic: ComicWhereInput
  comicId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  imageCount: IntFilter
  imageDetails: JsonNullableFilter
  imageUrls: StringNullableListFilter
  name: FloatFilter
  originalImageCount: IntFilter
  processed: BoolFilter
  quality: EnumChapterQualityFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
  views: IntFilter
}

input ChapterWhereUniqueInput {
  id: Int
}

type Comic {
  _count: ComicCountOutputType!
  age: String
  altName: Json
  author: Author!
  authorId: Int!
  chapters(cursor: ChapterWhereUniqueInput, distinct: ChapterScalarFieldEnum, orderBy: ChapterOrderByWithRelationInput, skip: Int, take: Int, where: ChapterWhereInput): [Chapter!]!
  concept: String
  createdAt: DateTime!
  description: String
  genres(cursor: GenreWhereUniqueInput, distinct: GenreScalarFieldEnum, orderBy: GenreOrderByWithRelationInput, skip: Int, take: Int, where: GenreWhereInput): [Genre!]!
  id: Int!
  isHentai: Boolean!
  lastChapterUpdateAt: DateTime!
  name: String!
  rating: Float!
  released: DateTime!
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime!
  userbookmarks(cursor: ComicBookmarkWhereUniqueInput, distinct: ComicBookmarkScalarFieldEnum, orderBy: ComicBookmarkOrderByWithRelationInput, skip: Int, take: Int, where: ComicBookmarkWhereInput): [ComicBookmark!]!
  views: Int!
  viewsDaily: Int!
  viewsHourly: Int!
  viewsWeek: Int!
}

type ComicAvgAggregateOutputType {
  authorId: Float
  id: Float
  rating: Float
  views: Float
  viewsDaily: Float
  viewsHourly: Float
  viewsWeek: Float
}

input ComicAvgOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  rating: SortOrder
  views: SortOrder
  viewsDaily: SortOrder
  viewsHourly: SortOrder
  viewsWeek: SortOrder
}

type ComicBookmark {
  comic: Comic!
  comicId: Int!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  userId: Int!
  users: User!
}

type ComicBookmarkAvgAggregateOutputType {
  comicId: Float
  id: Float
  userId: Float
}

input ComicBookmarkAvgOrderByAggregateInput {
  comicId: SortOrder
  id: SortOrder
  userId: SortOrder
}

type ComicBookmarkCountAggregateOutputType {
  _all: Int!
  comicId: Int!
  createdAt: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
}

input ComicBookmarkCountOrderByAggregateInput {
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ComicBookmarkCreateInput {
  comic: ComicCreateNestedOneWithoutUserbookmarksInput!
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateNestedOneWithoutComicbookmarksInput!
}

input ComicBookmarkCreateManyComicInput {
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input ComicBookmarkCreateManyComicInputEnvelope {
  data: ComicBookmarkCreateManyComicInput!
  skipDuplicates: Boolean
}

input ComicBookmarkCreateManyInput {
  comicId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input ComicBookmarkCreateManyUsersInput {
  comicId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input ComicBookmarkCreateManyUsersInputEnvelope {
  data: ComicBookmarkCreateManyUsersInput!
  skipDuplicates: Boolean
}

input ComicBookmarkCreateNestedManyWithoutComicInput {
  connect: [ComicBookmarkWhereUniqueInput]
  connectOrCreate: [ComicBookmarkCreateOrConnectWithoutComicInput]
  create: [ComicBookmarkCreateWithoutComicInput]
  createMany: ComicBookmarkCreateManyComicInputEnvelope
}

input ComicBookmarkCreateNestedManyWithoutUsersInput {
  connect: [ComicBookmarkWhereUniqueInput]
  connectOrCreate: [ComicBookmarkCreateOrConnectWithoutUsersInput]
  create: [ComicBookmarkCreateWithoutUsersInput]
  createMany: ComicBookmarkCreateManyUsersInputEnvelope
}

input ComicBookmarkCreateOrConnectWithoutComicInput {
  create: ComicBookmarkUncheckedCreateWithoutComicInput!
  where: ComicBookmarkWhereUniqueInput!
}

input ComicBookmarkCreateOrConnectWithoutUsersInput {
  create: ComicBookmarkUncheckedCreateWithoutUsersInput!
  where: ComicBookmarkWhereUniqueInput!
}

input ComicBookmarkCreateWithoutComicInput {
  createdAt: DateTime
  updatedAt: DateTime
  users: UserCreateNestedOneWithoutComicbookmarksInput!
}

input ComicBookmarkCreateWithoutUsersInput {
  comic: ComicCreateNestedOneWithoutUserbookmarksInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input ComicBookmarkListRelationFilter {
  every: ComicBookmarkWhereInput
  none: ComicBookmarkWhereInput
  some: ComicBookmarkWhereInput
}

type ComicBookmarkMaxAggregateOutputType {
  comicId: Int
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int
}

input ComicBookmarkMaxOrderByAggregateInput {
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ComicBookmarkMinAggregateOutputType {
  comicId: Int
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int
}

input ComicBookmarkMinOrderByAggregateInput {
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ComicBookmarkOrderByRelationAggregateInput {
  _count: SortOrder
}

input ComicBookmarkOrderByWithAggregationInput {
  _avg: ComicBookmarkAvgOrderByAggregateInput
  _count: ComicBookmarkCountOrderByAggregateInput
  _max: ComicBookmarkMaxOrderByAggregateInput
  _min: ComicBookmarkMinOrderByAggregateInput
  _sum: ComicBookmarkSumOrderByAggregateInput
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ComicBookmarkOrderByWithRelationInput {
  comic: ComicOrderByWithRelationInput
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  users: UserOrderByWithRelationInput
}

enum ComicBookmarkScalarFieldEnum {
  comicId
  createdAt
  id
  updatedAt
  userId
}

input ComicBookmarkScalarWhereInput {
  AND: [ComicBookmarkScalarWhereInput]
  NOT: [ComicBookmarkScalarWhereInput]
  OR: [ComicBookmarkScalarWhereInput]
  comicId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input ComicBookmarkScalarWhereWithAggregatesInput {
  AND: [ComicBookmarkScalarWhereWithAggregatesInput]
  NOT: [ComicBookmarkScalarWhereWithAggregatesInput]
  OR: [ComicBookmarkScalarWhereWithAggregatesInput]
  comicId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type ComicBookmarkSumAggregateOutputType {
  comicId: Int
  id: Int
  userId: Int
}

input ComicBookmarkSumOrderByAggregateInput {
  comicId: SortOrder
  id: SortOrder
  userId: SortOrder
}

input ComicBookmarkUncheckedCreateInput {
  comicId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input ComicBookmarkUncheckedCreateNestedManyWithoutComicInput {
  connect: [ComicBookmarkWhereUniqueInput]
  connectOrCreate: [ComicBookmarkCreateOrConnectWithoutComicInput]
  create: [ComicBookmarkCreateWithoutComicInput]
  createMany: ComicBookmarkCreateManyComicInputEnvelope
}

input ComicBookmarkUncheckedCreateNestedManyWithoutUsersInput {
  connect: [ComicBookmarkWhereUniqueInput]
  connectOrCreate: [ComicBookmarkCreateOrConnectWithoutUsersInput]
  create: [ComicBookmarkCreateWithoutUsersInput]
  createMany: ComicBookmarkCreateManyUsersInputEnvelope
}

input ComicBookmarkUncheckedCreateWithoutComicInput {
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
  userId: Int!
}

input ComicBookmarkUncheckedCreateWithoutUsersInput {
  comicId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input ComicBookmarkUncheckedUpdateInput {
  comicId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ComicBookmarkUncheckedUpdateManyInput {
  comicId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ComicBookmarkUncheckedUpdateManyWithoutComicInput {
  connect: [ComicBookmarkWhereUniqueInput]
  connectOrCreate: [ComicBookmarkCreateOrConnectWithoutComicInput]
  create: [ComicBookmarkCreateWithoutComicInput]
  createMany: ComicBookmarkCreateManyComicInputEnvelope
  delete: [ComicBookmarkWhereUniqueInput]
  deleteMany: [ComicBookmarkScalarWhereInput]
  disconnect: [ComicBookmarkWhereUniqueInput]
  set: [ComicBookmarkWhereUniqueInput]
  update: [ComicBookmarkUpdateWithWhereUniqueWithoutComicInput]
  updateMany: [ComicBookmarkUpdateManyWithWhereWithoutComicInput]
  upsert: [ComicBookmarkUpsertWithWhereUniqueWithoutComicInput]
}

input ComicBookmarkUncheckedUpdateManyWithoutComicbookmarksInput {
  comicId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ComicBookmarkUncheckedUpdateManyWithoutUserbookmarksInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ComicBookmarkUncheckedUpdateManyWithoutUsersInput {
  connect: [ComicBookmarkWhereUniqueInput]
  connectOrCreate: [ComicBookmarkCreateOrConnectWithoutUsersInput]
  create: [ComicBookmarkCreateWithoutUsersInput]
  createMany: ComicBookmarkCreateManyUsersInputEnvelope
  delete: [ComicBookmarkWhereUniqueInput]
  deleteMany: [ComicBookmarkScalarWhereInput]
  disconnect: [ComicBookmarkWhereUniqueInput]
  set: [ComicBookmarkWhereUniqueInput]
  update: [ComicBookmarkUpdateWithWhereUniqueWithoutUsersInput]
  updateMany: [ComicBookmarkUpdateManyWithWhereWithoutUsersInput]
  upsert: [ComicBookmarkUpsertWithWhereUniqueWithoutUsersInput]
}

input ComicBookmarkUncheckedUpdateWithoutComicInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ComicBookmarkUncheckedUpdateWithoutUsersInput {
  comicId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ComicBookmarkUpdateInput {
  comic: ComicUpdateOneRequiredWithoutUserbookmarksInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateOneRequiredWithoutComicbookmarksInput
}

input ComicBookmarkUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ComicBookmarkUpdateManyWithWhereWithoutComicInput {
  data: ComicBookmarkUncheckedUpdateManyWithoutUserbookmarksInput!
  where: ComicBookmarkScalarWhereInput!
}

input ComicBookmarkUpdateManyWithWhereWithoutUsersInput {
  data: ComicBookmarkUncheckedUpdateManyWithoutComicbookmarksInput!
  where: ComicBookmarkScalarWhereInput!
}

input ComicBookmarkUpdateManyWithoutComicInput {
  connect: [ComicBookmarkWhereUniqueInput]
  connectOrCreate: [ComicBookmarkCreateOrConnectWithoutComicInput]
  create: [ComicBookmarkCreateWithoutComicInput]
  createMany: ComicBookmarkCreateManyComicInputEnvelope
  delete: [ComicBookmarkWhereUniqueInput]
  deleteMany: [ComicBookmarkScalarWhereInput]
  disconnect: [ComicBookmarkWhereUniqueInput]
  set: [ComicBookmarkWhereUniqueInput]
  update: [ComicBookmarkUpdateWithWhereUniqueWithoutComicInput]
  updateMany: [ComicBookmarkUpdateManyWithWhereWithoutComicInput]
  upsert: [ComicBookmarkUpsertWithWhereUniqueWithoutComicInput]
}

input ComicBookmarkUpdateManyWithoutUsersInput {
  connect: [ComicBookmarkWhereUniqueInput]
  connectOrCreate: [ComicBookmarkCreateOrConnectWithoutUsersInput]
  create: [ComicBookmarkCreateWithoutUsersInput]
  createMany: ComicBookmarkCreateManyUsersInputEnvelope
  delete: [ComicBookmarkWhereUniqueInput]
  deleteMany: [ComicBookmarkScalarWhereInput]
  disconnect: [ComicBookmarkWhereUniqueInput]
  set: [ComicBookmarkWhereUniqueInput]
  update: [ComicBookmarkUpdateWithWhereUniqueWithoutUsersInput]
  updateMany: [ComicBookmarkUpdateManyWithWhereWithoutUsersInput]
  upsert: [ComicBookmarkUpsertWithWhereUniqueWithoutUsersInput]
}

input ComicBookmarkUpdateWithWhereUniqueWithoutComicInput {
  data: ComicBookmarkUncheckedUpdateWithoutComicInput!
  where: ComicBookmarkWhereUniqueInput!
}

input ComicBookmarkUpdateWithWhereUniqueWithoutUsersInput {
  data: ComicBookmarkUncheckedUpdateWithoutUsersInput!
  where: ComicBookmarkWhereUniqueInput!
}

input ComicBookmarkUpdateWithoutComicInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: UserUpdateOneRequiredWithoutComicbookmarksInput
}

input ComicBookmarkUpdateWithoutUsersInput {
  comic: ComicUpdateOneRequiredWithoutUserbookmarksInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ComicBookmarkUpsertWithWhereUniqueWithoutComicInput {
  create: ComicBookmarkUncheckedCreateWithoutComicInput!
  update: ComicBookmarkUncheckedUpdateWithoutComicInput!
  where: ComicBookmarkWhereUniqueInput!
}

input ComicBookmarkUpsertWithWhereUniqueWithoutUsersInput {
  create: ComicBookmarkUncheckedCreateWithoutUsersInput!
  update: ComicBookmarkUncheckedUpdateWithoutUsersInput!
  where: ComicBookmarkWhereUniqueInput!
}

input ComicBookmarkWhereInput {
  AND: [ComicBookmarkWhereInput]
  NOT: [ComicBookmarkWhereInput]
  OR: [ComicBookmarkWhereInput]
  comic: ComicWhereInput
  comicId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
  users: UserWhereInput
}

input ComicBookmarkWhereUniqueInput {
  id: Int
}

type ComicCountAggregateOutputType {
  _all: Int!
  age: Int!
  altName: Int!
  authorId: Int!
  concept: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  isHentai: Int!
  lastChapterUpdateAt: Int!
  name: Int!
  rating: Int!
  released: Int!
  slug: Int!
  status: Int!
  thumb: Int!
  thumbWide: Int!
  type: Int!
  updatedAt: Int!
  views: Int!
  viewsDaily: Int!
  viewsHourly: Int!
  viewsWeek: Int!
}

input ComicCountOrderByAggregateInput {
  age: SortOrder
  altName: SortOrder
  authorId: SortOrder
  concept: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isHentai: SortOrder
  lastChapterUpdateAt: SortOrder
  name: SortOrder
  rating: SortOrder
  released: SortOrder
  slug: SortOrder
  status: SortOrder
  thumb: SortOrder
  thumbWide: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  views: SortOrder
  viewsDaily: SortOrder
  viewsHourly: SortOrder
  viewsWeek: SortOrder
}

type ComicCountOutputType {
  chapters: Int!
  genres: Int!
  userbookmarks: Int!
}

input ComicCreateInput {
  age: String
  altName: Json
  author: AuthorCreateNestedOneWithoutComicsInput!
  chapters: ChapterCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  genres: GenreCreateNestedManyWithoutComicsInput
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  userbookmarks: ComicBookmarkCreateNestedManyWithoutComicInput
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicCreateManyAuthorInput {
  age: String
  altName: Json
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicCreateManyAuthorInputEnvelope {
  data: ComicCreateManyAuthorInput!
  skipDuplicates: Boolean
}

input ComicCreateManyInput {
  age: String
  altName: Json
  authorId: Int!
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicCreateNestedManyWithoutAuthorInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutAuthorInput]
  create: [ComicCreateWithoutAuthorInput]
  createMany: ComicCreateManyAuthorInputEnvelope
}

input ComicCreateNestedManyWithoutGenresInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutGenresInput]
  create: [ComicCreateWithoutGenresInput]
}

input ComicCreateNestedOneWithoutChaptersInput {
  connect: ComicWhereUniqueInput
  connectOrCreate: ComicCreateOrConnectWithoutChaptersInput
  create: ComicUncheckedCreateWithoutChaptersInput
}

input ComicCreateNestedOneWithoutUserbookmarksInput {
  connect: ComicWhereUniqueInput
  connectOrCreate: ComicCreateOrConnectWithoutUserbookmarksInput
  create: ComicUncheckedCreateWithoutUserbookmarksInput
}

input ComicCreateOrConnectWithoutAuthorInput {
  create: ComicUncheckedCreateWithoutAuthorInput!
  where: ComicWhereUniqueInput!
}

input ComicCreateOrConnectWithoutChaptersInput {
  create: ComicUncheckedCreateWithoutChaptersInput!
  where: ComicWhereUniqueInput!
}

input ComicCreateOrConnectWithoutGenresInput {
  create: ComicUncheckedCreateWithoutGenresInput!
  where: ComicWhereUniqueInput!
}

input ComicCreateOrConnectWithoutUserbookmarksInput {
  create: ComicUncheckedCreateWithoutUserbookmarksInput!
  where: ComicWhereUniqueInput!
}

input ComicCreateWithoutAuthorInput {
  age: String
  altName: Json
  chapters: ChapterCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  genres: GenreCreateNestedManyWithoutComicsInput
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  userbookmarks: ComicBookmarkCreateNestedManyWithoutComicInput
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicCreateWithoutChaptersInput {
  age: String
  altName: Json
  author: AuthorCreateNestedOneWithoutComicsInput!
  concept: String
  createdAt: DateTime
  description: String
  genres: GenreCreateNestedManyWithoutComicsInput
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  userbookmarks: ComicBookmarkCreateNestedManyWithoutComicInput
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicCreateWithoutGenresInput {
  age: String
  altName: Json
  author: AuthorCreateNestedOneWithoutComicsInput!
  chapters: ChapterCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  userbookmarks: ComicBookmarkCreateNestedManyWithoutComicInput
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicCreateWithoutUserbookmarksInput {
  age: String
  altName: Json
  author: AuthorCreateNestedOneWithoutComicsInput!
  chapters: ChapterCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  genres: GenreCreateNestedManyWithoutComicsInput
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicListRelationFilter {
  every: ComicWhereInput
  none: ComicWhereInput
  some: ComicWhereInput
}

type ComicMaxAggregateOutputType {
  age: String
  authorId: Int
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String
  rating: Float
  released: DateTime
  slug: String
  status: String
  thumb: String
  thumbWide: String
  type: String
  updatedAt: DateTime
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicMaxOrderByAggregateInput {
  age: SortOrder
  authorId: SortOrder
  concept: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isHentai: SortOrder
  lastChapterUpdateAt: SortOrder
  name: SortOrder
  rating: SortOrder
  released: SortOrder
  slug: SortOrder
  status: SortOrder
  thumb: SortOrder
  thumbWide: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  views: SortOrder
  viewsDaily: SortOrder
  viewsHourly: SortOrder
  viewsWeek: SortOrder
}

type ComicMinAggregateOutputType {
  age: String
  authorId: Int
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String
  rating: Float
  released: DateTime
  slug: String
  status: String
  thumb: String
  thumbWide: String
  type: String
  updatedAt: DateTime
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicMinOrderByAggregateInput {
  age: SortOrder
  authorId: SortOrder
  concept: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isHentai: SortOrder
  lastChapterUpdateAt: SortOrder
  name: SortOrder
  rating: SortOrder
  released: SortOrder
  slug: SortOrder
  status: SortOrder
  thumb: SortOrder
  thumbWide: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  views: SortOrder
  viewsDaily: SortOrder
  viewsHourly: SortOrder
  viewsWeek: SortOrder
}

input ComicOrderByRelationAggregateInput {
  _count: SortOrder
}

input ComicOrderByWithAggregationInput {
  _avg: ComicAvgOrderByAggregateInput
  _count: ComicCountOrderByAggregateInput
  _max: ComicMaxOrderByAggregateInput
  _min: ComicMinOrderByAggregateInput
  _sum: ComicSumOrderByAggregateInput
  age: SortOrder
  altName: SortOrder
  authorId: SortOrder
  concept: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isHentai: SortOrder
  lastChapterUpdateAt: SortOrder
  name: SortOrder
  rating: SortOrder
  released: SortOrder
  slug: SortOrder
  status: SortOrder
  thumb: SortOrder
  thumbWide: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  views: SortOrder
  viewsDaily: SortOrder
  viewsHourly: SortOrder
  viewsWeek: SortOrder
}

input ComicOrderByWithRelationInput {
  age: SortOrder
  altName: SortOrder
  author: AuthorOrderByWithRelationInput
  authorId: SortOrder
  chapters: ChapterOrderByRelationAggregateInput
  concept: SortOrder
  createdAt: SortOrder
  description: SortOrder
  genres: GenreOrderByRelationAggregateInput
  id: SortOrder
  isHentai: SortOrder
  lastChapterUpdateAt: SortOrder
  name: SortOrder
  rating: SortOrder
  released: SortOrder
  slug: SortOrder
  status: SortOrder
  thumb: SortOrder
  thumbWide: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userbookmarks: ComicBookmarkOrderByRelationAggregateInput
  views: SortOrder
  viewsDaily: SortOrder
  viewsHourly: SortOrder
  viewsWeek: SortOrder
}

input ComicRelationFilter {
  is: ComicWhereInput
  isNot: ComicWhereInput
}

enum ComicScalarFieldEnum {
  age
  altName
  authorId
  concept
  createdAt
  description
  id
  isHentai
  lastChapterUpdateAt
  name
  rating
  released
  slug
  status
  thumb
  thumbWide
  type
  updatedAt
  views
  viewsDaily
  viewsHourly
  viewsWeek
}

input ComicScalarWhereInput {
  AND: [ComicScalarWhereInput]
  NOT: [ComicScalarWhereInput]
  OR: [ComicScalarWhereInput]
  age: StringNullableFilter
  altName: JsonNullableFilter
  authorId: IntFilter
  concept: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  isHentai: BoolFilter
  lastChapterUpdateAt: DateTimeFilter
  name: StringFilter
  rating: FloatFilter
  released: DateTimeFilter
  slug: StringFilter
  status: StringNullableFilter
  thumb: StringFilter
  thumbWide: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  views: IntFilter
  viewsDaily: IntFilter
  viewsHourly: IntFilter
  viewsWeek: IntFilter
}

input ComicScalarWhereWithAggregatesInput {
  AND: [ComicScalarWhereWithAggregatesInput]
  NOT: [ComicScalarWhereWithAggregatesInput]
  OR: [ComicScalarWhereWithAggregatesInput]
  age: StringNullableWithAggregatesFilter
  altName: JsonNullableWithAggregatesFilter
  authorId: IntWithAggregatesFilter
  concept: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  isHentai: BoolWithAggregatesFilter
  lastChapterUpdateAt: DateTimeWithAggregatesFilter
  name: StringWithAggregatesFilter
  rating: FloatWithAggregatesFilter
  released: DateTimeWithAggregatesFilter
  slug: StringWithAggregatesFilter
  status: StringNullableWithAggregatesFilter
  thumb: StringWithAggregatesFilter
  thumbWide: StringNullableWithAggregatesFilter
  type: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  views: IntWithAggregatesFilter
  viewsDaily: IntWithAggregatesFilter
  viewsHourly: IntWithAggregatesFilter
  viewsWeek: IntWithAggregatesFilter
}

type ComicSearch {
  comics: [Comic]
  exhaustiveNbHits: Boolean
  limit: Int
  offset: Int
  processingTimeMs: Int
  total: Int
}

type ComicSumAggregateOutputType {
  authorId: Int
  id: Int
  rating: Float
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicSumOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  rating: SortOrder
  views: SortOrder
  viewsDaily: SortOrder
  viewsHourly: SortOrder
  viewsWeek: SortOrder
}

input ComicUncheckedCreateInput {
  age: String
  altName: Json
  authorId: Int!
  chapters: ChapterUncheckedCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  userbookmarks: ComicBookmarkUncheckedCreateNestedManyWithoutComicInput
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicUncheckedCreateNestedManyWithoutAuthorInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutAuthorInput]
  create: [ComicCreateWithoutAuthorInput]
  createMany: ComicCreateManyAuthorInputEnvelope
}

input ComicUncheckedCreateWithoutAuthorInput {
  age: String
  altName: Json
  chapters: ChapterUncheckedCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  userbookmarks: ComicBookmarkUncheckedCreateNestedManyWithoutComicInput
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicUncheckedCreateWithoutChaptersInput {
  age: String
  altName: Json
  authorId: Int!
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  userbookmarks: ComicBookmarkUncheckedCreateNestedManyWithoutComicInput
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicUncheckedCreateWithoutGenresInput {
  age: String
  altName: Json
  authorId: Int!
  chapters: ChapterUncheckedCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  userbookmarks: ComicBookmarkUncheckedCreateNestedManyWithoutComicInput
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicUncheckedCreateWithoutUserbookmarksInput {
  age: String
  altName: Json
  authorId: Int!
  chapters: ChapterUncheckedCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsDaily: Int
  viewsHourly: Int
  viewsWeek: Int
}

input ComicUncheckedUpdateInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  authorId: IntFieldUpdateOperationsInput
  chapters: ChapterUncheckedUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userbookmarks: ComicBookmarkUncheckedUpdateManyWithoutComicInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateManyInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  authorId: IntFieldUpdateOperationsInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateManyWithoutAuthorInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutAuthorInput]
  create: [ComicCreateWithoutAuthorInput]
  createMany: ComicCreateManyAuthorInputEnvelope
  delete: [ComicWhereUniqueInput]
  deleteMany: [ComicScalarWhereInput]
  disconnect: [ComicWhereUniqueInput]
  set: [ComicWhereUniqueInput]
  update: [ComicUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [ComicUpdateManyWithWhereWithoutAuthorInput]
  upsert: [ComicUpsertWithWhereUniqueWithoutAuthorInput]
}

input ComicUncheckedUpdateManyWithoutComicsInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateWithoutAuthorInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  chapters: ChapterUncheckedUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userbookmarks: ComicBookmarkUncheckedUpdateManyWithoutComicInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateWithoutChaptersInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  authorId: IntFieldUpdateOperationsInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userbookmarks: ComicBookmarkUncheckedUpdateManyWithoutComicInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateWithoutGenresInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  authorId: IntFieldUpdateOperationsInput
  chapters: ChapterUncheckedUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userbookmarks: ComicBookmarkUncheckedUpdateManyWithoutComicInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateWithoutUserbookmarksInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  authorId: IntFieldUpdateOperationsInput
  chapters: ChapterUncheckedUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  author: AuthorUpdateOneRequiredWithoutComicsInput
  chapters: ChapterUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutComicsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userbookmarks: ComicBookmarkUpdateManyWithoutComicInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateManyMutationInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateManyWithWhereWithoutAuthorInput {
  data: ComicUncheckedUpdateManyWithoutComicsInput!
  where: ComicScalarWhereInput!
}

input ComicUpdateManyWithWhereWithoutGenresInput {
  data: ComicUncheckedUpdateManyWithoutComicsInput!
  where: ComicScalarWhereInput!
}

input ComicUpdateManyWithoutAuthorInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutAuthorInput]
  create: [ComicCreateWithoutAuthorInput]
  createMany: ComicCreateManyAuthorInputEnvelope
  delete: [ComicWhereUniqueInput]
  deleteMany: [ComicScalarWhereInput]
  disconnect: [ComicWhereUniqueInput]
  set: [ComicWhereUniqueInput]
  update: [ComicUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [ComicUpdateManyWithWhereWithoutAuthorInput]
  upsert: [ComicUpsertWithWhereUniqueWithoutAuthorInput]
}

input ComicUpdateManyWithoutGenresInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutGenresInput]
  create: [ComicCreateWithoutGenresInput]
  delete: [ComicWhereUniqueInput]
  deleteMany: [ComicScalarWhereInput]
  disconnect: [ComicWhereUniqueInput]
  set: [ComicWhereUniqueInput]
  update: [ComicUpdateWithWhereUniqueWithoutGenresInput]
  updateMany: [ComicUpdateManyWithWhereWithoutGenresInput]
  upsert: [ComicUpsertWithWhereUniqueWithoutGenresInput]
}

input ComicUpdateOneRequiredWithoutChaptersInput {
  connect: ComicWhereUniqueInput
  connectOrCreate: ComicCreateOrConnectWithoutChaptersInput
  create: ComicUncheckedCreateWithoutChaptersInput
  update: ComicUncheckedUpdateWithoutChaptersInput
  upsert: ComicUpsertWithoutChaptersInput
}

input ComicUpdateOneRequiredWithoutUserbookmarksInput {
  connect: ComicWhereUniqueInput
  connectOrCreate: ComicCreateOrConnectWithoutUserbookmarksInput
  create: ComicUncheckedCreateWithoutUserbookmarksInput
  update: ComicUncheckedUpdateWithoutUserbookmarksInput
  upsert: ComicUpsertWithoutUserbookmarksInput
}

input ComicUpdateWithWhereUniqueWithoutAuthorInput {
  data: ComicUncheckedUpdateWithoutAuthorInput!
  where: ComicWhereUniqueInput!
}

input ComicUpdateWithWhereUniqueWithoutGenresInput {
  data: ComicUncheckedUpdateWithoutGenresInput!
  where: ComicWhereUniqueInput!
}

input ComicUpdateWithoutAuthorInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  chapters: ChapterUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutComicsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userbookmarks: ComicBookmarkUpdateManyWithoutComicInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateWithoutChaptersInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  author: AuthorUpdateOneRequiredWithoutComicsInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutComicsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userbookmarks: ComicBookmarkUpdateManyWithoutComicInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateWithoutGenresInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  author: AuthorUpdateOneRequiredWithoutComicsInput
  chapters: ChapterUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userbookmarks: ComicBookmarkUpdateManyWithoutComicInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateWithoutUserbookmarksInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  author: AuthorUpdateOneRequiredWithoutComicsInput
  chapters: ChapterUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutComicsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsDaily: IntFieldUpdateOperationsInput
  viewsHourly: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpsertWithWhereUniqueWithoutAuthorInput {
  create: ComicUncheckedCreateWithoutAuthorInput!
  update: ComicUncheckedUpdateWithoutAuthorInput!
  where: ComicWhereUniqueInput!
}

input ComicUpsertWithWhereUniqueWithoutGenresInput {
  create: ComicUncheckedCreateWithoutGenresInput!
  update: ComicUncheckedUpdateWithoutGenresInput!
  where: ComicWhereUniqueInput!
}

input ComicUpsertWithoutChaptersInput {
  create: ComicUncheckedCreateWithoutChaptersInput!
  update: ComicUncheckedUpdateWithoutChaptersInput!
}

input ComicUpsertWithoutUserbookmarksInput {
  create: ComicUncheckedCreateWithoutUserbookmarksInput!
  update: ComicUncheckedUpdateWithoutUserbookmarksInput!
}

input ComicWhereInput {
  AND: [ComicWhereInput]
  NOT: [ComicWhereInput]
  OR: [ComicWhereInput]
  age: StringNullableFilter
  altName: JsonNullableFilter
  author: AuthorWhereInput
  authorId: IntFilter
  chapters: ChapterListRelationFilter
  concept: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  genres: GenreListRelationFilter
  id: IntFilter
  isHentai: BoolFilter
  lastChapterUpdateAt: DateTimeFilter
  name: StringFilter
  rating: FloatFilter
  released: DateTimeFilter
  slug: StringFilter
  status: StringNullableFilter
  thumb: StringFilter
  thumbWide: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  userbookmarks: ComicBookmarkListRelationFilter
  views: IntFilter
  viewsDaily: IntFilter
  viewsHourly: IntFilter
  viewsWeek: IntFilter
}

input ComicWhereUniqueInput {
  id: Int
  name: String
  slug: String
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""Decimal custom scalar type"""
scalar Decimal

input EnumAdsPositionFieldUpdateOperationsInput {
  set: AdsPosition
}

input EnumAdsPositionFilter {
  equals: AdsPosition
  in: [AdsPosition]
  not: NestedEnumAdsPositionFilter
  notIn: [AdsPosition]
}

input EnumAdsPositionWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumAdsPositionFilter
  _min: NestedEnumAdsPositionFilter
  equals: AdsPosition
  in: [AdsPosition]
  not: NestedEnumAdsPositionWithAggregatesFilter
  notIn: [AdsPosition]
}

input EnumChapterQualityFieldUpdateOperationsInput {
  set: ChapterQuality
}

input EnumChapterQualityFilter {
  equals: ChapterQuality
  in: [ChapterQuality]
  not: NestedEnumChapterQualityFilter
  notIn: [ChapterQuality]
}

input EnumChapterQualityWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumChapterQualityFilter
  _min: NestedEnumChapterQualityFilter
  equals: ChapterQuality
  in: [ChapterQuality]
  not: NestedEnumChapterQualityWithAggregatesFilter
  notIn: [ChapterQuality]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float]
}

type Genre {
  _count: GenreCountOutputType!
  comics(cursor: ComicWhereUniqueInput, distinct: ComicScalarFieldEnum, orderBy: ComicOrderByWithRelationInput, skip: Int, take: Int, where: ComicWhereInput): [Comic!]!
  createdAt: DateTime!
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime!
}

type GenreAvgAggregateOutputType {
  id: Float
}

input GenreAvgOrderByAggregateInput {
  id: SortOrder
}

type GenreCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input GenreCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type GenreCountOutputType {
  comics: Int!
}

input GenreCreateInput {
  comics: ComicCreateNestedManyWithoutGenresInput
  createdAt: DateTime
  name: String!
  slug: String!
  updatedAt: DateTime
}

input GenreCreateManyInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input GenreCreateNestedManyWithoutComicsInput {
  connect: [GenreWhereUniqueInput]
  connectOrCreate: [GenreCreateOrConnectWithoutComicsInput]
  create: [GenreCreateWithoutComicsInput]
}

input GenreCreateOrConnectWithoutComicsInput {
  create: GenreUncheckedCreateWithoutComicsInput!
  where: GenreWhereUniqueInput!
}

input GenreCreateWithoutComicsInput {
  createdAt: DateTime
  name: String!
  slug: String!
  updatedAt: DateTime
}

input GenreListRelationFilter {
  every: GenreWhereInput
  none: GenreWhereInput
  some: GenreWhereInput
}

type GenreMaxAggregateOutputType {
  createdAt: DateTime
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input GenreMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type GenreMinAggregateOutputType {
  createdAt: DateTime
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input GenreMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input GenreOrderByRelationAggregateInput {
  _count: SortOrder
}

input GenreOrderByWithAggregationInput {
  _avg: GenreAvgOrderByAggregateInput
  _count: GenreCountOrderByAggregateInput
  _max: GenreMaxOrderByAggregateInput
  _min: GenreMinOrderByAggregateInput
  _sum: GenreSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input GenreOrderByWithRelationInput {
  comics: ComicOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

enum GenreScalarFieldEnum {
  createdAt
  id
  name
  slug
  updatedAt
}

input GenreScalarWhereInput {
  AND: [GenreScalarWhereInput]
  NOT: [GenreScalarWhereInput]
  OR: [GenreScalarWhereInput]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input GenreScalarWhereWithAggregatesInput {
  AND: [GenreScalarWhereWithAggregatesInput]
  NOT: [GenreScalarWhereWithAggregatesInput]
  OR: [GenreScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type GenreSearch {
  authors: [Genre]
  exhaustiveNbHits: Boolean
  limit: Int
  offset: Int
  processingTimeMs: Int
  total: Int
}

type GenreSumAggregateOutputType {
  id: Int
}

input GenreSumOrderByAggregateInput {
  id: SortOrder
}

input GenreUncheckedCreateInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input GenreUncheckedCreateWithoutComicsInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input GenreUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUncheckedUpdateManyWithoutGenresInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUncheckedUpdateWithoutComicsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateInput {
  comics: ComicUpdateManyWithoutGenresInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateManyWithWhereWithoutComicsInput {
  data: GenreUncheckedUpdateManyWithoutGenresInput!
  where: GenreScalarWhereInput!
}

input GenreUpdateManyWithoutComicsInput {
  connect: [GenreWhereUniqueInput]
  connectOrCreate: [GenreCreateOrConnectWithoutComicsInput]
  create: [GenreCreateWithoutComicsInput]
  delete: [GenreWhereUniqueInput]
  deleteMany: [GenreScalarWhereInput]
  disconnect: [GenreWhereUniqueInput]
  set: [GenreWhereUniqueInput]
  update: [GenreUpdateWithWhereUniqueWithoutComicsInput]
  updateMany: [GenreUpdateManyWithWhereWithoutComicsInput]
  upsert: [GenreUpsertWithWhereUniqueWithoutComicsInput]
}

input GenreUpdateWithWhereUniqueWithoutComicsInput {
  data: GenreUncheckedUpdateWithoutComicsInput!
  where: GenreWhereUniqueInput!
}

input GenreUpdateWithoutComicsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpsertWithWhereUniqueWithoutComicsInput {
  create: GenreUncheckedCreateWithoutComicsInput!
  update: GenreUncheckedUpdateWithoutComicsInput!
  where: GenreWhereUniqueInput!
}

input GenreWhereInput {
  AND: [GenreWhereInput]
  NOT: [GenreWhereInput]
  OR: [GenreWhereInput]
  comics: ComicListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input GenreWhereUniqueInput {
  id: Int
  name: String
  slug: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Json custom scalar type"""
scalar Json

enum JsonNullValueFilter {
  AnyNull
  DbNull
  JsonNull
}

input JsonNullableFilter {
  equals: Json
  not: Json
}

input JsonNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedJsonNullableFilter
  _min: NestedJsonNullableFilter
  equals: Json
  not: Json
}

type Missing {
  context: String!
  createdAt: DateTime!
  data: String!
  id: Int!
  resolved: Boolean!
  updatedAt: DateTime!
}

type MissingAvgAggregateOutputType {
  id: Float
}

input MissingAvgOrderByAggregateInput {
  id: SortOrder
}

type MissingCountAggregateOutputType {
  _all: Int!
  context: Int!
  createdAt: Int!
  data: Int!
  id: Int!
  resolved: Int!
  updatedAt: Int!
}

input MissingCountOrderByAggregateInput {
  context: SortOrder
  createdAt: SortOrder
  data: SortOrder
  id: SortOrder
  resolved: SortOrder
  updatedAt: SortOrder
}

input MissingCreateInput {
  context: String!
  createdAt: DateTime
  data: String!
  resolved: Boolean
  updatedAt: DateTime
}

input MissingCreateManyInput {
  context: String!
  createdAt: DateTime
  data: String!
  id: Int
  resolved: Boolean
  updatedAt: DateTime
}

type MissingMaxAggregateOutputType {
  context: String
  createdAt: DateTime
  data: String
  id: Int
  resolved: Boolean
  updatedAt: DateTime
}

input MissingMaxOrderByAggregateInput {
  context: SortOrder
  createdAt: SortOrder
  data: SortOrder
  id: SortOrder
  resolved: SortOrder
  updatedAt: SortOrder
}

type MissingMinAggregateOutputType {
  context: String
  createdAt: DateTime
  data: String
  id: Int
  resolved: Boolean
  updatedAt: DateTime
}

input MissingMinOrderByAggregateInput {
  context: SortOrder
  createdAt: SortOrder
  data: SortOrder
  id: SortOrder
  resolved: SortOrder
  updatedAt: SortOrder
}

input MissingOrderByWithAggregationInput {
  _avg: MissingAvgOrderByAggregateInput
  _count: MissingCountOrderByAggregateInput
  _max: MissingMaxOrderByAggregateInput
  _min: MissingMinOrderByAggregateInput
  _sum: MissingSumOrderByAggregateInput
  context: SortOrder
  createdAt: SortOrder
  data: SortOrder
  id: SortOrder
  resolved: SortOrder
  updatedAt: SortOrder
}

input MissingOrderByWithRelationInput {
  context: SortOrder
  createdAt: SortOrder
  data: SortOrder
  id: SortOrder
  resolved: SortOrder
  updatedAt: SortOrder
}

enum MissingScalarFieldEnum {
  context
  createdAt
  data
  id
  resolved
  updatedAt
}

input MissingScalarWhereWithAggregatesInput {
  AND: [MissingScalarWhereWithAggregatesInput]
  NOT: [MissingScalarWhereWithAggregatesInput]
  OR: [MissingScalarWhereWithAggregatesInput]
  context: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  data: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  resolved: BoolWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type MissingSumAggregateOutputType {
  id: Int
}

input MissingSumOrderByAggregateInput {
  id: SortOrder
}

input MissingUncheckedCreateInput {
  context: String!
  createdAt: DateTime
  data: String!
  id: Int
  resolved: Boolean
  updatedAt: DateTime
}

input MissingUncheckedUpdateInput {
  context: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  data: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MissingUncheckedUpdateManyInput {
  context: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  data: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MissingUpdateInput {
  context: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  data: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MissingUpdateManyMutationInput {
  context: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  data: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input MissingWhereInput {
  AND: [MissingWhereInput]
  NOT: [MissingWhereInput]
  OR: [MissingWhereInput]
  context: StringFilter
  createdAt: DateTimeFilter
  data: StringFilter
  id: IntFilter
  resolved: BoolFilter
  updatedAt: DateTimeFilter
}

input MissingWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneAds(data: AdsCreateInput!): Ads!
  createOneAuthor(data: AuthorCreateInput!): Author!
  createOneChapter(data: ChapterCreateInput!): Chapter!
  createOneChapterBookmark(data: ChapterBookmarkCreateInput!): ChapterBookmark!
  createOneComic(data: ComicCreateInput!): Comic!
  createOneComicBookmark(data: ComicBookmarkCreateInput!): ComicBookmark!
  createOneGenre(data: GenreCreateInput!): Genre!
  createOneMissing(data: MissingCreateInput!): Missing!
  createOnePerfomanceAnalytic(data: PerfomanceAnalyticCreateInput!): PerfomanceAnalytic!
  createOneReport(data: ReportCreateInput!): Report!
  createOneUser(data: UserCreateInput!): User!
  deleteManyAds(where: AdsWhereInput): BatchPayload!
  deleteManyAuthor(where: AuthorWhereInput): BatchPayload!
  deleteManyChapter(where: ChapterWhereInput): BatchPayload!
  deleteManyChapterBookmark(where: ChapterBookmarkWhereInput): BatchPayload!
  deleteManyComic(where: ComicWhereInput): BatchPayload!
  deleteManyComicBookmark(where: ComicBookmarkWhereInput): BatchPayload!
  deleteManyGenre(where: GenreWhereInput): BatchPayload!
  deleteManyMissing(where: MissingWhereInput): BatchPayload!
  deleteManyPerfomanceAnalytic(where: PerfomanceAnalyticWhereInput): BatchPayload!
  deleteManyReport(where: ReportWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneAds(where: AdsWhereUniqueInput!): Ads
  deleteOneAuthor(where: AuthorWhereUniqueInput!): Author
  deleteOneChapter(where: ChapterWhereUniqueInput!): Chapter
  deleteOneChapterBookmark(where: ChapterBookmarkWhereUniqueInput!): ChapterBookmark
  deleteOneComic(where: ComicWhereUniqueInput!): Comic
  deleteOneComicBookmark(where: ComicBookmarkWhereUniqueInput!): ComicBookmark
  deleteOneGenre(where: GenreWhereUniqueInput!): Genre
  deleteOneMissing(where: MissingWhereUniqueInput!): Missing
  deleteOnePerfomanceAnalytic(where: PerfomanceAnalyticWhereUniqueInput!): PerfomanceAnalytic
  deleteOneReport(where: ReportWhereUniqueInput!): Report
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(email: String!, password: String!): AuthResponse
  register(email: String!, name: String!, password: String!): AuthResponse
  reportMissing(context: String!, data: String!): Boolean
  reportView(context: String!, id: Int!): Boolean
  sanityCheck(author: String!, description: String, genres: [String], name: String!, released: String, thumb: String!, thumbWide: String, type: String): SanityCheck
  sanityEclipse(chapter: JSONObject, slug: String!): SanityEclipse
  updateManyAds(data: AdsUpdateManyMutationInput!, where: AdsWhereInput): BatchPayload!
  updateManyAuthor(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): BatchPayload!
  updateManyChapter(data: ChapterUpdateManyMutationInput!, where: ChapterWhereInput): BatchPayload!
  updateManyChapterBookmark(data: ChapterBookmarkUpdateManyMutationInput!, where: ChapterBookmarkWhereInput): BatchPayload!
  updateManyComic(data: ComicUpdateManyMutationInput!, where: ComicWhereInput): BatchPayload!
  updateManyComicBookmark(data: ComicBookmarkUpdateManyMutationInput!, where: ComicBookmarkWhereInput): BatchPayload!
  updateManyGenre(data: GenreUpdateManyMutationInput!, where: GenreWhereInput): BatchPayload!
  updateManyMissing(data: MissingUpdateManyMutationInput!, where: MissingWhereInput): BatchPayload!
  updateManyPerfomanceAnalytic(data: PerfomanceAnalyticUpdateManyMutationInput!, where: PerfomanceAnalyticWhereInput): BatchPayload!
  updateManyReport(data: ReportUpdateManyMutationInput!, where: ReportWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOneAds(data: AdsUpdateInput!, where: AdsWhereUniqueInput!): Ads!
  updateOneAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author!
  updateOneChapter(data: ChapterUpdateInput!, where: ChapterWhereUniqueInput!): Chapter!
  updateOneChapterBookmark(data: ChapterBookmarkUpdateInput!, where: ChapterBookmarkWhereUniqueInput!): ChapterBookmark!
  updateOneComic(data: ComicUpdateInput!, where: ComicWhereUniqueInput!): Comic!
  updateOneComicBookmark(data: ComicBookmarkUpdateInput!, where: ComicBookmarkWhereUniqueInput!): ComicBookmark!
  updateOneGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre!
  updateOneMissing(data: MissingUpdateInput!, where: MissingWhereUniqueInput!): Missing!
  updateOnePerfomanceAnalytic(data: PerfomanceAnalyticUpdateInput!, where: PerfomanceAnalyticWhereUniqueInput!): PerfomanceAnalytic!
  updateOneReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  uploadFile(file: Upload, path: String!): Boolean
  upsertOneAds(create: AdsCreateInput!, update: AdsUpdateInput!, where: AdsWhereUniqueInput!): Ads!
  upsertOneAuthor(create: AuthorCreateInput!, update: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author!
  upsertOneChapter(create: ChapterCreateInput!, update: ChapterUpdateInput!, where: ChapterWhereUniqueInput!): Chapter!
  upsertOneChapterBookmark(create: ChapterBookmarkCreateInput!, update: ChapterBookmarkUpdateInput!, where: ChapterBookmarkWhereUniqueInput!): ChapterBookmark!
  upsertOneComic(create: ComicCreateInput!, update: ComicUpdateInput!, where: ComicWhereUniqueInput!): Comic!
  upsertOneComicBookmark(create: ComicBookmarkCreateInput!, update: ComicBookmarkUpdateInput!, where: ComicBookmarkWhereUniqueInput!): ComicBookmark!
  upsertOneGenre(create: GenreCreateInput!, update: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre!
  upsertOneMissing(create: MissingCreateInput!, update: MissingUpdateInput!, where: MissingWhereUniqueInput!): Missing!
  upsertOnePerfomanceAnalytic(create: PerfomanceAnalyticCreateInput!, update: PerfomanceAnalyticUpdateInput!, where: PerfomanceAnalyticWhereUniqueInput!): PerfomanceAnalytic!
  upsertOneReport(create: ReportCreateInput!, update: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedEnumAdsPositionFilter {
  equals: AdsPosition
  in: [AdsPosition]
  not: NestedEnumAdsPositionFilter
  notIn: [AdsPosition]
}

input NestedEnumAdsPositionWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumAdsPositionFilter
  _min: NestedEnumAdsPositionFilter
  equals: AdsPosition
  in: [AdsPosition]
  not: NestedEnumAdsPositionWithAggregatesFilter
  notIn: [AdsPosition]
}

input NestedEnumChapterQualityFilter {
  equals: ChapterQuality
  in: [ChapterQuality]
  not: NestedEnumChapterQualityFilter
  notIn: [ChapterQuality]
}

input NestedEnumChapterQualityWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumChapterQualityFilter
  _min: NestedEnumChapterQualityFilter
  equals: ChapterQuality
  in: [ChapterQuality]
  not: NestedEnumChapterQualityWithAggregatesFilter
  notIn: [ChapterQuality]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

input NestedJsonNullableFilter {
  equals: Json
  not: Json
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

enum NullableJsonNullValueInput {
  DbNull
  JsonNull
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type PerfomanceAnalytic {
  createdAt: DateTime!
  id: Int!
  operationName: String!
  query: String!
  time: Float!
  updatedAt: DateTime!
  variables: String!
}

type PerfomanceAnalyticAvgAggregateOutputType {
  id: Float
  time: Float
}

input PerfomanceAnalyticAvgOrderByAggregateInput {
  id: SortOrder
  time: SortOrder
}

type PerfomanceAnalyticCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  operationName: Int!
  query: Int!
  time: Int!
  updatedAt: Int!
  variables: Int!
}

input PerfomanceAnalyticCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  operationName: SortOrder
  query: SortOrder
  time: SortOrder
  updatedAt: SortOrder
  variables: SortOrder
}

input PerfomanceAnalyticCreateInput {
  createdAt: DateTime
  operationName: String!
  query: String!
  time: Float!
  updatedAt: DateTime
  variables: String!
}

input PerfomanceAnalyticCreateManyInput {
  createdAt: DateTime
  id: Int
  operationName: String!
  query: String!
  time: Float!
  updatedAt: DateTime
  variables: String!
}

type PerfomanceAnalyticMaxAggregateOutputType {
  createdAt: DateTime
  id: Int
  operationName: String
  query: String
  time: Float
  updatedAt: DateTime
  variables: String
}

input PerfomanceAnalyticMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  operationName: SortOrder
  query: SortOrder
  time: SortOrder
  updatedAt: SortOrder
  variables: SortOrder
}

type PerfomanceAnalyticMinAggregateOutputType {
  createdAt: DateTime
  id: Int
  operationName: String
  query: String
  time: Float
  updatedAt: DateTime
  variables: String
}

input PerfomanceAnalyticMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  operationName: SortOrder
  query: SortOrder
  time: SortOrder
  updatedAt: SortOrder
  variables: SortOrder
}

input PerfomanceAnalyticOrderByWithAggregationInput {
  _avg: PerfomanceAnalyticAvgOrderByAggregateInput
  _count: PerfomanceAnalyticCountOrderByAggregateInput
  _max: PerfomanceAnalyticMaxOrderByAggregateInput
  _min: PerfomanceAnalyticMinOrderByAggregateInput
  _sum: PerfomanceAnalyticSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  operationName: SortOrder
  query: SortOrder
  time: SortOrder
  updatedAt: SortOrder
  variables: SortOrder
}

input PerfomanceAnalyticOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  operationName: SortOrder
  query: SortOrder
  time: SortOrder
  updatedAt: SortOrder
  variables: SortOrder
}

enum PerfomanceAnalyticScalarFieldEnum {
  createdAt
  id
  operationName
  query
  time
  updatedAt
  variables
}

input PerfomanceAnalyticScalarWhereWithAggregatesInput {
  AND: [PerfomanceAnalyticScalarWhereWithAggregatesInput]
  NOT: [PerfomanceAnalyticScalarWhereWithAggregatesInput]
  OR: [PerfomanceAnalyticScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  operationName: StringWithAggregatesFilter
  query: StringWithAggregatesFilter
  time: FloatWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  variables: StringWithAggregatesFilter
}

type PerfomanceAnalyticSumAggregateOutputType {
  id: Int
  time: Float
}

input PerfomanceAnalyticSumOrderByAggregateInput {
  id: SortOrder
  time: SortOrder
}

input PerfomanceAnalyticUncheckedCreateInput {
  createdAt: DateTime
  id: Int
  operationName: String!
  query: String!
  time: Float!
  updatedAt: DateTime
  variables: String!
}

input PerfomanceAnalyticUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  query: StringFieldUpdateOperationsInput
  time: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variables: StringFieldUpdateOperationsInput
}

input PerfomanceAnalyticUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  query: StringFieldUpdateOperationsInput
  time: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variables: StringFieldUpdateOperationsInput
}

input PerfomanceAnalyticUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  query: StringFieldUpdateOperationsInput
  time: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variables: StringFieldUpdateOperationsInput
}

input PerfomanceAnalyticUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  operationName: StringFieldUpdateOperationsInput
  query: StringFieldUpdateOperationsInput
  time: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  variables: StringFieldUpdateOperationsInput
}

input PerfomanceAnalyticWhereInput {
  AND: [PerfomanceAnalyticWhereInput]
  NOT: [PerfomanceAnalyticWhereInput]
  OR: [PerfomanceAnalyticWhereInput]
  createdAt: DateTimeFilter
  id: IntFilter
  operationName: StringFilter
  query: StringFilter
  time: FloatFilter
  updatedAt: DateTimeFilter
  variables: StringFilter
}

input PerfomanceAnalyticWhereUniqueInput {
  id: Int
}

type Query {
  aggregateAds(cursor: AdsWhereUniqueInput, orderBy: [AdsOrderByWithRelationInput], skip: Int, take: Int, where: AdsWhereInput): AggregateAds
  aggregateAuthor(cursor: AuthorWhereUniqueInput, orderBy: [AuthorOrderByWithRelationInput], skip: Int, take: Int, where: AuthorWhereInput): AggregateAuthor
  aggregateChapter(cursor: ChapterWhereUniqueInput, orderBy: [ChapterOrderByWithRelationInput], skip: Int, take: Int, where: ChapterWhereInput): AggregateChapter
  aggregateChapterBookmark(cursor: ChapterBookmarkWhereUniqueInput, orderBy: [ChapterBookmarkOrderByWithRelationInput], skip: Int, take: Int, where: ChapterBookmarkWhereInput): AggregateChapterBookmark
  aggregateComic(cursor: ComicWhereUniqueInput, orderBy: [ComicOrderByWithRelationInput], skip: Int, take: Int, where: ComicWhereInput): AggregateComic
  aggregateComicBookmark(cursor: ComicBookmarkWhereUniqueInput, orderBy: [ComicBookmarkOrderByWithRelationInput], skip: Int, take: Int, where: ComicBookmarkWhereInput): AggregateComicBookmark
  aggregateGenre(cursor: GenreWhereUniqueInput, orderBy: [GenreOrderByWithRelationInput], skip: Int, take: Int, where: GenreWhereInput): AggregateGenre
  aggregateMissing(cursor: MissingWhereUniqueInput, orderBy: [MissingOrderByWithRelationInput], skip: Int, take: Int, where: MissingWhereInput): AggregateMissing
  aggregatePerfomanceAnalytic(cursor: PerfomanceAnalyticWhereUniqueInput, orderBy: [PerfomanceAnalyticOrderByWithRelationInput], skip: Int, take: Int, where: PerfomanceAnalyticWhereInput): AggregatePerfomanceAnalytic
  aggregateReport(cursor: ReportWhereUniqueInput, orderBy: [ReportOrderByWithRelationInput], skip: Int, take: Int, where: ReportWhereInput): AggregateReport
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): AggregateUser
  authorSearch(limit: Int, offset: Int, query: String!): AuthorSearch
  comicSearch(allowHentai: Boolean = false, limit: Int, offset: Int, query: String!, type: String): ComicSearch
  findFirstAds(cursor: AdsWhereUniqueInput, distinct: [AdsScalarFieldEnum], orderBy: [AdsOrderByWithRelationInput], skip: Int, take: Int, where: AdsWhereInput): Ads
  findFirstAuthor(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum], orderBy: [AuthorOrderByWithRelationInput], skip: Int, take: Int, where: AuthorWhereInput): Author
  findFirstChapter(cursor: ChapterWhereUniqueInput, distinct: [ChapterScalarFieldEnum], orderBy: [ChapterOrderByWithRelationInput], skip: Int, take: Int, where: ChapterWhereInput): Chapter
  findFirstChapterBookmark(cursor: ChapterBookmarkWhereUniqueInput, distinct: [ChapterBookmarkScalarFieldEnum], orderBy: [ChapterBookmarkOrderByWithRelationInput], skip: Int, take: Int, where: ChapterBookmarkWhereInput): ChapterBookmark
  findFirstComic(cursor: ComicWhereUniqueInput, distinct: [ComicScalarFieldEnum], orderBy: [ComicOrderByWithRelationInput], skip: Int, take: Int, where: ComicWhereInput): Comic
  findFirstComicBookmark(cursor: ComicBookmarkWhereUniqueInput, distinct: [ComicBookmarkScalarFieldEnum], orderBy: [ComicBookmarkOrderByWithRelationInput], skip: Int, take: Int, where: ComicBookmarkWhereInput): ComicBookmark
  findFirstGenre(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum], orderBy: [GenreOrderByWithRelationInput], skip: Int, take: Int, where: GenreWhereInput): Genre
  findFirstMissing(cursor: MissingWhereUniqueInput, distinct: [MissingScalarFieldEnum], orderBy: [MissingOrderByWithRelationInput], skip: Int, take: Int, where: MissingWhereInput): Missing
  findFirstPerfomanceAnalytic(cursor: PerfomanceAnalyticWhereUniqueInput, distinct: [PerfomanceAnalyticScalarFieldEnum], orderBy: [PerfomanceAnalyticOrderByWithRelationInput], skip: Int, take: Int, where: PerfomanceAnalyticWhereInput): PerfomanceAnalytic
  findFirstReport(cursor: ReportWhereUniqueInput, distinct: [ReportScalarFieldEnum], orderBy: [ReportOrderByWithRelationInput], skip: Int, take: Int, where: ReportWhereInput): Report
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): User
  findManyAds(cursor: AdsWhereUniqueInput, distinct: [AdsScalarFieldEnum], orderBy: [AdsOrderByWithRelationInput], skip: Int, take: Int, where: AdsWhereInput): [Ads!]!
  findManyAdsCount(cursor: AdsWhereUniqueInput, distinct: [AdsScalarFieldEnum], orderBy: [AdsOrderByWithRelationInput], skip: Int, take: Int, where: AdsWhereInput): Int!
  findManyAuthor(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum], orderBy: [AuthorOrderByWithRelationInput], skip: Int, take: Int, where: AuthorWhereInput): [Author!]!
  findManyAuthorCount(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum], orderBy: [AuthorOrderByWithRelationInput], skip: Int, take: Int, where: AuthorWhereInput): Int!
  findManyChapter(cursor: ChapterWhereUniqueInput, distinct: [ChapterScalarFieldEnum], orderBy: [ChapterOrderByWithRelationInput], skip: Int, take: Int, where: ChapterWhereInput): [Chapter!]!
  findManyChapterBookmark(cursor: ChapterBookmarkWhereUniqueInput, distinct: [ChapterBookmarkScalarFieldEnum], orderBy: [ChapterBookmarkOrderByWithRelationInput], skip: Int, take: Int, where: ChapterBookmarkWhereInput): [ChapterBookmark!]!
  findManyChapterBookmarkCount(cursor: ChapterBookmarkWhereUniqueInput, distinct: [ChapterBookmarkScalarFieldEnum], orderBy: [ChapterBookmarkOrderByWithRelationInput], skip: Int, take: Int, where: ChapterBookmarkWhereInput): Int!
  findManyChapterCount(cursor: ChapterWhereUniqueInput, distinct: [ChapterScalarFieldEnum], orderBy: [ChapterOrderByWithRelationInput], skip: Int, take: Int, where: ChapterWhereInput): Int!
  findManyComic(cursor: ComicWhereUniqueInput, distinct: [ComicScalarFieldEnum], orderBy: [ComicOrderByWithRelationInput], skip: Int, take: Int, where: ComicWhereInput): [Comic!]!
  findManyComicBookmark(cursor: ComicBookmarkWhereUniqueInput, distinct: [ComicBookmarkScalarFieldEnum], orderBy: [ComicBookmarkOrderByWithRelationInput], skip: Int, take: Int, where: ComicBookmarkWhereInput): [ComicBookmark!]!
  findManyComicBookmarkCount(cursor: ComicBookmarkWhereUniqueInput, distinct: [ComicBookmarkScalarFieldEnum], orderBy: [ComicBookmarkOrderByWithRelationInput], skip: Int, take: Int, where: ComicBookmarkWhereInput): Int!
  findManyComicCount(cursor: ComicWhereUniqueInput, distinct: [ComicScalarFieldEnum], orderBy: [ComicOrderByWithRelationInput], skip: Int, take: Int, where: ComicWhereInput): Int!
  findManyGenre(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum], orderBy: [GenreOrderByWithRelationInput], skip: Int, take: Int, where: GenreWhereInput): [Genre!]!
  findManyGenreCount(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum], orderBy: [GenreOrderByWithRelationInput], skip: Int, take: Int, where: GenreWhereInput): Int!
  findManyMissing(cursor: MissingWhereUniqueInput, distinct: [MissingScalarFieldEnum], orderBy: [MissingOrderByWithRelationInput], skip: Int, take: Int, where: MissingWhereInput): [Missing!]!
  findManyMissingCount(cursor: MissingWhereUniqueInput, distinct: [MissingScalarFieldEnum], orderBy: [MissingOrderByWithRelationInput], skip: Int, take: Int, where: MissingWhereInput): Int!
  findManyPerfomanceAnalytic(cursor: PerfomanceAnalyticWhereUniqueInput, distinct: [PerfomanceAnalyticScalarFieldEnum], orderBy: [PerfomanceAnalyticOrderByWithRelationInput], skip: Int, take: Int, where: PerfomanceAnalyticWhereInput): [PerfomanceAnalytic!]!
  findManyPerfomanceAnalyticCount(cursor: PerfomanceAnalyticWhereUniqueInput, distinct: [PerfomanceAnalyticScalarFieldEnum], orderBy: [PerfomanceAnalyticOrderByWithRelationInput], skip: Int, take: Int, where: PerfomanceAnalyticWhereInput): Int!
  findManyReport(cursor: ReportWhereUniqueInput, distinct: [ReportScalarFieldEnum], orderBy: [ReportOrderByWithRelationInput], skip: Int, take: Int, where: ReportWhereInput): [Report!]!
  findManyReportCount(cursor: ReportWhereUniqueInput, distinct: [ReportScalarFieldEnum], orderBy: [ReportOrderByWithRelationInput], skip: Int, take: Int, where: ReportWhereInput): Int!
  findManyUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): [User!]!
  findManyUserCount(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): Int!
  findUniqueAds(where: AdsWhereUniqueInput!): Ads
  findUniqueAuthor(where: AuthorWhereUniqueInput!): Author
  findUniqueChapter(where: ChapterWhereUniqueInput!): Chapter
  findUniqueChapterBookmark(where: ChapterBookmarkWhereUniqueInput!): ChapterBookmark
  findUniqueComic(where: ComicWhereUniqueInput!): Comic
  findUniqueComicBookmark(where: ComicBookmarkWhereUniqueInput!): ComicBookmark
  findUniqueGenre(where: GenreWhereUniqueInput!): Genre
  findUniqueMissing(where: MissingWhereUniqueInput!): Missing
  findUniquePerfomanceAnalytic(where: PerfomanceAnalyticWhereUniqueInput!): PerfomanceAnalytic
  findUniqueReport(where: ReportWhereUniqueInput!): Report
  findUniqueUser(where: UserWhereUniqueInput!): User
  genreSearch(limit: Int, offset: Int, query: String!): AuthorSearch
  test: Boolean
}

enum QueryMode {
  default
  insensitive
}

type Report {
  contextIdentifier: String!
  contextType: String!
  createdAt: DateTime!
  id: Int!
  message: String
  name: String!
  resolved: Boolean!
  updatedAt: DateTime!
  user: User
  userId: Int
}

type ReportAvgAggregateOutputType {
  id: Float
  userId: Float
}

input ReportAvgOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

type ReportCountAggregateOutputType {
  _all: Int!
  contextIdentifier: Int!
  contextType: Int!
  createdAt: Int!
  id: Int!
  message: Int!
  name: Int!
  resolved: Int!
  updatedAt: Int!
  userId: Int!
}

input ReportCountOrderByAggregateInput {
  contextIdentifier: SortOrder
  contextType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  name: SortOrder
  resolved: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ReportCreateInput {
  contextIdentifier: String!
  contextType: String!
  createdAt: DateTime
  message: String
  name: String!
  resolved: Boolean
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutReportsInput
}

input ReportCreateManyInput {
  contextIdentifier: String!
  contextType: String!
  createdAt: DateTime
  id: Int
  message: String
  name: String!
  resolved: Boolean
  updatedAt: DateTime
  userId: Int
}

input ReportCreateManyUserInput {
  contextIdentifier: String!
  contextType: String!
  createdAt: DateTime
  id: Int
  message: String
  name: String!
  resolved: Boolean
  updatedAt: DateTime
}

input ReportCreateManyUserInputEnvelope {
  data: ReportCreateManyUserInput!
  skipDuplicates: Boolean
}

input ReportCreateNestedManyWithoutUserInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutUserInput]
  create: [ReportCreateWithoutUserInput]
  createMany: ReportCreateManyUserInputEnvelope
}

input ReportCreateOrConnectWithoutUserInput {
  create: ReportUncheckedCreateWithoutUserInput!
  where: ReportWhereUniqueInput!
}

input ReportCreateWithoutUserInput {
  contextIdentifier: String!
  contextType: String!
  createdAt: DateTime
  message: String
  name: String!
  resolved: Boolean
  updatedAt: DateTime
}

input ReportListRelationFilter {
  every: ReportWhereInput
  none: ReportWhereInput
  some: ReportWhereInput
}

type ReportMaxAggregateOutputType {
  contextIdentifier: String
  contextType: String
  createdAt: DateTime
  id: Int
  message: String
  name: String
  resolved: Boolean
  updatedAt: DateTime
  userId: Int
}

input ReportMaxOrderByAggregateInput {
  contextIdentifier: SortOrder
  contextType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  name: SortOrder
  resolved: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type ReportMinAggregateOutputType {
  contextIdentifier: String
  contextType: String
  createdAt: DateTime
  id: Int
  message: String
  name: String
  resolved: Boolean
  updatedAt: DateTime
  userId: Int
}

input ReportMinOrderByAggregateInput {
  contextIdentifier: SortOrder
  contextType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  name: SortOrder
  resolved: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ReportOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReportOrderByWithAggregationInput {
  _avg: ReportAvgOrderByAggregateInput
  _count: ReportCountOrderByAggregateInput
  _max: ReportMaxOrderByAggregateInput
  _min: ReportMinOrderByAggregateInput
  _sum: ReportSumOrderByAggregateInput
  contextIdentifier: SortOrder
  contextType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  name: SortOrder
  resolved: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ReportOrderByWithRelationInput {
  contextIdentifier: SortOrder
  contextType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  name: SortOrder
  resolved: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ReportScalarFieldEnum {
  contextIdentifier
  contextType
  createdAt
  id
  message
  name
  resolved
  updatedAt
  userId
}

input ReportScalarWhereInput {
  AND: [ReportScalarWhereInput]
  NOT: [ReportScalarWhereInput]
  OR: [ReportScalarWhereInput]
  contextIdentifier: StringFilter
  contextType: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringNullableFilter
  name: StringFilter
  resolved: BoolFilter
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
}

input ReportScalarWhereWithAggregatesInput {
  AND: [ReportScalarWhereWithAggregatesInput]
  NOT: [ReportScalarWhereWithAggregatesInput]
  OR: [ReportScalarWhereWithAggregatesInput]
  contextIdentifier: StringWithAggregatesFilter
  contextType: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  message: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  resolved: BoolWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: IntNullableWithAggregatesFilter
}

type ReportSumAggregateOutputType {
  id: Int
  userId: Int
}

input ReportSumOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

input ReportUncheckedCreateInput {
  contextIdentifier: String!
  contextType: String!
  createdAt: DateTime
  id: Int
  message: String
  name: String!
  resolved: Boolean
  updatedAt: DateTime
  userId: Int
}

input ReportUncheckedCreateNestedManyWithoutUserInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutUserInput]
  create: [ReportCreateWithoutUserInput]
  createMany: ReportCreateManyUserInputEnvelope
}

input ReportUncheckedCreateWithoutUserInput {
  contextIdentifier: String!
  contextType: String!
  createdAt: DateTime
  id: Int
  message: String
  name: String!
  resolved: Boolean
  updatedAt: DateTime
}

input ReportUncheckedUpdateInput {
  contextIdentifier: StringFieldUpdateOperationsInput
  contextType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: NullableIntFieldUpdateOperationsInput
}

input ReportUncheckedUpdateManyInput {
  contextIdentifier: StringFieldUpdateOperationsInput
  contextType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: NullableIntFieldUpdateOperationsInput
}

input ReportUncheckedUpdateManyWithoutReportsInput {
  contextIdentifier: StringFieldUpdateOperationsInput
  contextType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUncheckedUpdateManyWithoutUserInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutUserInput]
  create: [ReportCreateWithoutUserInput]
  createMany: ReportCreateManyUserInputEnvelope
  delete: [ReportWhereUniqueInput]
  deleteMany: [ReportScalarWhereInput]
  disconnect: [ReportWhereUniqueInput]
  set: [ReportWhereUniqueInput]
  update: [ReportUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ReportUpdateManyWithWhereWithoutUserInput]
  upsert: [ReportUpsertWithWhereUniqueWithoutUserInput]
}

input ReportUncheckedUpdateWithoutUserInput {
  contextIdentifier: StringFieldUpdateOperationsInput
  contextType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpdateInput {
  contextIdentifier: StringFieldUpdateOperationsInput
  contextType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutReportsInput
}

input ReportUpdateManyMutationInput {
  contextIdentifier: StringFieldUpdateOperationsInput
  contextType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpdateManyWithWhereWithoutUserInput {
  data: ReportUncheckedUpdateManyWithoutReportsInput!
  where: ReportScalarWhereInput!
}

input ReportUpdateManyWithoutUserInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutUserInput]
  create: [ReportCreateWithoutUserInput]
  createMany: ReportCreateManyUserInputEnvelope
  delete: [ReportWhereUniqueInput]
  deleteMany: [ReportScalarWhereInput]
  disconnect: [ReportWhereUniqueInput]
  set: [ReportWhereUniqueInput]
  update: [ReportUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ReportUpdateManyWithWhereWithoutUserInput]
  upsert: [ReportUpsertWithWhereUniqueWithoutUserInput]
}

input ReportUpdateWithWhereUniqueWithoutUserInput {
  data: ReportUncheckedUpdateWithoutUserInput!
  where: ReportWhereUniqueInput!
}

input ReportUpdateWithoutUserInput {
  contextIdentifier: StringFieldUpdateOperationsInput
  contextType: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  resolved: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpsertWithWhereUniqueWithoutUserInput {
  create: ReportUncheckedCreateWithoutUserInput!
  update: ReportUncheckedUpdateWithoutUserInput!
  where: ReportWhereUniqueInput!
}

input ReportWhereInput {
  AND: [ReportWhereInput]
  NOT: [ReportWhereInput]
  OR: [ReportWhereInput]
  contextIdentifier: StringFilter
  contextType: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringNullableFilter
  name: StringFilter
  resolved: BoolFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntNullableFilter
}

input ReportWhereUniqueInput {
  id: Int
}

type SanityCheck {
  chapters: [Chapter]
  status: String
}

type SanityEclipse {
  message: String
  status: Boolean
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String]
  has: String
  hasEvery: [String]
  hasSome: [String]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _count: UserCountOutputType!
  allowHentai: Boolean!
  chapterbookmarks(cursor: ChapterBookmarkWhereUniqueInput, distinct: ChapterBookmarkScalarFieldEnum, orderBy: ChapterBookmarkOrderByWithRelationInput, skip: Int, take: Int, where: ChapterBookmarkWhereInput): [ChapterBookmark!]!
  comicbookmarks(cursor: ComicBookmarkWhereUniqueInput, distinct: ComicBookmarkScalarFieldEnum, orderBy: ComicBookmarkOrderByWithRelationInput, skip: Int, take: Int, where: ComicBookmarkWhereInput): [ComicBookmark!]!
  createdAt: DateTime!
  email: String!
  id: Int!
  isAdmin: Boolean!
  name: String
  password: String!
  reports(cursor: ReportWhereUniqueInput, distinct: ReportScalarFieldEnum, orderBy: ReportOrderByWithRelationInput, skip: Int, take: Int, where: ReportWhereInput): [Report!]!
  updatedAt: DateTime!
}

type UserAvgAggregateOutputType {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCountAggregateOutputType {
  _all: Int!
  allowHentai: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  isAdmin: Int!
  name: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  allowHentai: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type UserCountOutputType {
  chapterbookmarks: Int!
  comicbookmarks: Int!
  reports: Int!
}

input UserCreateInput {
  allowHentai: Boolean
  chapterbookmarks: ChapterBookmarkCreateNestedManyWithoutUsersInput
  comicbookmarks: ComicBookmarkCreateNestedManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  isAdmin: Boolean
  name: String
  reports: ReportCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateManyInput {
  allowHentai: Boolean
  createdAt: DateTime
  email: String!
  id: Int
  isAdmin: Boolean
  name: String
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutChapterbookmarksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChapterbookmarksInput
  create: UserUncheckedCreateWithoutChapterbookmarksInput
}

input UserCreateNestedOneWithoutComicbookmarksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutComicbookmarksInput
  create: UserUncheckedCreateWithoutComicbookmarksInput
}

input UserCreateNestedOneWithoutReportsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReportsInput
  create: UserUncheckedCreateWithoutReportsInput
}

input UserCreateOrConnectWithoutChapterbookmarksInput {
  create: UserUncheckedCreateWithoutChapterbookmarksInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutComicbookmarksInput {
  create: UserUncheckedCreateWithoutComicbookmarksInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReportsInput {
  create: UserUncheckedCreateWithoutReportsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutChapterbookmarksInput {
  allowHentai: Boolean
  comicbookmarks: ComicBookmarkCreateNestedManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  isAdmin: Boolean
  name: String
  reports: ReportCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutComicbookmarksInput {
  allowHentai: Boolean
  chapterbookmarks: ChapterBookmarkCreateNestedManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  isAdmin: Boolean
  name: String
  reports: ReportCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutReportsInput {
  allowHentai: Boolean
  chapterbookmarks: ChapterBookmarkCreateNestedManyWithoutUsersInput
  comicbookmarks: ComicBookmarkCreateNestedManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  isAdmin: Boolean
  name: String
  updatedAt: DateTime
}

type UserMaxAggregateOutputType {
  allowHentai: Boolean
  createdAt: DateTime
  email: String
  id: Int
  isAdmin: Boolean
  name: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  allowHentai: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregateOutputType {
  allowHentai: Boolean
  createdAt: DateTime
  email: String
  id: Int
  isAdmin: Boolean
  name: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  allowHentai: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  allowHentai: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  allowHentai: SortOrder
  chapterbookmarks: ChapterBookmarkOrderByRelationAggregateInput
  comicbookmarks: ComicBookmarkOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  reports: ReportOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  allowHentai
  createdAt
  email
  id
  isAdmin
  name
  password
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  allowHentai: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  isAdmin: BoolWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type UserSumAggregateOutputType {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUncheckedCreateInput {
  allowHentai: Boolean
  chapterbookmarks: ChapterBookmarkUncheckedCreateNestedManyWithoutUsersInput
  comicbookmarks: ComicBookmarkUncheckedCreateNestedManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  id: Int
  isAdmin: Boolean
  name: String
  reports: ReportUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutChapterbookmarksInput {
  allowHentai: Boolean
  comicbookmarks: ComicBookmarkUncheckedCreateNestedManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  id: Int
  isAdmin: Boolean
  name: String
  reports: ReportUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutComicbookmarksInput {
  allowHentai: Boolean
  chapterbookmarks: ChapterBookmarkUncheckedCreateNestedManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  id: Int
  isAdmin: Boolean
  name: String
  reports: ReportUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutReportsInput {
  allowHentai: Boolean
  chapterbookmarks: ChapterBookmarkUncheckedCreateNestedManyWithoutUsersInput
  comicbookmarks: ComicBookmarkUncheckedCreateNestedManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  id: Int
  isAdmin: Boolean
  name: String
  updatedAt: DateTime
}

input UserUncheckedUpdateInput {
  allowHentai: BoolFieldUpdateOperationsInput
  chapterbookmarks: ChapterBookmarkUncheckedUpdateManyWithoutUsersInput
  comicbookmarks: ComicBookmarkUncheckedUpdateManyWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  reports: ReportUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  allowHentai: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutChapterbookmarksInput {
  allowHentai: BoolFieldUpdateOperationsInput
  comicbookmarks: ComicBookmarkUncheckedUpdateManyWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  reports: ReportUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutComicbookmarksInput {
  allowHentai: BoolFieldUpdateOperationsInput
  chapterbookmarks: ChapterBookmarkUncheckedUpdateManyWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  reports: ReportUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutReportsInput {
  allowHentai: BoolFieldUpdateOperationsInput
  chapterbookmarks: ChapterBookmarkUncheckedUpdateManyWithoutUsersInput
  comicbookmarks: ComicBookmarkUncheckedUpdateManyWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateInput {
  allowHentai: BoolFieldUpdateOperationsInput
  chapterbookmarks: ChapterBookmarkUpdateManyWithoutUsersInput
  comicbookmarks: ComicBookmarkUpdateManyWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  reports: ReportUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  allowHentai: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutChapterbookmarksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutChapterbookmarksInput
  create: UserUncheckedCreateWithoutChapterbookmarksInput
  update: UserUncheckedUpdateWithoutChapterbookmarksInput
  upsert: UserUpsertWithoutChapterbookmarksInput
}

input UserUpdateOneRequiredWithoutComicbookmarksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutComicbookmarksInput
  create: UserUncheckedCreateWithoutComicbookmarksInput
  update: UserUncheckedUpdateWithoutComicbookmarksInput
  upsert: UserUpsertWithoutComicbookmarksInput
}

input UserUpdateOneWithoutReportsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReportsInput
  create: UserUncheckedCreateWithoutReportsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUncheckedUpdateWithoutReportsInput
  upsert: UserUpsertWithoutReportsInput
}

input UserUpdateWithoutChapterbookmarksInput {
  allowHentai: BoolFieldUpdateOperationsInput
  comicbookmarks: ComicBookmarkUpdateManyWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  reports: ReportUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutComicbookmarksInput {
  allowHentai: BoolFieldUpdateOperationsInput
  chapterbookmarks: ChapterBookmarkUpdateManyWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  reports: ReportUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutReportsInput {
  allowHentai: BoolFieldUpdateOperationsInput
  chapterbookmarks: ChapterBookmarkUpdateManyWithoutUsersInput
  comicbookmarks: ComicBookmarkUpdateManyWithoutUsersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutChapterbookmarksInput {
  create: UserUncheckedCreateWithoutChapterbookmarksInput!
  update: UserUncheckedUpdateWithoutChapterbookmarksInput!
}

input UserUpsertWithoutComicbookmarksInput {
  create: UserUncheckedCreateWithoutComicbookmarksInput!
  update: UserUncheckedUpdateWithoutComicbookmarksInput!
}

input UserUpsertWithoutReportsInput {
  create: UserUncheckedCreateWithoutReportsInput!
  update: UserUncheckedUpdateWithoutReportsInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  allowHentai: BoolFilter
  chapterbookmarks: ChapterBookmarkListRelationFilter
  comicbookmarks: ComicBookmarkListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  isAdmin: BoolFilter
  name: StringNullableFilter
  reports: ReportListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}