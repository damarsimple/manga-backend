### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Ads {
  createdAt: DateTime!
  id: Int!
  index: Int!
  name: String!
  position: AdsPosition!
  updatedAt: DateTime!
  url: String!
}

type AdsAvgAggregateOutputType {
  id: Float
  index: Float
}

input AdsAvgOrderByAggregateInput {
  id: SortOrder
  index: SortOrder
}

type AdsCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  index: Int!
  name: Int!
  position: Int!
  updatedAt: Int!
  url: Int!
}

input AdsCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  index: SortOrder
  name: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input AdsCreateInput {
  createdAt: DateTime
  index: Int
  name: String!
  position: AdsPosition
  updatedAt: DateTime
  url: String!
}

input AdsCreateManyInput {
  createdAt: DateTime
  id: Int
  index: Int
  name: String!
  position: AdsPosition
  updatedAt: DateTime
  url: String!
}

type AdsMaxAggregateOutputType {
  createdAt: DateTime
  id: Int
  index: Int
  name: String
  position: AdsPosition
  updatedAt: DateTime
  url: String
}

input AdsMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  index: SortOrder
  name: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

type AdsMinAggregateOutputType {
  createdAt: DateTime
  id: Int
  index: Int
  name: String
  position: AdsPosition
  updatedAt: DateTime
  url: String
}

input AdsMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  index: SortOrder
  name: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input AdsOrderByWithAggregationInput {
  _avg: AdsAvgOrderByAggregateInput
  _count: AdsCountOrderByAggregateInput
  _max: AdsMaxOrderByAggregateInput
  _min: AdsMinOrderByAggregateInput
  _sum: AdsSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  index: SortOrder
  name: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

input AdsOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  index: SortOrder
  name: SortOrder
  position: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

enum AdsPosition {
  BOTTOM
  TOP
}

enum AdsScalarFieldEnum {
  createdAt
  id
  index
  name
  position
  updatedAt
  url
}

input AdsScalarWhereWithAggregatesInput {
  AND: [AdsScalarWhereWithAggregatesInput]
  NOT: [AdsScalarWhereWithAggregatesInput]
  OR: [AdsScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  index: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  position: EnumAdsPositionWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  url: StringWithAggregatesFilter
}

type AdsSumAggregateOutputType {
  id: Int
  index: Int
}

input AdsSumOrderByAggregateInput {
  id: SortOrder
  index: SortOrder
}

input AdsUncheckedCreateInput {
  createdAt: DateTime
  id: Int
  index: Int
  name: String!
  position: AdsPosition
  updatedAt: DateTime
  url: String!
}

input AdsUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  index: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: EnumAdsPositionFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input AdsUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  index: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: EnumAdsPositionFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input AdsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  index: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: EnumAdsPositionFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input AdsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  index: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: EnumAdsPositionFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input AdsWhereInput {
  AND: [AdsWhereInput]
  NOT: [AdsWhereInput]
  OR: [AdsWhereInput]
  createdAt: DateTimeFilter
  id: IntFilter
  index: IntFilter
  name: StringFilter
  position: EnumAdsPositionFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input AdsWhereUniqueInput {
  id: Int
  name: String
}

type AggregateAds {
  _avg: AdsAvgAggregateOutputType
  _count: AdsCountAggregateOutputType
  _max: AdsMaxAggregateOutputType
  _min: AdsMinAggregateOutputType
  _sum: AdsSumAggregateOutputType
}

type AggregateAuthor {
  _avg: AuthorAvgAggregateOutputType
  _count: AuthorCountAggregateOutputType
  _max: AuthorMaxAggregateOutputType
  _min: AuthorMinAggregateOutputType
  _sum: AuthorSumAggregateOutputType
}

type AggregateChapter {
  _avg: ChapterAvgAggregateOutputType
  _count: ChapterCountAggregateOutputType
  _max: ChapterMaxAggregateOutputType
  _min: ChapterMinAggregateOutputType
  _sum: ChapterSumAggregateOutputType
}

type AggregateComic {
  _avg: ComicAvgAggregateOutputType
  _count: ComicCountAggregateOutputType
  _max: ComicMaxAggregateOutputType
  _min: ComicMinAggregateOutputType
  _sum: ComicSumAggregateOutputType
}

type AggregateGenre {
  _avg: GenreAvgAggregateOutputType
  _count: GenreCountAggregateOutputType
  _max: GenreMaxAggregateOutputType
  _min: GenreMinAggregateOutputType
  _sum: GenreSumAggregateOutputType
}

type AggregateUser {
  _avg: UserAvgAggregateOutputType
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
  _sum: UserSumAggregateOutputType
}

type Author {
  _count: AuthorCountOutputType!
  comics(cursor: ComicWhereUniqueInput, distinct: ComicScalarFieldEnum, orderBy: ComicOrderByWithRelationInput, skip: Int, take: Int, where: ComicWhereInput): [Comic!]!
  createdAt: DateTime!
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime!
}

type AuthorAvgAggregateOutputType {
  id: Float
}

input AuthorAvgOrderByAggregateInput {
  id: SortOrder
}

type AuthorCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input AuthorCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type AuthorCountOutputType {
  comics: Int!
}

input AuthorCreateInput {
  comics: ComicCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  name: String!
  slug: String!
  updatedAt: DateTime
}

input AuthorCreateManyInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input AuthorCreateNestedOneWithoutComicsInput {
  connect: AuthorWhereUniqueInput
  connectOrCreate: AuthorCreateOrConnectWithoutComicsInput
  create: AuthorUncheckedCreateWithoutComicsInput
}

input AuthorCreateOrConnectWithoutComicsInput {
  create: AuthorUncheckedCreateWithoutComicsInput!
  where: AuthorWhereUniqueInput!
}

input AuthorCreateWithoutComicsInput {
  createdAt: DateTime
  name: String!
  slug: String!
  updatedAt: DateTime
}

type AuthorMaxAggregateOutputType {
  createdAt: DateTime
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input AuthorMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type AuthorMinAggregateOutputType {
  createdAt: DateTime
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input AuthorMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input AuthorOrderByWithAggregationInput {
  _avg: AuthorAvgOrderByAggregateInput
  _count: AuthorCountOrderByAggregateInput
  _max: AuthorMaxOrderByAggregateInput
  _min: AuthorMinOrderByAggregateInput
  _sum: AuthorSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input AuthorOrderByWithRelationInput {
  comics: ComicOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input AuthorRelationFilter {
  is: AuthorWhereInput
  isNot: AuthorWhereInput
}

enum AuthorScalarFieldEnum {
  createdAt
  id
  name
  slug
  updatedAt
}

input AuthorScalarWhereWithAggregatesInput {
  AND: [AuthorScalarWhereWithAggregatesInput]
  NOT: [AuthorScalarWhereWithAggregatesInput]
  OR: [AuthorScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AuthorSumAggregateOutputType {
  id: Int
}

input AuthorSumOrderByAggregateInput {
  id: SortOrder
}

input AuthorUncheckedCreateInput {
  comics: ComicUncheckedCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input AuthorUncheckedCreateWithoutComicsInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input AuthorUncheckedUpdateInput {
  comics: ComicUncheckedUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUncheckedUpdateWithoutComicsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpdateInput {
  comics: ComicUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpdateOneRequiredWithoutComicsInput {
  connect: AuthorWhereUniqueInput
  connectOrCreate: AuthorCreateOrConnectWithoutComicsInput
  create: AuthorUncheckedCreateWithoutComicsInput
  update: AuthorUncheckedUpdateWithoutComicsInput
  upsert: AuthorUpsertWithoutComicsInput
}

input AuthorUpdateWithoutComicsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpsertWithoutComicsInput {
  create: AuthorUncheckedCreateWithoutComicsInput!
  update: AuthorUncheckedUpdateWithoutComicsInput!
}

input AuthorWhereInput {
  AND: [AuthorWhereInput]
  NOT: [AuthorWhereInput]
  OR: [AuthorWhereInput]
  comics: ComicListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input AuthorWhereUniqueInput {
  id: Int
  name: String
  slug: String
}

type BatchPayload {
  count: Int!
}

"""BigInt custom scalar type"""
scalar BigInt

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Chapter {
  comic: Comic!
  comicId: Int!
  createdAt: DateTime!
  id: Int!
  imageCount: Int!
  imageDetails: Json
  imageUrls: [String!]!
  name: Float!
  originalImageCount: Int!
  processed: Boolean!
  quality: ChapterQuality!
  title: String
  updatedAt: DateTime!
  views: Int!
}

type ChapterAvgAggregateOutputType {
  comicId: Float
  id: Float
  imageCount: Float
  name: Float
  originalImageCount: Float
  views: Float
}

input ChapterAvgOrderByAggregateInput {
  comicId: SortOrder
  id: SortOrder
  imageCount: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  views: SortOrder
}

type ChapterCountAggregateOutputType {
  _all: Int!
  comicId: Int!
  createdAt: Int!
  id: Int!
  imageCount: Int!
  imageDetails: Int!
  imageUrls: Int!
  name: Int!
  originalImageCount: Int!
  processed: Int!
  quality: Int!
  title: Int!
  updatedAt: Int!
  views: Int!
}

input ChapterCountOrderByAggregateInput {
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageCount: SortOrder
  imageDetails: SortOrder
  imageUrls: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  processed: SortOrder
  quality: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

input ChapterCreateInput {
  comic: ComicCreateNestedOneWithoutChaptersInput!
  createdAt: DateTime
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterCreateManyComicInput {
  createdAt: DateTime
  id: Int
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterCreateManyComicInputEnvelope {
  data: ChapterCreateManyComicInput!
  skipDuplicates: Boolean
}

input ChapterCreateManyInput {
  comicId: Int!
  createdAt: DateTime
  id: Int
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterCreateManyimageUrlsInput {
  set: String!
}

input ChapterCreateNestedManyWithoutComicInput {
  connect: [ChapterWhereUniqueInput]
  connectOrCreate: [ChapterCreateOrConnectWithoutComicInput]
  create: [ChapterCreateWithoutComicInput]
  createMany: ChapterCreateManyComicInputEnvelope
}

input ChapterCreateOrConnectWithoutComicInput {
  create: ChapterUncheckedCreateWithoutComicInput!
  where: ChapterWhereUniqueInput!
}

input ChapterCreateWithoutComicInput {
  createdAt: DateTime
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterCreateimageUrlsInput {
  set: String!
}

input ChapterListRelationFilter {
  every: ChapterWhereInput
  none: ChapterWhereInput
  some: ChapterWhereInput
}

type ChapterMaxAggregateOutputType {
  comicId: Int
  createdAt: DateTime
  id: Int
  imageCount: Int
  name: Float
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterMaxOrderByAggregateInput {
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageCount: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  processed: SortOrder
  quality: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

type ChapterMinAggregateOutputType {
  comicId: Int
  createdAt: DateTime
  id: Int
  imageCount: Int
  name: Float
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterMinOrderByAggregateInput {
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageCount: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  processed: SortOrder
  quality: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

input ChapterOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChapterOrderByWithAggregationInput {
  _avg: ChapterAvgOrderByAggregateInput
  _count: ChapterCountOrderByAggregateInput
  _max: ChapterMaxOrderByAggregateInput
  _min: ChapterMinOrderByAggregateInput
  _sum: ChapterSumOrderByAggregateInput
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageCount: SortOrder
  imageDetails: SortOrder
  imageUrls: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  processed: SortOrder
  quality: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

input ChapterOrderByWithRelationInput {
  comic: ComicOrderByWithRelationInput
  comicId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  imageCount: SortOrder
  imageDetails: SortOrder
  imageUrls: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  processed: SortOrder
  quality: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  views: SortOrder
}

enum ChapterQuality {
  HQ
  LQ
  NORMAL
}

enum ChapterScalarFieldEnum {
  comicId
  createdAt
  id
  imageCount
  imageDetails
  imageUrls
  name
  originalImageCount
  processed
  quality
  title
  updatedAt
  views
}

input ChapterScalarWhereInput {
  AND: [ChapterScalarWhereInput]
  NOT: [ChapterScalarWhereInput]
  OR: [ChapterScalarWhereInput]
  comicId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  imageCount: IntFilter
  imageDetails: JsonNullableFilter
  imageUrls: StringNullableListFilter
  name: FloatFilter
  originalImageCount: IntFilter
  processed: BoolFilter
  quality: EnumChapterQualityFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
  views: IntFilter
}

input ChapterScalarWhereWithAggregatesInput {
  AND: [ChapterScalarWhereWithAggregatesInput]
  NOT: [ChapterScalarWhereWithAggregatesInput]
  OR: [ChapterScalarWhereWithAggregatesInput]
  comicId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  imageCount: IntWithAggregatesFilter
  imageDetails: JsonNullableWithAggregatesFilter
  imageUrls: StringNullableListFilter
  name: FloatWithAggregatesFilter
  originalImageCount: IntWithAggregatesFilter
  processed: BoolWithAggregatesFilter
  quality: EnumChapterQualityWithAggregatesFilter
  title: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  views: IntWithAggregatesFilter
}

type ChapterSumAggregateOutputType {
  comicId: Int
  id: Int
  imageCount: Int
  name: Float
  originalImageCount: Int
  views: Int
}

input ChapterSumOrderByAggregateInput {
  comicId: SortOrder
  id: SortOrder
  imageCount: SortOrder
  name: SortOrder
  originalImageCount: SortOrder
  views: SortOrder
}

input ChapterUncheckedCreateInput {
  comicId: Int!
  createdAt: DateTime
  id: Int
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterUncheckedCreateNestedManyWithoutComicInput {
  connect: [ChapterWhereUniqueInput]
  connectOrCreate: [ChapterCreateOrConnectWithoutComicInput]
  create: [ChapterCreateWithoutComicInput]
  createMany: ChapterCreateManyComicInputEnvelope
}

input ChapterUncheckedCreateWithoutComicInput {
  createdAt: DateTime
  id: Int
  imageCount: Int
  imageDetails: Json
  imageUrls: [String]
  name: Float!
  originalImageCount: Int
  processed: Boolean
  quality: ChapterQuality
  title: String
  updatedAt: DateTime
  views: Int
}

input ChapterUncheckedUpdateInput {
  comicId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUncheckedUpdateManyInput {
  comicId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUncheckedUpdateManyWithoutChaptersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUncheckedUpdateManyWithoutComicInput {
  connect: [ChapterWhereUniqueInput]
  connectOrCreate: [ChapterCreateOrConnectWithoutComicInput]
  create: [ChapterCreateWithoutComicInput]
  createMany: ChapterCreateManyComicInputEnvelope
  delete: [ChapterWhereUniqueInput]
  deleteMany: [ChapterScalarWhereInput]
  disconnect: [ChapterWhereUniqueInput]
  set: [ChapterWhereUniqueInput]
  update: [ChapterUpdateWithWhereUniqueWithoutComicInput]
  updateMany: [ChapterUpdateManyWithWhereWithoutComicInput]
  upsert: [ChapterUpsertWithWhereUniqueWithoutComicInput]
}

input ChapterUncheckedUpdateWithoutComicInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUpdateInput {
  comic: ComicUpdateOneRequiredWithoutChaptersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUpdateManyWithWhereWithoutComicInput {
  data: ChapterUncheckedUpdateManyWithoutChaptersInput!
  where: ChapterScalarWhereInput!
}

input ChapterUpdateManyWithoutComicInput {
  connect: [ChapterWhereUniqueInput]
  connectOrCreate: [ChapterCreateOrConnectWithoutComicInput]
  create: [ChapterCreateWithoutComicInput]
  createMany: ChapterCreateManyComicInputEnvelope
  delete: [ChapterWhereUniqueInput]
  deleteMany: [ChapterScalarWhereInput]
  disconnect: [ChapterWhereUniqueInput]
  set: [ChapterWhereUniqueInput]
  update: [ChapterUpdateWithWhereUniqueWithoutComicInput]
  updateMany: [ChapterUpdateManyWithWhereWithoutComicInput]
  upsert: [ChapterUpsertWithWhereUniqueWithoutComicInput]
}

input ChapterUpdateWithWhereUniqueWithoutComicInput {
  data: ChapterUncheckedUpdateWithoutComicInput!
  where: ChapterWhereUniqueInput!
}

input ChapterUpdateWithoutComicInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  imageCount: IntFieldUpdateOperationsInput
  imageDetails: Json
  imageUrls: [String]
  name: FloatFieldUpdateOperationsInput
  originalImageCount: IntFieldUpdateOperationsInput
  processed: BoolFieldUpdateOperationsInput
  quality: EnumChapterQualityFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
}

input ChapterUpdateimageUrlsInput {
  push: [String]
  set: [String]
}

input ChapterUpsertWithWhereUniqueWithoutComicInput {
  create: ChapterUncheckedCreateWithoutComicInput!
  update: ChapterUncheckedUpdateWithoutComicInput!
  where: ChapterWhereUniqueInput!
}

input ChapterWhereInput {
  AND: [ChapterWhereInput]
  NOT: [ChapterWhereInput]
  OR: [ChapterWhereInput]
  comic: ComicWhereInput
  comicId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  imageCount: IntFilter
  imageDetails: JsonNullableFilter
  imageUrls: StringNullableListFilter
  name: FloatFilter
  originalImageCount: IntFilter
  processed: BoolFilter
  quality: EnumChapterQualityFilter
  title: StringNullableFilter
  updatedAt: DateTimeFilter
  views: IntFilter
}

input ChapterWhereUniqueInput {
  id: Int
}

type Comic {
  _count: ComicCountOutputType!
  age: String
  altName: Json
  author: Author!
  authorId: Int!
  chapters(cursor: ChapterWhereUniqueInput, distinct: ChapterScalarFieldEnum, orderBy: ChapterOrderByWithRelationInput, skip: Int, take: Int, where: ChapterWhereInput): [Chapter!]!
  concept: String
  createdAt: DateTime!
  description: String
  genres(cursor: GenreWhereUniqueInput, distinct: GenreScalarFieldEnum, orderBy: GenreOrderByWithRelationInput, skip: Int, take: Int, where: GenreWhereInput): [Genre!]!
  id: Int!
  isHentai: Boolean!
  lastChapterUpdateAt: DateTime!
  name: String!
  rating: Float!
  released: DateTime!
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime!
  views: Int!
  viewsWeek: Int!
}

type ComicAvgAggregateOutputType {
  authorId: Float
  id: Float
  rating: Float
  views: Float
  viewsWeek: Float
}

input ComicAvgOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  rating: SortOrder
  views: SortOrder
  viewsWeek: SortOrder
}

type ComicCountAggregateOutputType {
  _all: Int!
  age: Int!
  altName: Int!
  authorId: Int!
  concept: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  isHentai: Int!
  lastChapterUpdateAt: Int!
  name: Int!
  rating: Int!
  released: Int!
  slug: Int!
  status: Int!
  thumb: Int!
  thumbWide: Int!
  type: Int!
  updatedAt: Int!
  views: Int!
  viewsWeek: Int!
}

input ComicCountOrderByAggregateInput {
  age: SortOrder
  altName: SortOrder
  authorId: SortOrder
  concept: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isHentai: SortOrder
  lastChapterUpdateAt: SortOrder
  name: SortOrder
  rating: SortOrder
  released: SortOrder
  slug: SortOrder
  status: SortOrder
  thumb: SortOrder
  thumbWide: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  views: SortOrder
  viewsWeek: SortOrder
}

type ComicCountOutputType {
  chapters: Int!
  genres: Int!
}

input ComicCreateInput {
  age: String
  altName: Json
  author: AuthorCreateNestedOneWithoutComicsInput!
  chapters: ChapterCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  genres: GenreCreateNestedManyWithoutComicsInput
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicCreateManyAuthorInput {
  age: String
  altName: Json
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicCreateManyAuthorInputEnvelope {
  data: ComicCreateManyAuthorInput!
  skipDuplicates: Boolean
}

input ComicCreateManyInput {
  age: String
  altName: Json
  authorId: Int!
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicCreateNestedManyWithoutAuthorInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutAuthorInput]
  create: [ComicCreateWithoutAuthorInput]
  createMany: ComicCreateManyAuthorInputEnvelope
}

input ComicCreateNestedManyWithoutGenresInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutGenresInput]
  create: [ComicCreateWithoutGenresInput]
}

input ComicCreateNestedOneWithoutChaptersInput {
  connect: ComicWhereUniqueInput
  connectOrCreate: ComicCreateOrConnectWithoutChaptersInput
  create: ComicUncheckedCreateWithoutChaptersInput
}

input ComicCreateOrConnectWithoutAuthorInput {
  create: ComicUncheckedCreateWithoutAuthorInput!
  where: ComicWhereUniqueInput!
}

input ComicCreateOrConnectWithoutChaptersInput {
  create: ComicUncheckedCreateWithoutChaptersInput!
  where: ComicWhereUniqueInput!
}

input ComicCreateOrConnectWithoutGenresInput {
  create: ComicUncheckedCreateWithoutGenresInput!
  where: ComicWhereUniqueInput!
}

input ComicCreateWithoutAuthorInput {
  age: String
  altName: Json
  chapters: ChapterCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  genres: GenreCreateNestedManyWithoutComicsInput
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicCreateWithoutChaptersInput {
  age: String
  altName: Json
  author: AuthorCreateNestedOneWithoutComicsInput!
  concept: String
  createdAt: DateTime
  description: String
  genres: GenreCreateNestedManyWithoutComicsInput
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicCreateWithoutGenresInput {
  age: String
  altName: Json
  author: AuthorCreateNestedOneWithoutComicsInput!
  chapters: ChapterCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicListRelationFilter {
  every: ComicWhereInput
  none: ComicWhereInput
  some: ComicWhereInput
}

type ComicMaxAggregateOutputType {
  age: String
  authorId: Int
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String
  rating: Float
  released: DateTime
  slug: String
  status: String
  thumb: String
  thumbWide: String
  type: String
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicMaxOrderByAggregateInput {
  age: SortOrder
  authorId: SortOrder
  concept: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isHentai: SortOrder
  lastChapterUpdateAt: SortOrder
  name: SortOrder
  rating: SortOrder
  released: SortOrder
  slug: SortOrder
  status: SortOrder
  thumb: SortOrder
  thumbWide: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  views: SortOrder
  viewsWeek: SortOrder
}

type ComicMinAggregateOutputType {
  age: String
  authorId: Int
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String
  rating: Float
  released: DateTime
  slug: String
  status: String
  thumb: String
  thumbWide: String
  type: String
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicMinOrderByAggregateInput {
  age: SortOrder
  authorId: SortOrder
  concept: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isHentai: SortOrder
  lastChapterUpdateAt: SortOrder
  name: SortOrder
  rating: SortOrder
  released: SortOrder
  slug: SortOrder
  status: SortOrder
  thumb: SortOrder
  thumbWide: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  views: SortOrder
  viewsWeek: SortOrder
}

input ComicOrderByRelationAggregateInput {
  _count: SortOrder
}

input ComicOrderByWithAggregationInput {
  _avg: ComicAvgOrderByAggregateInput
  _count: ComicCountOrderByAggregateInput
  _max: ComicMaxOrderByAggregateInput
  _min: ComicMinOrderByAggregateInput
  _sum: ComicSumOrderByAggregateInput
  age: SortOrder
  altName: SortOrder
  authorId: SortOrder
  concept: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  isHentai: SortOrder
  lastChapterUpdateAt: SortOrder
  name: SortOrder
  rating: SortOrder
  released: SortOrder
  slug: SortOrder
  status: SortOrder
  thumb: SortOrder
  thumbWide: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  views: SortOrder
  viewsWeek: SortOrder
}

input ComicOrderByWithRelationInput {
  age: SortOrder
  altName: SortOrder
  author: AuthorOrderByWithRelationInput
  authorId: SortOrder
  chapters: ChapterOrderByRelationAggregateInput
  concept: SortOrder
  createdAt: SortOrder
  description: SortOrder
  genres: GenreOrderByRelationAggregateInput
  id: SortOrder
  isHentai: SortOrder
  lastChapterUpdateAt: SortOrder
  name: SortOrder
  rating: SortOrder
  released: SortOrder
  slug: SortOrder
  status: SortOrder
  thumb: SortOrder
  thumbWide: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  views: SortOrder
  viewsWeek: SortOrder
}

input ComicRelationFilter {
  is: ComicWhereInput
  isNot: ComicWhereInput
}

enum ComicScalarFieldEnum {
  age
  altName
  authorId
  concept
  createdAt
  description
  id
  isHentai
  lastChapterUpdateAt
  name
  rating
  released
  slug
  status
  thumb
  thumbWide
  type
  updatedAt
  views
  viewsWeek
}

input ComicScalarWhereInput {
  AND: [ComicScalarWhereInput]
  NOT: [ComicScalarWhereInput]
  OR: [ComicScalarWhereInput]
  age: StringNullableFilter
  altName: JsonNullableFilter
  authorId: IntFilter
  concept: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  isHentai: BoolFilter
  lastChapterUpdateAt: DateTimeFilter
  name: StringFilter
  rating: FloatFilter
  released: DateTimeFilter
  slug: StringFilter
  status: StringNullableFilter
  thumb: StringFilter
  thumbWide: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  views: IntFilter
  viewsWeek: IntFilter
}

input ComicScalarWhereWithAggregatesInput {
  AND: [ComicScalarWhereWithAggregatesInput]
  NOT: [ComicScalarWhereWithAggregatesInput]
  OR: [ComicScalarWhereWithAggregatesInput]
  age: StringNullableWithAggregatesFilter
  altName: JsonNullableWithAggregatesFilter
  authorId: IntWithAggregatesFilter
  concept: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  isHentai: BoolWithAggregatesFilter
  lastChapterUpdateAt: DateTimeWithAggregatesFilter
  name: StringWithAggregatesFilter
  rating: FloatWithAggregatesFilter
  released: DateTimeWithAggregatesFilter
  slug: StringWithAggregatesFilter
  status: StringNullableWithAggregatesFilter
  thumb: StringWithAggregatesFilter
  thumbWide: StringNullableWithAggregatesFilter
  type: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  views: IntWithAggregatesFilter
  viewsWeek: IntWithAggregatesFilter
}

type ComicSumAggregateOutputType {
  authorId: Int
  id: Int
  rating: Float
  views: Int
  viewsWeek: Int
}

input ComicSumOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  rating: SortOrder
  views: SortOrder
  viewsWeek: SortOrder
}

input ComicUncheckedCreateInput {
  age: String
  altName: Json
  authorId: Int!
  chapters: ChapterUncheckedCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicUncheckedCreateNestedManyWithoutAuthorInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutAuthorInput]
  create: [ComicCreateWithoutAuthorInput]
  createMany: ComicCreateManyAuthorInputEnvelope
}

input ComicUncheckedCreateWithoutAuthorInput {
  age: String
  altName: Json
  chapters: ChapterUncheckedCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicUncheckedCreateWithoutChaptersInput {
  age: String
  altName: Json
  authorId: Int!
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicUncheckedCreateWithoutGenresInput {
  age: String
  altName: Json
  authorId: Int!
  chapters: ChapterUncheckedCreateNestedManyWithoutComicInput
  concept: String
  createdAt: DateTime
  description: String
  id: Int
  isHentai: Boolean
  lastChapterUpdateAt: DateTime
  name: String!
  rating: Float
  released: DateTime
  slug: String!
  status: String
  thumb: String!
  thumbWide: String
  type: String!
  updatedAt: DateTime
  views: Int
  viewsWeek: Int
}

input ComicUncheckedUpdateInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  authorId: IntFieldUpdateOperationsInput
  chapters: ChapterUncheckedUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateManyInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  authorId: IntFieldUpdateOperationsInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateManyWithoutAuthorInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutAuthorInput]
  create: [ComicCreateWithoutAuthorInput]
  createMany: ComicCreateManyAuthorInputEnvelope
  delete: [ComicWhereUniqueInput]
  deleteMany: [ComicScalarWhereInput]
  disconnect: [ComicWhereUniqueInput]
  set: [ComicWhereUniqueInput]
  update: [ComicUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [ComicUpdateManyWithWhereWithoutAuthorInput]
  upsert: [ComicUpsertWithWhereUniqueWithoutAuthorInput]
}

input ComicUncheckedUpdateManyWithoutComicsInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateWithoutAuthorInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  chapters: ChapterUncheckedUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateWithoutChaptersInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  authorId: IntFieldUpdateOperationsInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUncheckedUpdateWithoutGenresInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  authorId: IntFieldUpdateOperationsInput
  chapters: ChapterUncheckedUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  author: AuthorUpdateOneRequiredWithoutComicsInput
  chapters: ChapterUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutComicsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateManyMutationInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateManyWithWhereWithoutAuthorInput {
  data: ComicUncheckedUpdateManyWithoutComicsInput!
  where: ComicScalarWhereInput!
}

input ComicUpdateManyWithWhereWithoutGenresInput {
  data: ComicUncheckedUpdateManyWithoutComicsInput!
  where: ComicScalarWhereInput!
}

input ComicUpdateManyWithoutAuthorInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutAuthorInput]
  create: [ComicCreateWithoutAuthorInput]
  createMany: ComicCreateManyAuthorInputEnvelope
  delete: [ComicWhereUniqueInput]
  deleteMany: [ComicScalarWhereInput]
  disconnect: [ComicWhereUniqueInput]
  set: [ComicWhereUniqueInput]
  update: [ComicUpdateWithWhereUniqueWithoutAuthorInput]
  updateMany: [ComicUpdateManyWithWhereWithoutAuthorInput]
  upsert: [ComicUpsertWithWhereUniqueWithoutAuthorInput]
}

input ComicUpdateManyWithoutGenresInput {
  connect: [ComicWhereUniqueInput]
  connectOrCreate: [ComicCreateOrConnectWithoutGenresInput]
  create: [ComicCreateWithoutGenresInput]
  delete: [ComicWhereUniqueInput]
  deleteMany: [ComicScalarWhereInput]
  disconnect: [ComicWhereUniqueInput]
  set: [ComicWhereUniqueInput]
  update: [ComicUpdateWithWhereUniqueWithoutGenresInput]
  updateMany: [ComicUpdateManyWithWhereWithoutGenresInput]
  upsert: [ComicUpsertWithWhereUniqueWithoutGenresInput]
}

input ComicUpdateOneRequiredWithoutChaptersInput {
  connect: ComicWhereUniqueInput
  connectOrCreate: ComicCreateOrConnectWithoutChaptersInput
  create: ComicUncheckedCreateWithoutChaptersInput
  update: ComicUncheckedUpdateWithoutChaptersInput
  upsert: ComicUpsertWithoutChaptersInput
}

input ComicUpdateWithWhereUniqueWithoutAuthorInput {
  data: ComicUncheckedUpdateWithoutAuthorInput!
  where: ComicWhereUniqueInput!
}

input ComicUpdateWithWhereUniqueWithoutGenresInput {
  data: ComicUncheckedUpdateWithoutGenresInput!
  where: ComicWhereUniqueInput!
}

input ComicUpdateWithoutAuthorInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  chapters: ChapterUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutComicsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateWithoutChaptersInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  author: AuthorUpdateOneRequiredWithoutComicsInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  genres: GenreUpdateManyWithoutComicsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpdateWithoutGenresInput {
  age: NullableStringFieldUpdateOperationsInput
  altName: Json
  author: AuthorUpdateOneRequiredWithoutComicsInput
  chapters: ChapterUpdateManyWithoutComicInput
  concept: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  isHentai: BoolFieldUpdateOperationsInput
  lastChapterUpdateAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  released: DateTimeFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  thumb: StringFieldUpdateOperationsInput
  thumbWide: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  views: IntFieldUpdateOperationsInput
  viewsWeek: IntFieldUpdateOperationsInput
}

input ComicUpsertWithWhereUniqueWithoutAuthorInput {
  create: ComicUncheckedCreateWithoutAuthorInput!
  update: ComicUncheckedUpdateWithoutAuthorInput!
  where: ComicWhereUniqueInput!
}

input ComicUpsertWithWhereUniqueWithoutGenresInput {
  create: ComicUncheckedCreateWithoutGenresInput!
  update: ComicUncheckedUpdateWithoutGenresInput!
  where: ComicWhereUniqueInput!
}

input ComicUpsertWithoutChaptersInput {
  create: ComicUncheckedCreateWithoutChaptersInput!
  update: ComicUncheckedUpdateWithoutChaptersInput!
}

input ComicWhereInput {
  AND: [ComicWhereInput]
  NOT: [ComicWhereInput]
  OR: [ComicWhereInput]
  age: StringNullableFilter
  altName: JsonNullableFilter
  author: AuthorWhereInput
  authorId: IntFilter
  chapters: ChapterListRelationFilter
  concept: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  genres: GenreListRelationFilter
  id: IntFilter
  isHentai: BoolFilter
  lastChapterUpdateAt: DateTimeFilter
  name: StringFilter
  rating: FloatFilter
  released: DateTimeFilter
  slug: StringFilter
  status: StringNullableFilter
  thumb: StringFilter
  thumbWide: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  views: IntFilter
  viewsWeek: IntFilter
}

input ComicWhereUniqueInput {
  id: Int
  name: String
  slug: String
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""Decimal custom scalar type"""
scalar Decimal

input EnumAdsPositionFieldUpdateOperationsInput {
  set: AdsPosition
}

input EnumAdsPositionFilter {
  equals: AdsPosition
  in: [AdsPosition]
  not: NestedEnumAdsPositionFilter
  notIn: [AdsPosition]
}

input EnumAdsPositionWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumAdsPositionFilter
  _min: NestedEnumAdsPositionFilter
  equals: AdsPosition
  in: [AdsPosition]
  not: NestedEnumAdsPositionWithAggregatesFilter
  notIn: [AdsPosition]
}

input EnumChapterQualityFieldUpdateOperationsInput {
  set: ChapterQuality
}

input EnumChapterQualityFilter {
  equals: ChapterQuality
  in: [ChapterQuality]
  not: NestedEnumChapterQualityFilter
  notIn: [ChapterQuality]
}

input EnumChapterQualityWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumChapterQualityFilter
  _min: NestedEnumChapterQualityFilter
  equals: ChapterQuality
  in: [ChapterQuality]
  not: NestedEnumChapterQualityWithAggregatesFilter
  notIn: [ChapterQuality]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float]
}

type Genre {
  _count: GenreCountOutputType!
  comics(cursor: ComicWhereUniqueInput, distinct: ComicScalarFieldEnum, orderBy: ComicOrderByWithRelationInput, skip: Int, take: Int, where: ComicWhereInput): [Comic!]!
  createdAt: DateTime!
  id: Int!
  name: String!
  slug: String!
  updatedAt: DateTime!
}

type GenreAvgAggregateOutputType {
  id: Float
}

input GenreAvgOrderByAggregateInput {
  id: SortOrder
}

type GenreCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  slug: Int!
  updatedAt: Int!
}

input GenreCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type GenreCountOutputType {
  comics: Int!
}

input GenreCreateInput {
  comics: ComicCreateNestedManyWithoutGenresInput
  createdAt: DateTime
  name: String!
  slug: String!
  updatedAt: DateTime
}

input GenreCreateManyInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input GenreCreateNestedManyWithoutComicsInput {
  connect: [GenreWhereUniqueInput]
  connectOrCreate: [GenreCreateOrConnectWithoutComicsInput]
  create: [GenreCreateWithoutComicsInput]
}

input GenreCreateOrConnectWithoutComicsInput {
  create: GenreUncheckedCreateWithoutComicsInput!
  where: GenreWhereUniqueInput!
}

input GenreCreateWithoutComicsInput {
  createdAt: DateTime
  name: String!
  slug: String!
  updatedAt: DateTime
}

input GenreListRelationFilter {
  every: GenreWhereInput
  none: GenreWhereInput
  some: GenreWhereInput
}

type GenreMaxAggregateOutputType {
  createdAt: DateTime
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input GenreMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

type GenreMinAggregateOutputType {
  createdAt: DateTime
  id: Int
  name: String
  slug: String
  updatedAt: DateTime
}

input GenreMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input GenreOrderByRelationAggregateInput {
  _count: SortOrder
}

input GenreOrderByWithAggregationInput {
  _avg: GenreAvgOrderByAggregateInput
  _count: GenreCountOrderByAggregateInput
  _max: GenreMaxOrderByAggregateInput
  _min: GenreMinOrderByAggregateInput
  _sum: GenreSumOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

input GenreOrderByWithRelationInput {
  comics: ComicOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  updatedAt: SortOrder
}

enum GenreScalarFieldEnum {
  createdAt
  id
  name
  slug
  updatedAt
}

input GenreScalarWhereInput {
  AND: [GenreScalarWhereInput]
  NOT: [GenreScalarWhereInput]
  OR: [GenreScalarWhereInput]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input GenreScalarWhereWithAggregatesInput {
  AND: [GenreScalarWhereWithAggregatesInput]
  NOT: [GenreScalarWhereWithAggregatesInput]
  OR: [GenreScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  slug: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type GenreSumAggregateOutputType {
  id: Int
}

input GenreSumOrderByAggregateInput {
  id: SortOrder
}

input GenreUncheckedCreateInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input GenreUncheckedCreateWithoutComicsInput {
  createdAt: DateTime
  id: Int
  name: String!
  slug: String!
  updatedAt: DateTime
}

input GenreUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUncheckedUpdateManyWithoutGenresInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUncheckedUpdateWithoutComicsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateInput {
  comics: ComicUpdateManyWithoutGenresInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpdateManyWithWhereWithoutComicsInput {
  data: GenreUncheckedUpdateManyWithoutGenresInput!
  where: GenreScalarWhereInput!
}

input GenreUpdateManyWithoutComicsInput {
  connect: [GenreWhereUniqueInput]
  connectOrCreate: [GenreCreateOrConnectWithoutComicsInput]
  create: [GenreCreateWithoutComicsInput]
  delete: [GenreWhereUniqueInput]
  deleteMany: [GenreScalarWhereInput]
  disconnect: [GenreWhereUniqueInput]
  set: [GenreWhereUniqueInput]
  update: [GenreUpdateWithWhereUniqueWithoutComicsInput]
  updateMany: [GenreUpdateManyWithWhereWithoutComicsInput]
  upsert: [GenreUpsertWithWhereUniqueWithoutComicsInput]
}

input GenreUpdateWithWhereUniqueWithoutComicsInput {
  data: GenreUncheckedUpdateWithoutComicsInput!
  where: GenreWhereUniqueInput!
}

input GenreUpdateWithoutComicsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GenreUpsertWithWhereUniqueWithoutComicsInput {
  create: GenreUncheckedCreateWithoutComicsInput!
  update: GenreUncheckedUpdateWithoutComicsInput!
  where: GenreWhereUniqueInput!
}

input GenreWhereInput {
  AND: [GenreWhereInput]
  NOT: [GenreWhereInput]
  OR: [GenreWhereInput]
  comics: ComicListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input GenreWhereUniqueInput {
  id: Int
  name: String
  slug: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Json custom scalar type"""
scalar Json

enum JsonNullValueFilter {
  AnyNull
  DbNull
  JsonNull
}

input JsonNullableFilter {
  equals: Json
  not: Json
}

input JsonNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedJsonNullableFilter
  _min: NestedJsonNullableFilter
  equals: Json
  not: Json
}

type Mutation {
  createOneAds(data: AdsCreateInput!): Ads!
  createOneAuthor(data: AuthorCreateInput!): Author!
  createOneChapter(data: ChapterCreateInput!): Chapter!
  createOneComic(data: ComicCreateInput!): Comic!
  createOneGenre(data: GenreCreateInput!): Genre!
  createOneUser(data: UserCreateInput!): User!
  deleteManyAds(where: AdsWhereInput): BatchPayload!
  deleteManyAuthor(where: AuthorWhereInput): BatchPayload!
  deleteManyChapter(where: ChapterWhereInput): BatchPayload!
  deleteManyComic(where: ComicWhereInput): BatchPayload!
  deleteManyGenre(where: GenreWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneAds(where: AdsWhereUniqueInput!): Ads
  deleteOneAuthor(where: AuthorWhereUniqueInput!): Author
  deleteOneChapter(where: ChapterWhereUniqueInput!): Chapter
  deleteOneComic(where: ComicWhereUniqueInput!): Comic
  deleteOneGenre(where: GenreWhereUniqueInput!): Genre
  deleteOneUser(where: UserWhereUniqueInput!): User
  reportView(id: Int!): Boolean
  sanityCheck(author: String!, description: String, genres: [String], name: String!, released: String, thumb: String!, thumbWide: String, type: String): SanityCheck
  sanityEclipse(chapter: JSONObject, name: String!): Boolean
  updateManyAds(data: AdsUpdateManyMutationInput!, where: AdsWhereInput): BatchPayload!
  updateManyAuthor(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): BatchPayload!
  updateManyChapter(data: ChapterUpdateManyMutationInput!, where: ChapterWhereInput): BatchPayload!
  updateManyComic(data: ComicUpdateManyMutationInput!, where: ComicWhereInput): BatchPayload!
  updateManyGenre(data: GenreUpdateManyMutationInput!, where: GenreWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOneAds(data: AdsUpdateInput!, where: AdsWhereUniqueInput!): Ads!
  updateOneAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author!
  updateOneChapter(data: ChapterUpdateInput!, where: ChapterWhereUniqueInput!): Chapter!
  updateOneComic(data: ComicUpdateInput!, where: ComicWhereUniqueInput!): Comic!
  updateOneGenre(data: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneAds(create: AdsCreateInput!, update: AdsUpdateInput!, where: AdsWhereUniqueInput!): Ads!
  upsertOneAuthor(create: AuthorCreateInput!, update: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author!
  upsertOneChapter(create: ChapterCreateInput!, update: ChapterUpdateInput!, where: ChapterWhereUniqueInput!): Chapter!
  upsertOneComic(create: ComicCreateInput!, update: ComicUpdateInput!, where: ComicWhereUniqueInput!): Comic!
  upsertOneGenre(create: GenreCreateInput!, update: GenreUpdateInput!, where: GenreWhereUniqueInput!): Genre!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedEnumAdsPositionFilter {
  equals: AdsPosition
  in: [AdsPosition]
  not: NestedEnumAdsPositionFilter
  notIn: [AdsPosition]
}

input NestedEnumAdsPositionWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumAdsPositionFilter
  _min: NestedEnumAdsPositionFilter
  equals: AdsPosition
  in: [AdsPosition]
  not: NestedEnumAdsPositionWithAggregatesFilter
  notIn: [AdsPosition]
}

input NestedEnumChapterQualityFilter {
  equals: ChapterQuality
  in: [ChapterQuality]
  not: NestedEnumChapterQualityFilter
  notIn: [ChapterQuality]
}

input NestedEnumChapterQualityWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumChapterQualityFilter
  _min: NestedEnumChapterQualityFilter
  equals: ChapterQuality
  in: [ChapterQuality]
  not: NestedEnumChapterQualityWithAggregatesFilter
  notIn: [ChapterQuality]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

input NestedJsonNullableFilter {
  equals: Json
  not: Json
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

enum NullableJsonNullValueInput {
  DbNull
  JsonNull
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  aggregateAds(cursor: AdsWhereUniqueInput, orderBy: [AdsOrderByWithRelationInput], skip: Int, take: Int, where: AdsWhereInput): AggregateAds
  aggregateAuthor(cursor: AuthorWhereUniqueInput, orderBy: [AuthorOrderByWithRelationInput], skip: Int, take: Int, where: AuthorWhereInput): AggregateAuthor
  aggregateChapter(cursor: ChapterWhereUniqueInput, orderBy: [ChapterOrderByWithRelationInput], skip: Int, take: Int, where: ChapterWhereInput): AggregateChapter
  aggregateComic(cursor: ComicWhereUniqueInput, orderBy: [ComicOrderByWithRelationInput], skip: Int, take: Int, where: ComicWhereInput): AggregateComic
  aggregateGenre(cursor: GenreWhereUniqueInput, orderBy: [GenreOrderByWithRelationInput], skip: Int, take: Int, where: GenreWhereInput): AggregateGenre
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): AggregateUser
  findFirstAds(cursor: AdsWhereUniqueInput, distinct: [AdsScalarFieldEnum], orderBy: [AdsOrderByWithRelationInput], skip: Int, take: Int, where: AdsWhereInput): Ads
  findFirstAuthor(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum], orderBy: [AuthorOrderByWithRelationInput], skip: Int, take: Int, where: AuthorWhereInput): Author
  findFirstChapter(cursor: ChapterWhereUniqueInput, distinct: [ChapterScalarFieldEnum], orderBy: [ChapterOrderByWithRelationInput], skip: Int, take: Int, where: ChapterWhereInput): Chapter
  findFirstComic(cursor: ComicWhereUniqueInput, distinct: [ComicScalarFieldEnum], orderBy: [ComicOrderByWithRelationInput], skip: Int, take: Int, where: ComicWhereInput): Comic
  findFirstGenre(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum], orderBy: [GenreOrderByWithRelationInput], skip: Int, take: Int, where: GenreWhereInput): Genre
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): User
  findManyAds(cursor: AdsWhereUniqueInput, distinct: [AdsScalarFieldEnum], orderBy: [AdsOrderByWithRelationInput], skip: Int, take: Int, where: AdsWhereInput): [Ads!]!
  findManyAdsCount(cursor: AdsWhereUniqueInput, distinct: [AdsScalarFieldEnum], orderBy: [AdsOrderByWithRelationInput], skip: Int, take: Int, where: AdsWhereInput): Int!
  findManyAuthor(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum], orderBy: [AuthorOrderByWithRelationInput], skip: Int, take: Int, where: AuthorWhereInput): [Author!]!
  findManyAuthorCount(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum], orderBy: [AuthorOrderByWithRelationInput], skip: Int, take: Int, where: AuthorWhereInput): Int!
  findManyChapter(cursor: ChapterWhereUniqueInput, distinct: [ChapterScalarFieldEnum], orderBy: [ChapterOrderByWithRelationInput], skip: Int, take: Int, where: ChapterWhereInput): [Chapter!]!
  findManyChapterCount(cursor: ChapterWhereUniqueInput, distinct: [ChapterScalarFieldEnum], orderBy: [ChapterOrderByWithRelationInput], skip: Int, take: Int, where: ChapterWhereInput): Int!
  findManyComic(cursor: ComicWhereUniqueInput, distinct: [ComicScalarFieldEnum], orderBy: [ComicOrderByWithRelationInput], skip: Int, take: Int, where: ComicWhereInput): [Comic!]!
  findManyComicCount(cursor: ComicWhereUniqueInput, distinct: [ComicScalarFieldEnum], orderBy: [ComicOrderByWithRelationInput], skip: Int, take: Int, where: ComicWhereInput): Int!
  findManyGenre(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum], orderBy: [GenreOrderByWithRelationInput], skip: Int, take: Int, where: GenreWhereInput): [Genre!]!
  findManyGenreCount(cursor: GenreWhereUniqueInput, distinct: [GenreScalarFieldEnum], orderBy: [GenreOrderByWithRelationInput], skip: Int, take: Int, where: GenreWhereInput): Int!
  findManyUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): [User!]!
  findManyUserCount(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): Int!
  findUniqueAds(where: AdsWhereUniqueInput!): Ads
  findUniqueAuthor(where: AuthorWhereUniqueInput!): Author
  findUniqueChapter(where: ChapterWhereUniqueInput!): Chapter
  findUniqueComic(where: ComicWhereUniqueInput!): Comic
  findUniqueGenre(where: GenreWhereUniqueInput!): Genre
  findUniqueUser(where: UserWhereUniqueInput!): User
}

enum QueryMode {
  default
  insensitive
}

type SanityCheck {
  chapters: [Chapter]
  status: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String]
  has: String
  hasEvery: [String]
  hasSome: [String]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type User {
  allowHentai: Boolean!
  createdAt: DateTime!
  email: String!
  id: Int!
  isAdmin: Boolean!
  name: String
  password: String!
  updatedAt: DateTime!
}

type UserAvgAggregateOutputType {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCountAggregateOutputType {
  _all: Int!
  allowHentai: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  isAdmin: Int!
  name: Int!
  password: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  allowHentai: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  allowHentai: Boolean
  createdAt: DateTime
  email: String!
  isAdmin: Boolean
  name: String
  password: String!
  updatedAt: DateTime
}

input UserCreateManyInput {
  allowHentai: Boolean
  createdAt: DateTime
  email: String!
  id: Int
  isAdmin: Boolean
  name: String
  password: String!
  updatedAt: DateTime
}

type UserMaxAggregateOutputType {
  allowHentai: Boolean
  createdAt: DateTime
  email: String
  id: Int
  isAdmin: Boolean
  name: String
  password: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  allowHentai: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregateOutputType {
  allowHentai: Boolean
  createdAt: DateTime
  email: String
  id: Int
  isAdmin: Boolean
  name: String
  password: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  allowHentai: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  allowHentai: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  allowHentai: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  name: SortOrder
  password: SortOrder
  updatedAt: SortOrder
}

enum UserScalarFieldEnum {
  allowHentai
  createdAt
  email
  id
  isAdmin
  name
  password
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  allowHentai: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  isAdmin: BoolWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  password: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type UserSumAggregateOutputType {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUncheckedCreateInput {
  allowHentai: Boolean
  createdAt: DateTime
  email: String!
  id: Int
  isAdmin: Boolean
  name: String
  password: String!
  updatedAt: DateTime
}

input UserUncheckedUpdateInput {
  allowHentai: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  allowHentai: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateInput {
  allowHentai: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  allowHentai: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  allowHentai: BoolFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  isAdmin: BoolFilter
  name: StringNullableFilter
  password: StringFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}