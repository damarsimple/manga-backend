/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
var Cancel = __webpack_require__(/*! ../cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || defaults.transitional;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
axios.VERSION = (__webpack_require__(/*! ./env/data */ "./node_modules/axios/lib/env/data.js").version);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  if (!config.url) {
    throw new Error('Provided config url is not valid');
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  if (!config.url) {
    throw new Error('Provided config url is not valid');
  }
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
var Cancel = __webpack_require__(/*! ../cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
var enhanceError = __webpack_require__(/*! ./core/enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((module) => {

module.exports = {
  "version": "0.25.0"
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var VERSION = (__webpack_require__(/*! ../env/data */ "./node_modules/axios/lib/env/data.js").version);

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/***/ (function(module, exports) {

var global = typeof self !== 'undefined' ? self : this;
var __self__ = (function () {
function F() {
this.fetch = false;
this.DOMException = global.DOMException
}
F.prototype = global;
return new F();
})();
(function(self) {

var irrelevant = (function (exports) {

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = self.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new exports.DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

})({});
})(__self__);
__self__.fetch.ponyfill = true;
// Remove "polyfill" property added by whatwg-fetch
delete __self__.fetch.polyfill;
// Choose between native implementation (global) or custom implementation (__self__)
// var ctx = global.fetch ? global : __self__;
var ctx = __self__; // this line disable service worker support temporarily
exports = ctx.fetch // To enable: import fetch from 'cross-fetch'
exports["default"] = ctx.fetch // For TypeScript consumers without esModuleInterop.
exports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'
exports.Headers = ctx.Headers
exports.Request = ctx.Request
exports.Response = ctx.Response
module.exports = exports


/***/ }),

/***/ "./node_modules/extract-files/public/ReactNativeFile.js":
/*!**************************************************************!*\
  !*** ./node_modules/extract-files/public/ReactNativeFile.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function ReactNativeFile(_ref) {
  var uri = _ref.uri,
    name = _ref.name,
    type = _ref.type;
  this.uri = uri;
  this.name = name;
  this.type = type;
};


/***/ }),

/***/ "./node_modules/extract-files/public/extractFiles.js":
/*!***********************************************************!*\
  !*** ./node_modules/extract-files/public/extractFiles.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var defaultIsExtractableFile = __webpack_require__(/*! ./isExtractableFile */ "./node_modules/extract-files/public/isExtractableFile.js");

module.exports = function extractFiles(value, path, isExtractableFile) {
  if (path === void 0) {
    path = '';
  }

  if (isExtractableFile === void 0) {
    isExtractableFile = defaultIsExtractableFile;
  }

  var clone;
  var files = new Map();

  function addFile(paths, file) {
    var storedPaths = files.get(file);
    if (storedPaths) storedPaths.push.apply(storedPaths, paths);
    else files.set(file, paths);
  }

  if (isExtractableFile(value)) {
    clone = null;
    addFile([path], value);
  } else {
    var prefix = path ? path + '.' : '';
    if (typeof FileList !== 'undefined' && value instanceof FileList)
      clone = Array.prototype.map.call(value, function (file, i) {
        addFile(['' + prefix + i], file);
        return null;
      });
    else if (Array.isArray(value))
      clone = value.map(function (child, i) {
        var result = extractFiles(child, '' + prefix + i, isExtractableFile);
        result.files.forEach(addFile);
        return result.clone;
      });
    else if (value && value.constructor === Object) {
      clone = {};

      for (var i in value) {
        var result = extractFiles(value[i], '' + prefix + i, isExtractableFile);
        result.files.forEach(addFile);
        clone[i] = result.clone;
      }
    } else clone = value;
  }

  return {
    clone: clone,
    files: files,
  };
};


/***/ }),

/***/ "./node_modules/extract-files/public/index.js":
/*!****************************************************!*\
  !*** ./node_modules/extract-files/public/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


exports.ReactNativeFile = __webpack_require__(/*! ./ReactNativeFile */ "./node_modules/extract-files/public/ReactNativeFile.js");
exports.extractFiles = __webpack_require__(/*! ./extractFiles */ "./node_modules/extract-files/public/extractFiles.js");
exports.isExtractableFile = __webpack_require__(/*! ./isExtractableFile */ "./node_modules/extract-files/public/isExtractableFile.js");


/***/ }),

/***/ "./node_modules/extract-files/public/isExtractableFile.js":
/*!****************************************************************!*\
  !*** ./node_modules/extract-files/public/isExtractableFile.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var ReactNativeFile = __webpack_require__(/*! ./ReactNativeFile */ "./node_modules/extract-files/public/ReactNativeFile.js");

module.exports = function isExtractableFile(value) {
  return (
    (typeof File !== 'undefined' && value instanceof File) ||
    (typeof Blob !== 'undefined' && value instanceof Blob) ||
    value instanceof ReactNativeFile
  );
};


/***/ }),

/***/ "./node_modules/graphql-request/dist/createRequestBody.js":
/*!****************************************************************!*\
  !*** ./node_modules/graphql-request/dist/createRequestBody.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var extract_files_1 = __webpack_require__(/*! extract-files */ "./node_modules/extract-files/public/index.js");
var form_data_1 = __importDefault(__webpack_require__(/*! form-data */ "./node_modules/graphql-request/node_modules/form-data/lib/browser.js"));
/**
 * Duck type if NodeJS stream
 * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3
 */
var isExtractableFileEnhanced = function (value) {
    return extract_files_1.isExtractableFile(value) ||
        (value !== null && typeof value === 'object' && typeof value.pipe === 'function');
};
/**
 * Returns Multipart Form if body contains files
 * (https://github.com/jaydenseric/graphql-multipart-request-spec)
 * Otherwise returns JSON
 */
function createRequestBody(query, variables, operationName) {
    var _a = extract_files_1.extractFiles({ query: query, variables: variables, operationName: operationName }, '', isExtractableFileEnhanced), clone = _a.clone, files = _a.files;
    if (files.size === 0) {
        if (!Array.isArray(query)) {
            return JSON.stringify(clone);
        }
        if (typeof variables !== 'undefined' && !Array.isArray(variables)) {
            throw new Error('Cannot create request body with given variable type, array expected');
        }
        // Batch support
        var payload = query.reduce(function (accu, currentQuery, index) {
            accu.push({ query: currentQuery, variables: variables ? variables[index] : undefined });
            return accu;
        }, []);
        return JSON.stringify(payload);
    }
    var Form = typeof FormData === 'undefined' ? form_data_1.default : FormData;
    var form = new Form();
    form.append('operations', JSON.stringify(clone));
    var map = {};
    var i = 0;
    files.forEach(function (paths) {
        map[++i] = paths;
    });
    form.append('map', JSON.stringify(map));
    i = 0;
    files.forEach(function (paths, file) {
        form.append("" + ++i, file);
    });
    return form;
}
exports["default"] = createRequestBody;
//# sourceMappingURL=createRequestBody.js.map

/***/ }),

/***/ "./node_modules/graphql-request/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/graphql-request/dist/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gql = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;
var cross_fetch_1 = __importStar(__webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js")), CrossFetch = cross_fetch_1;
var printer_1 = __webpack_require__(/*! graphql/language/printer */ "./node_modules/graphql/language/printer.js");
var createRequestBody_1 = __importDefault(__webpack_require__(/*! ./createRequestBody */ "./node_modules/graphql-request/dist/createRequestBody.js"));
var parseArgs_1 = __webpack_require__(/*! ./parseArgs */ "./node_modules/graphql-request/dist/parseArgs.js");
var types_1 = __webpack_require__(/*! ./types */ "./node_modules/graphql-request/dist/types.js");
Object.defineProperty(exports, "ClientError", ({ enumerable: true, get: function () { return types_1.ClientError; } }));
/**
 * Convert the given headers configuration into a plain object.
 */
var resolveHeaders = function (headers) {
    var oHeaders = {};
    if (headers) {
        if ((typeof Headers !== 'undefined' && headers instanceof Headers) ||
            headers instanceof CrossFetch.Headers) {
            oHeaders = HeadersInstanceToPlainObject(headers);
        }
        else if (Array.isArray(headers)) {
            headers.forEach(function (_a) {
                var name = _a[0], value = _a[1];
                oHeaders[name] = value;
            });
        }
        else {
            oHeaders = headers;
        }
    }
    return oHeaders;
};
/**
 * Clean a GraphQL document to send it via a GET query
 *
 * @param {string} str GraphQL query
 * @returns {string} Cleaned query
 */
var queryCleanner = function (str) { return str.replace(/([\s,]|#[^\n\r]+)+/g, ' ').trim(); };
/**
 * Create query string for GraphQL request
 *
 * @param {object} param0 -
 *
 * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request
 * @param {string|undefined} param0.operationName the GraphQL operation name
 * @param {any|any[]} param0.variables the GraphQL variables to use
 */
var buildGetQueryParams = function (_a) {
    var query = _a.query, variables = _a.variables, operationName = _a.operationName;
    if (!Array.isArray(query)) {
        var search = ["query=" + encodeURIComponent(queryCleanner(query))];
        if (variables) {
            search.push("variables=" + encodeURIComponent(JSON.stringify(variables)));
        }
        if (operationName) {
            search.push("operationName=" + encodeURIComponent(operationName));
        }
        return search.join('&');
    }
    if (typeof variables !== 'undefined' && !Array.isArray(variables)) {
        throw new Error('Cannot create query with given variable type, array expected');
    }
    // Batch support
    var payload = query.reduce(function (accu, currentQuery, index) {
        accu.push({
            query: queryCleanner(currentQuery),
            variables: variables ? JSON.stringify(variables[index]) : undefined,
        });
        return accu;
    }, []);
    return "query=" + encodeURIComponent(JSON.stringify(payload));
};
/**
 * Fetch data using POST method
 */
var post = function (_a) {
    var url = _a.url, query = _a.query, variables = _a.variables, operationName = _a.operationName, headers = _a.headers, fetch = _a.fetch, fetchOptions = _a.fetchOptions;
    return __awaiter(void 0, void 0, void 0, function () {
        var body;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    body = createRequestBody_1.default(query, variables, operationName);
                    return [4 /*yield*/, fetch(url, __assign({ method: 'POST', headers: __assign(__assign({}, (typeof body === 'string' ? { 'Content-Type': 'application/json' } : {})), headers), body: body }, fetchOptions))];
                case 1: return [2 /*return*/, _b.sent()];
            }
        });
    });
};
/**
 * Fetch data using GET method
 */
var get = function (_a) {
    var url = _a.url, query = _a.query, variables = _a.variables, operationName = _a.operationName, headers = _a.headers, fetch = _a.fetch, fetchOptions = _a.fetchOptions;
    return __awaiter(void 0, void 0, void 0, function () {
        var queryParams;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    queryParams = buildGetQueryParams({
                        query: query,
                        variables: variables,
                        operationName: operationName,
                    });
                    return [4 /*yield*/, fetch(url + "?" + queryParams, __assign({ method: 'GET', headers: headers }, fetchOptions))];
                case 1: return [2 /*return*/, _b.sent()];
            }
        });
    });
};
/**
 * GraphQL Client.
 */
var GraphQLClient = /** @class */ (function () {
    function GraphQLClient(url, options) {
        this.url = url;
        this.options = options || {};
    }
    GraphQLClient.prototype.rawRequest = function (queryOrOptions, variables, requestHeaders) {
        return __awaiter(this, void 0, void 0, function () {
            var rawRequestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url;
            return __generator(this, function (_d) {
                rawRequestOptions = parseArgs_1.parseRawRequestArgs(queryOrOptions, variables, requestHeaders);
                _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, ["headers", "fetch", "method"]);
                url = this.url;
                if (rawRequestOptions.signal !== undefined) {
                    fetchOptions.signal = rawRequestOptions.signal;
                }
                return [2 /*return*/, makeRequest({
                        url: url,
                        query: rawRequestOptions.query,
                        variables: rawRequestOptions.variables,
                        headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(rawRequestOptions.requestHeaders)),
                        operationName: undefined,
                        fetch: fetch,
                        method: method,
                        fetchOptions: fetchOptions,
                    })];
            });
        });
    };
    GraphQLClient.prototype.request = function (documentOrOptions, variables, requestHeaders) {
        return __awaiter(this, void 0, void 0, function () {
            var requestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, _d, query, operationName, data;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        requestOptions = parseArgs_1.parseRequestArgs(documentOrOptions, variables, requestHeaders);
                        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, ["headers", "fetch", "method"]);
                        url = this.url;
                        if (requestOptions.signal !== undefined) {
                            fetchOptions.signal = requestOptions.signal;
                        }
                        _d = resolveRequestDocument(requestOptions.document), query = _d.query, operationName = _d.operationName;
                        return [4 /*yield*/, makeRequest({
                                url: url,
                                query: query,
                                variables: requestOptions.variables,
                                headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(requestOptions.requestHeaders)),
                                operationName: operationName,
                                fetch: fetch,
                                method: method,
                                fetchOptions: fetchOptions,
                            })];
                    case 1:
                        data = (_e.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    GraphQLClient.prototype.batchRequests = function (documentsOrOptions, requestHeaders) {
        return __awaiter(this, void 0, void 0, function () {
            var batchRequestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, queries, variables, data;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        batchRequestOptions = parseArgs_1.parseBatchRequestArgs(documentsOrOptions, requestHeaders);
                        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, ["headers", "fetch", "method"]);
                        url = this.url;
                        if (batchRequestOptions.signal !== undefined) {
                            fetchOptions.signal = batchRequestOptions.signal;
                        }
                        queries = batchRequestOptions.documents.map(function (_a) {
                            var document = _a.document;
                            return resolveRequestDocument(document).query;
                        });
                        variables = batchRequestOptions.documents.map(function (_a) {
                            var variables = _a.variables;
                            return variables;
                        });
                        return [4 /*yield*/, makeRequest({
                                url: url,
                                query: queries,
                                variables: variables,
                                headers: __assign(__assign({}, resolveHeaders(headers)), resolveHeaders(batchRequestOptions.requestHeaders)),
                                operationName: undefined,
                                fetch: fetch,
                                method: method,
                                fetchOptions: fetchOptions,
                            })];
                    case 1:
                        data = (_d.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    GraphQLClient.prototype.setHeaders = function (headers) {
        this.options.headers = headers;
        return this;
    };
    /**
     * Attach a header to the client. All subsequent requests will have this header.
     */
    GraphQLClient.prototype.setHeader = function (key, value) {
        var _a;
        var headers = this.options.headers;
        if (headers) {
            // todo what if headers is in nested array form... ?
            //@ts-ignore
            headers[key] = value;
        }
        else {
            this.options.headers = (_a = {}, _a[key] = value, _a);
        }
        return this;
    };
    /**
     * Change the client endpoint. All subsequent requests will send to this endpoint.
     */
    GraphQLClient.prototype.setEndpoint = function (value) {
        this.url = value;
        return this;
    };
    return GraphQLClient;
}());
exports.GraphQLClient = GraphQLClient;
function makeRequest(_a) {
    var url = _a.url, query = _a.query, variables = _a.variables, headers = _a.headers, operationName = _a.operationName, fetch = _a.fetch, _b = _a.method, method = _b === void 0 ? 'POST' : _b, fetchOptions = _a.fetchOptions;
    return __awaiter(this, void 0, void 0, function () {
        var fetcher, isBathchingQuery, response, result, successfullyReceivedData, headers_1, status_1, errorResult;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    fetcher = method.toUpperCase() === 'POST' ? post : get;
                    isBathchingQuery = Array.isArray(query);
                    return [4 /*yield*/, fetcher({
                            url: url,
                            query: query,
                            variables: variables,
                            operationName: operationName,
                            headers: headers,
                            fetch: fetch,
                            fetchOptions: fetchOptions,
                        })];
                case 1:
                    response = _c.sent();
                    return [4 /*yield*/, getResult(response)];
                case 2:
                    result = _c.sent();
                    successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function (_a) {
                        var data = _a.data;
                        return !data;
                    }) : !!result.data;
                    if (response.ok && !result.errors && successfullyReceivedData) {
                        headers_1 = response.headers, status_1 = response.status;
                        return [2 /*return*/, __assign(__assign({}, (isBathchingQuery ? { data: result } : result)), { headers: headers_1, status: status_1 })];
                    }
                    else {
                        errorResult = typeof result === 'string' ? { error: result } : result;
                        throw new types_1.ClientError(__assign(__assign({}, errorResult), { status: response.status, headers: response.headers }), { query: query, variables: variables });
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function rawRequest(urlOrOptions, query, variables, requestHeaders) {
    return __awaiter(this, void 0, void 0, function () {
        var requestOptions, client;
        return __generator(this, function (_a) {
            requestOptions = parseArgs_1.parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders);
            client = new GraphQLClient(requestOptions.url);
            return [2 /*return*/, client.rawRequest(__assign({}, requestOptions))];
        });
    });
}
exports.rawRequest = rawRequest;
function request(urlOrOptions, document, variables, requestHeaders) {
    return __awaiter(this, void 0, void 0, function () {
        var requestOptions, client;
        return __generator(this, function (_a) {
            requestOptions = parseArgs_1.parseRequestExtendedArgs(urlOrOptions, document, variables, requestHeaders);
            client = new GraphQLClient(requestOptions.url);
            return [2 /*return*/, client.request(__assign({}, requestOptions))];
        });
    });
}
exports.request = request;
function batchRequests(urlOrOptions, documents, requestHeaders) {
    return __awaiter(this, void 0, void 0, function () {
        var requestOptions, client;
        return __generator(this, function (_a) {
            requestOptions = parseArgs_1.parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders);
            client = new GraphQLClient(requestOptions.url);
            return [2 /*return*/, client.batchRequests(__assign({}, requestOptions))];
        });
    });
}
exports.batchRequests = batchRequests;
exports["default"] = request;
/**
 * todo
 */
function getResult(response) {
    var contentType = response.headers.get('Content-Type');
    if (contentType && contentType.startsWith('application/json')) {
        return response.json();
    }
    else {
        return response.text();
    }
}
/**
 * helpers
 */
function resolveRequestDocument(document) {
    var _a;
    if (typeof document === 'string')
        return { query: document };
    var operationName = undefined;
    var operationDefinitions = document.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; });
    if (operationDefinitions.length === 1) {
        operationName = (_a = operationDefinitions[0].name) === null || _a === void 0 ? void 0 : _a.value;
    }
    return { query: printer_1.print(document), operationName: operationName };
}
/**
 * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.
 *
 * @example
 *
 * import { gql } from 'graphql-request'
 *
 * await request('https://foo.bar/graphql', gql`...`)
 *
 * @remarks
 *
 * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named "gql". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.
 */
function gql(chunks) {
    var variables = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        variables[_i - 1] = arguments[_i];
    }
    return chunks.reduce(function (accumulator, chunk, index) { return "" + accumulator + chunk + (index in variables ? variables[index] : ''); }, '');
}
exports.gql = gql;
/**
 * Convert Headers instance into regular object
 */
function HeadersInstanceToPlainObject(headers) {
    var o = {};
    headers.forEach(function (v, k) {
        o[k] = v;
    });
    return o;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/graphql-request/dist/parseArgs.js":
/*!********************************************************!*\
  !*** ./node_modules/graphql-request/dist/parseArgs.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseBatchRequestsExtendedArgs = exports.parseRawRequestExtendedArgs = exports.parseRequestExtendedArgs = exports.parseBatchRequestArgs = exports.parseRawRequestArgs = exports.parseRequestArgs = void 0;
function parseRequestArgs(documentOrOptions, variables, requestHeaders) {
    return documentOrOptions.document
        ? documentOrOptions
        : {
            document: documentOrOptions,
            variables: variables,
            requestHeaders: requestHeaders,
            signal: undefined,
        };
}
exports.parseRequestArgs = parseRequestArgs;
function parseRawRequestArgs(queryOrOptions, variables, requestHeaders) {
    return queryOrOptions.query
        ? queryOrOptions
        : {
            query: queryOrOptions,
            variables: variables,
            requestHeaders: requestHeaders,
            signal: undefined,
        };
}
exports.parseRawRequestArgs = parseRawRequestArgs;
function parseBatchRequestArgs(documentsOrOptions, requestHeaders) {
    return documentsOrOptions.documents
        ? documentsOrOptions
        : {
            documents: documentsOrOptions,
            requestHeaders: requestHeaders,
            signal: undefined,
        };
}
exports.parseBatchRequestArgs = parseBatchRequestArgs;
function parseRequestExtendedArgs(urlOrOptions, document, variables, requestHeaders) {
    return urlOrOptions.document
        ? urlOrOptions
        : {
            url: urlOrOptions,
            document: document,
            variables: variables,
            requestHeaders: requestHeaders,
            signal: undefined,
        };
}
exports.parseRequestExtendedArgs = parseRequestExtendedArgs;
function parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders) {
    return urlOrOptions.query
        ? urlOrOptions
        : {
            url: urlOrOptions,
            query: query,
            variables: variables,
            requestHeaders: requestHeaders,
            signal: undefined,
        };
}
exports.parseRawRequestExtendedArgs = parseRawRequestExtendedArgs;
function parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders) {
    return urlOrOptions.documents
        ? urlOrOptions
        : {
            url: urlOrOptions,
            documents: documents,
            requestHeaders: requestHeaders,
            signal: undefined,
        };
}
exports.parseBatchRequestsExtendedArgs = parseBatchRequestsExtendedArgs;
//# sourceMappingURL=parseArgs.js.map

/***/ }),

/***/ "./node_modules/graphql-request/dist/types.js":
/*!****************************************************!*\
  !*** ./node_modules/graphql-request/dist/types.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ClientError = void 0;
var ClientError = /** @class */ (function (_super) {
    __extends(ClientError, _super);
    function ClientError(response, request) {
        var _this = this;
        var message = ClientError.extractMessage(response) + ": " + JSON.stringify({
            response: response,
            request: request,
        });
        _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, ClientError.prototype);
        _this.response = response;
        _this.request = request;
        // this is needed as Safari doesn't support .captureStackTrace
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(_this, ClientError);
        }
        return _this;
    }
    ClientError.extractMessage = function (response) {
        try {
            return response.errors[0].message;
        }
        catch (e) {
            return "GraphQL Error (Code: " + response.status + ")";
        }
    };
    return ClientError;
}(Error));
exports.ClientError = ClientError;
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/graphql-request/node_modules/form-data/lib/browser.js":
/*!****************************************************************************!*\
  !*** ./node_modules/graphql-request/node_modules/form-data/lib/browser.js ***!
  \****************************************************************************/
/***/ ((module) => {

/* eslint-env browser */
module.exports = typeof self == 'object' ? self.FormData : window.FormData;


/***/ }),

/***/ "./node_modules/graphql/jsutils/devAssert.js":
/*!***************************************************!*\
  !*** ./node_modules/graphql/jsutils/devAssert.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true,
}));
exports.devAssert = devAssert;

function devAssert(condition, message) {
  const booleanCondition = Boolean(condition);

  if (!booleanCondition) {
    throw new Error(message);
  }
}


/***/ }),

/***/ "./node_modules/graphql/jsutils/inspect.js":
/*!*************************************************!*\
  !*** ./node_modules/graphql/jsutils/inspect.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true,
}));
exports.inspect = inspect;
const MAX_ARRAY_LENGTH = 10;
const MAX_RECURSIVE_DEPTH = 2;
/**
 * Used to print values in error messages.
 */

function inspect(value) {
  return formatValue(value, []);
}

function formatValue(value, seenValues) {
  switch (typeof value) {
    case 'string':
      return JSON.stringify(value);

    case 'function':
      return value.name ? `[function ${value.name}]` : '[function]';

    case 'object':
      return formatObjectValue(value, seenValues);

    default:
      return String(value);
  }
}

function formatObjectValue(value, previouslySeenValues) {
  if (value === null) {
    return 'null';
  }

  if (previouslySeenValues.includes(value)) {
    return '[Circular]';
  }

  const seenValues = [...previouslySeenValues, value];

  if (isJSONable(value)) {
    const jsonValue = value.toJSON(); // check for infinite recursion

    if (jsonValue !== value) {
      return typeof jsonValue === 'string'
        ? jsonValue
        : formatValue(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }

  return formatObject(value, seenValues);
}

function isJSONable(value) {
  return typeof value.toJSON === 'function';
}

function formatObject(object, seenValues) {
  const entries = Object.entries(object);

  if (entries.length === 0) {
    return '{}';
  }

  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[' + getObjectTag(object) + ']';
  }

  const properties = entries.map(
    ([key, value]) => key + ': ' + formatValue(value, seenValues),
  );
  return '{ ' + properties.join(', ') + ' }';
}

function formatArray(array, seenValues) {
  if (array.length === 0) {
    return '[]';
  }

  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[Array]';
  }

  const len = Math.min(MAX_ARRAY_LENGTH, array.length);
  const remaining = array.length - len;
  const items = [];

  for (let i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }

  if (remaining === 1) {
    items.push('... 1 more item');
  } else if (remaining > 1) {
    items.push(`... ${remaining} more items`);
  }

  return '[' + items.join(', ') + ']';
}

function getObjectTag(object) {
  const tag = Object.prototype.toString
    .call(object)
    .replace(/^\[object /, '')
    .replace(/]$/, '');

  if (tag === 'Object' && typeof object.constructor === 'function') {
    const name = object.constructor.name;

    if (typeof name === 'string' && name !== '') {
      return name;
    }
  }

  return tag;
}


/***/ }),

/***/ "./node_modules/graphql/language/ast.js":
/*!**********************************************!*\
  !*** ./node_modules/graphql/language/ast.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true,
}));
exports.Token =
  exports.QueryDocumentKeys =
  exports.OperationTypeNode =
  exports.Location =
    void 0;
exports.isNode = isNode;

/**
 * Contains a range of UTF-8 character offsets and token references that
 * identify the region of the source from which the AST derived.
 */
class Location {
  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The Token at which this Node begins.
   */

  /**
   * The Token at which this Node ends.
   */

  /**
   * The Source document the AST represents.
   */
  constructor(startToken, endToken, source) {
    this.start = startToken.start;
    this.end = endToken.end;
    this.startToken = startToken;
    this.endToken = endToken;
    this.source = source;
  }

  get [Symbol.toStringTag]() {
    return 'Location';
  }

  toJSON() {
    return {
      start: this.start,
      end: this.end,
    };
  }
}
/**
 * Represents a range of characters represented by a lexical token
 * within a Source.
 */

exports.Location = Location;

class Token {
  /**
   * The kind of Token.
   */

  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The 1-indexed line number on which this Token appears.
   */

  /**
   * The 1-indexed column number at which this Token begins.
   */

  /**
   * For non-punctuation tokens, represents the interpreted value of the token.
   *
   * Note: is undefined for punctuation tokens, but typed as string for
   * convenience in the parser.
   */

  /**
   * Tokens exist as nodes in a double-linked-list amongst all tokens
   * including ignored tokens. <SOF> is always the first node and <EOF>
   * the last.
   */
  constructor(kind, start, end, line, column, value) {
    this.kind = kind;
    this.start = start;
    this.end = end;
    this.line = line;
    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

    this.value = value;
    this.prev = null;
    this.next = null;
  }

  get [Symbol.toStringTag]() {
    return 'Token';
  }

  toJSON() {
    return {
      kind: this.kind,
      value: this.value,
      line: this.line,
      column: this.column,
    };
  }
}
/**
 * The list of all possible AST node types.
 */

exports.Token = Token;

/**
 * @internal
 */
const QueryDocumentKeys = {
  Name: [],
  Document: ['definitions'],
  OperationDefinition: [
    'name',
    'variableDefinitions',
    'directives',
    'selectionSet',
  ],
  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
  Variable: ['name'],
  SelectionSet: ['selections'],
  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
  Argument: ['name', 'value'],
  FragmentSpread: ['name', 'directives'],
  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
  FragmentDefinition: [
    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0
    'variableDefinitions',
    'typeCondition',
    'directives',
    'selectionSet',
  ],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ['values'],
  ObjectValue: ['fields'],
  ObjectField: ['name', 'value'],
  Directive: ['name', 'arguments'],
  NamedType: ['name'],
  ListType: ['type'],
  NonNullType: ['type'],
  SchemaDefinition: ['description', 'directives', 'operationTypes'],
  OperationTypeDefinition: ['type'],
  ScalarTypeDefinition: ['description', 'name', 'directives'],
  ObjectTypeDefinition: [
    'description',
    'name',
    'interfaces',
    'directives',
    'fields',
  ],
  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
  InputValueDefinition: [
    'description',
    'name',
    'type',
    'defaultValue',
    'directives',
  ],
  InterfaceTypeDefinition: [
    'description',
    'name',
    'interfaces',
    'directives',
    'fields',
  ],
  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
  EnumValueDefinition: ['description', 'name', 'directives'],
  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
  SchemaExtension: ['directives', 'operationTypes'],
  ScalarTypeExtension: ['name', 'directives'],
  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  UnionTypeExtension: ['name', 'directives', 'types'],
  EnumTypeExtension: ['name', 'directives', 'values'],
  InputObjectTypeExtension: ['name', 'directives', 'fields'],
};
exports.QueryDocumentKeys = QueryDocumentKeys;
const kindValues = new Set(Object.keys(QueryDocumentKeys));
/**
 * @internal
 */

function isNode(maybeNode) {
  const maybeKind =
    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
  return typeof maybeKind === 'string' && kindValues.has(maybeKind);
}
/** Name */

let OperationTypeNode;
exports.OperationTypeNode = OperationTypeNode;

(function (OperationTypeNode) {
  OperationTypeNode['QUERY'] = 'query';
  OperationTypeNode['MUTATION'] = 'mutation';
  OperationTypeNode['SUBSCRIPTION'] = 'subscription';
})(OperationTypeNode || (exports.OperationTypeNode = OperationTypeNode = {}));


/***/ }),

/***/ "./node_modules/graphql/language/blockString.js":
/*!******************************************************!*\
  !*** ./node_modules/graphql/language/blockString.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true,
}));
exports.dedentBlockStringLines = dedentBlockStringLines;
exports.isPrintableAsBlockString = isPrintableAsBlockString;
exports.printBlockString = printBlockString;

var _characterClasses = __webpack_require__(/*! ./characterClasses.js */ "./node_modules/graphql/language/characterClasses.js");

/**
 * Produces the value of a block string from its parsed raw value, similar to
 * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
 *
 * This implements the GraphQL spec's BlockStringValue() static algorithm.
 *
 * @internal
 */
function dedentBlockStringLines(lines) {
  var _firstNonEmptyLine2;

  let commonIndent = Number.MAX_SAFE_INTEGER;
  let firstNonEmptyLine = null;
  let lastNonEmptyLine = -1;

  for (let i = 0; i < lines.length; ++i) {
    var _firstNonEmptyLine;

    const line = lines[i];
    const indent = leadingWhitespace(line);

    if (indent === line.length) {
      continue; // skip empty lines
    }

    firstNonEmptyLine =
      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&
      _firstNonEmptyLine !== void 0
        ? _firstNonEmptyLine
        : i;
    lastNonEmptyLine = i;

    if (i !== 0 && indent < commonIndent) {
      commonIndent = indent;
    }
  }

  return lines // Remove common indentation from all lines but first.
    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.
    .slice(
      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&
        _firstNonEmptyLine2 !== void 0
        ? _firstNonEmptyLine2
        : 0,
      lastNonEmptyLine + 1,
    );
}

function leadingWhitespace(str) {
  let i = 0;

  while (
    i < str.length &&
    (0, _characterClasses.isWhiteSpace)(str.charCodeAt(i))
  ) {
    ++i;
  }

  return i;
}
/**
 * @internal
 */

function isPrintableAsBlockString(value) {
  if (value === '') {
    return true; // empty string is printable
  }

  let isEmptyLine = true;
  let hasIndent = false;
  let hasCommonIndent = true;
  let seenNonEmptyLine = false;

  for (let i = 0; i < value.length; ++i) {
    switch (value.codePointAt(i)) {
      case 0x0000:
      case 0x0001:
      case 0x0002:
      case 0x0003:
      case 0x0004:
      case 0x0005:
      case 0x0006:
      case 0x0007:
      case 0x0008:
      case 0x000b:
      case 0x000c:
      case 0x000e:
      case 0x000f:
        return false;
      // Has non-printable characters

      case 0x000d:
        //  \r
        return false;
      // Has \r or \r\n which will be replaced as \n

      case 10:
        //  \n
        if (isEmptyLine && !seenNonEmptyLine) {
          return false; // Has leading new line
        }

        seenNonEmptyLine = true;
        isEmptyLine = true;
        hasIndent = false;
        break;

      case 9: //   \t

      case 32:
        //  <space>
        hasIndent || (hasIndent = isEmptyLine);
        break;

      default:
        hasCommonIndent && (hasCommonIndent = hasIndent);
        isEmptyLine = false;
    }
  }

  if (isEmptyLine) {
    return false; // Has trailing empty lines
  }

  if (hasCommonIndent && seenNonEmptyLine) {
    return false; // Has internal indent
  }

  return true;
}
/**
 * Print a block string in the indented block form by adding a leading and
 * trailing blank line. However, if a block string starts with whitespace and is
 * a single-line, adding a leading blank line would strip that whitespace.
 *
 * @internal
 */

function printBlockString(value, options) {
  const escapedValue = value.replace(/"""/g, '\\"""'); // Expand a block string's raw value into independent lines.

  const lines = escapedValue.split(/\r\n|[\n\r]/g);
  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line

  const forceLeadingNewLine =
    lines.length > 1 &&
    lines
      .slice(1)
      .every(
        (line) =>
          line.length === 0 ||
          (0, _characterClasses.isWhiteSpace)(line.charCodeAt(0)),
      ); // Trailing triple quotes just looks confusing but doesn't force trailing new line

  const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""'); // Trailing quote (single or double) or slash forces trailing new line

  const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
  const hasTrailingSlash = value.endsWith('\\');
  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
  const printAsMultipleLines =
    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability
    (!isSingleLine ||
      value.length > 70 ||
      forceTrailingNewline ||
      forceLeadingNewLine ||
      hasTrailingTripleQuotes);
  let result = ''; // Format a multi-line block quote to account for leading space.

  const skipLeadingNewLine =
    isSingleLine && (0, _characterClasses.isWhiteSpace)(value.charCodeAt(0));

  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {
    result += '\n';
  }

  result += escapedValue;

  if (printAsMultipleLines || forceTrailingNewline) {
    result += '\n';
  }

  return '"""' + result + '"""';
}


/***/ }),

/***/ "./node_modules/graphql/language/characterClasses.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql/language/characterClasses.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true,
}));
exports.isDigit = isDigit;
exports.isLetter = isLetter;
exports.isNameContinue = isNameContinue;
exports.isNameStart = isNameStart;
exports.isWhiteSpace = isWhiteSpace;

/**
 * ```
 * WhiteSpace ::
 *   - "Horizontal Tab (U+0009)"
 *   - "Space (U+0020)"
 * ```
 * @internal
 */
function isWhiteSpace(code) {
  return code === 0x0009 || code === 0x0020;
}
/**
 * ```
 * Digit :: one of
 *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`
 * ```
 * @internal
 */

function isDigit(code) {
  return code >= 0x0030 && code <= 0x0039;
}
/**
 * ```
 * Letter :: one of
 *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`
 *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`
 *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`
 *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`
 * ```
 * @internal
 */

function isLetter(code) {
  return (
    (code >= 0x0061 && code <= 0x007a) || // A-Z
    (code >= 0x0041 && code <= 0x005a) // a-z
  );
}
/**
 * ```
 * NameStart ::
 *   - Letter
 *   - `_`
 * ```
 * @internal
 */

function isNameStart(code) {
  return isLetter(code) || code === 0x005f;
}
/**
 * ```
 * NameContinue ::
 *   - Letter
 *   - Digit
 *   - `_`
 * ```
 * @internal
 */

function isNameContinue(code) {
  return isLetter(code) || isDigit(code) || code === 0x005f;
}


/***/ }),

/***/ "./node_modules/graphql/language/kinds.js":
/*!************************************************!*\
  !*** ./node_modules/graphql/language/kinds.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true,
}));
exports.Kind = void 0;

/**
 * The set of allowed kind values for AST nodes.
 */
let Kind;
/**
 * The enum type representing the possible kind values of AST nodes.
 *
 * @deprecated Please use `Kind`. Will be remove in v17.
 */

exports.Kind = Kind;

(function (Kind) {
  Kind['NAME'] = 'Name';
  Kind['DOCUMENT'] = 'Document';
  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';
  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';
  Kind['SELECTION_SET'] = 'SelectionSet';
  Kind['FIELD'] = 'Field';
  Kind['ARGUMENT'] = 'Argument';
  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';
  Kind['INLINE_FRAGMENT'] = 'InlineFragment';
  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';
  Kind['VARIABLE'] = 'Variable';
  Kind['INT'] = 'IntValue';
  Kind['FLOAT'] = 'FloatValue';
  Kind['STRING'] = 'StringValue';
  Kind['BOOLEAN'] = 'BooleanValue';
  Kind['NULL'] = 'NullValue';
  Kind['ENUM'] = 'EnumValue';
  Kind['LIST'] = 'ListValue';
  Kind['OBJECT'] = 'ObjectValue';
  Kind['OBJECT_FIELD'] = 'ObjectField';
  Kind['DIRECTIVE'] = 'Directive';
  Kind['NAMED_TYPE'] = 'NamedType';
  Kind['LIST_TYPE'] = 'ListType';
  Kind['NON_NULL_TYPE'] = 'NonNullType';
  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';
  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';
  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';
  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';
  Kind['FIELD_DEFINITION'] = 'FieldDefinition';
  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';
  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';
  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';
  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';
  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';
  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';
  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';
  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';
  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';
  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';
  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';
  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';
  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';
  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';
})(Kind || (exports.Kind = Kind = {}));


/***/ }),

/***/ "./node_modules/graphql/language/printString.js":
/*!******************************************************!*\
  !*** ./node_modules/graphql/language/printString.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true,
}));
exports.printString = printString;

/**
 * Prints a string as a GraphQL StringValue literal. Replaces control characters
 * and excluded characters (" U+0022 and \\ U+005C) with escape sequences.
 */
function printString(str) {
  return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
} // eslint-disable-next-line no-control-regex

const escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;

function escapedReplacer(str) {
  return escapeSequences[str.charCodeAt(0)];
} // prettier-ignore

const escapeSequences = [
  '\\u0000',
  '\\u0001',
  '\\u0002',
  '\\u0003',
  '\\u0004',
  '\\u0005',
  '\\u0006',
  '\\u0007',
  '\\b',
  '\\t',
  '\\n',
  '\\u000B',
  '\\f',
  '\\r',
  '\\u000E',
  '\\u000F',
  '\\u0010',
  '\\u0011',
  '\\u0012',
  '\\u0013',
  '\\u0014',
  '\\u0015',
  '\\u0016',
  '\\u0017',
  '\\u0018',
  '\\u0019',
  '\\u001A',
  '\\u001B',
  '\\u001C',
  '\\u001D',
  '\\u001E',
  '\\u001F',
  '',
  '',
  '\\"',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '', // 2F
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '', // 3F
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '', // 4F
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '\\\\',
  '',
  '',
  '', // 5F
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '', // 6F
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '\\u007F',
  '\\u0080',
  '\\u0081',
  '\\u0082',
  '\\u0083',
  '\\u0084',
  '\\u0085',
  '\\u0086',
  '\\u0087',
  '\\u0088',
  '\\u0089',
  '\\u008A',
  '\\u008B',
  '\\u008C',
  '\\u008D',
  '\\u008E',
  '\\u008F',
  '\\u0090',
  '\\u0091',
  '\\u0092',
  '\\u0093',
  '\\u0094',
  '\\u0095',
  '\\u0096',
  '\\u0097',
  '\\u0098',
  '\\u0099',
  '\\u009A',
  '\\u009B',
  '\\u009C',
  '\\u009D',
  '\\u009E',
  '\\u009F',
];


/***/ }),

/***/ "./node_modules/graphql/language/printer.js":
/*!**************************************************!*\
  !*** ./node_modules/graphql/language/printer.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true,
}));
exports.print = print;

var _blockString = __webpack_require__(/*! ./blockString.js */ "./node_modules/graphql/language/blockString.js");

var _printString = __webpack_require__(/*! ./printString.js */ "./node_modules/graphql/language/printString.js");

var _visitor = __webpack_require__(/*! ./visitor.js */ "./node_modules/graphql/language/visitor.js");

/**
 * Converts an AST into a string, using one set of reasonable
 * formatting rules.
 */
function print(ast) {
  return (0, _visitor.visit)(ast, printDocASTReducer);
}

const MAX_LINE_LENGTH = 80;
const printDocASTReducer = {
  Name: {
    leave: (node) => node.value,
  },
  Variable: {
    leave: (node) => '$' + node.name,
  },
  // Document
  Document: {
    leave: (node) => join(node.definitions, '\n\n'),
  },
  OperationDefinition: {
    leave(node) {
      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
      const prefix = join(
        [
          node.operation,
          join([node.name, varDefs]),
          join(node.directives, ' '),
        ],
        ' ',
      ); // Anonymous queries with no directives or variable definitions can use
      // the query short form.

      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;
    },
  },
  VariableDefinition: {
    leave: ({ variable, type, defaultValue, directives }) =>
      variable +
      ': ' +
      type +
      wrap(' = ', defaultValue) +
      wrap(' ', join(directives, ' ')),
  },
  SelectionSet: {
    leave: ({ selections }) => block(selections),
  },
  Field: {
    leave({ alias, name, arguments: args, directives, selectionSet }) {
      const prefix = wrap('', alias, ': ') + name;
      let argsLine = prefix + wrap('(', join(args, ', '), ')');

      if (argsLine.length > MAX_LINE_LENGTH) {
        argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
      }

      return join([argsLine, join(directives, ' '), selectionSet], ' ');
    },
  },
  Argument: {
    leave: ({ name, value }) => name + ': ' + value,
  },
  // Fragments
  FragmentSpread: {
    leave: ({ name, directives }) =>
      '...' + name + wrap(' ', join(directives, ' ')),
  },
  InlineFragment: {
    leave: ({ typeCondition, directives, selectionSet }) =>
      join(
        [
          '...',
          wrap('on ', typeCondition),
          join(directives, ' '),
          selectionSet,
        ],
        ' ',
      ),
  },
  FragmentDefinition: {
    leave: (
      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed
    ) =>
      // or removed in the future.
      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +
      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +
      selectionSet,
  },
  // Value
  IntValue: {
    leave: ({ value }) => value,
  },
  FloatValue: {
    leave: ({ value }) => value,
  },
  StringValue: {
    leave: ({ value, block: isBlockString }) =>
      isBlockString
        ? (0, _blockString.printBlockString)(value)
        : (0, _printString.printString)(value),
  },
  BooleanValue: {
    leave: ({ value }) => (value ? 'true' : 'false'),
  },
  NullValue: {
    leave: () => 'null',
  },
  EnumValue: {
    leave: ({ value }) => value,
  },
  ListValue: {
    leave: ({ values }) => '[' + join(values, ', ') + ']',
  },
  ObjectValue: {
    leave: ({ fields }) => '{' + join(fields, ', ') + '}',
  },
  ObjectField: {
    leave: ({ name, value }) => name + ': ' + value,
  },
  // Directive
  Directive: {
    leave: ({ name, arguments: args }) =>
      '@' + name + wrap('(', join(args, ', '), ')'),
  },
  // Type
  NamedType: {
    leave: ({ name }) => name,
  },
  ListType: {
    leave: ({ type }) => '[' + type + ']',
  },
  NonNullType: {
    leave: ({ type }) => type + '!',
  },
  // Type System Definitions
  SchemaDefinition: {
    leave: ({ description, directives, operationTypes }) =>
      wrap('', description, '\n') +
      join(['schema', join(directives, ' '), block(operationTypes)], ' '),
  },
  OperationTypeDefinition: {
    leave: ({ operation, type }) => operation + ': ' + type,
  },
  ScalarTypeDefinition: {
    leave: ({ description, name, directives }) =>
      wrap('', description, '\n') +
      join(['scalar', name, join(directives, ' ')], ' '),
  },
  ObjectTypeDefinition: {
    leave: ({ description, name, interfaces, directives, fields }) =>
      wrap('', description, '\n') +
      join(
        [
          'type',
          name,
          wrap('implements ', join(interfaces, ' & ')),
          join(directives, ' '),
          block(fields),
        ],
        ' ',
      ),
  },
  FieldDefinition: {
    leave: ({ description, name, arguments: args, type, directives }) =>
      wrap('', description, '\n') +
      name +
      (hasMultilineItems(args)
        ? wrap('(\n', indent(join(args, '\n')), '\n)')
        : wrap('(', join(args, ', '), ')')) +
      ': ' +
      type +
      wrap(' ', join(directives, ' ')),
  },
  InputValueDefinition: {
    leave: ({ description, name, type, defaultValue, directives }) =>
      wrap('', description, '\n') +
      join(
        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],
        ' ',
      ),
  },
  InterfaceTypeDefinition: {
    leave: ({ description, name, interfaces, directives, fields }) =>
      wrap('', description, '\n') +
      join(
        [
          'interface',
          name,
          wrap('implements ', join(interfaces, ' & ')),
          join(directives, ' '),
          block(fields),
        ],
        ' ',
      ),
  },
  UnionTypeDefinition: {
    leave: ({ description, name, directives, types }) =>
      wrap('', description, '\n') +
      join(
        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],
        ' ',
      ),
  },
  EnumTypeDefinition: {
    leave: ({ description, name, directives, values }) =>
      wrap('', description, '\n') +
      join(['enum', name, join(directives, ' '), block(values)], ' '),
  },
  EnumValueDefinition: {
    leave: ({ description, name, directives }) =>
      wrap('', description, '\n') + join([name, join(directives, ' ')], ' '),
  },
  InputObjectTypeDefinition: {
    leave: ({ description, name, directives, fields }) =>
      wrap('', description, '\n') +
      join(['input', name, join(directives, ' '), block(fields)], ' '),
  },
  DirectiveDefinition: {
    leave: ({ description, name, arguments: args, repeatable, locations }) =>
      wrap('', description, '\n') +
      'directive @' +
      name +
      (hasMultilineItems(args)
        ? wrap('(\n', indent(join(args, '\n')), '\n)')
        : wrap('(', join(args, ', '), ')')) +
      (repeatable ? ' repeatable' : '') +
      ' on ' +
      join(locations, ' | '),
  },
  SchemaExtension: {
    leave: ({ directives, operationTypes }) =>
      join(
        ['extend schema', join(directives, ' '), block(operationTypes)],
        ' ',
      ),
  },
  ScalarTypeExtension: {
    leave: ({ name, directives }) =>
      join(['extend scalar', name, join(directives, ' ')], ' '),
  },
  ObjectTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) =>
      join(
        [
          'extend type',
          name,
          wrap('implements ', join(interfaces, ' & ')),
          join(directives, ' '),
          block(fields),
        ],
        ' ',
      ),
  },
  InterfaceTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) =>
      join(
        [
          'extend interface',
          name,
          wrap('implements ', join(interfaces, ' & ')),
          join(directives, ' '),
          block(fields),
        ],
        ' ',
      ),
  },
  UnionTypeExtension: {
    leave: ({ name, directives, types }) =>
      join(
        [
          'extend union',
          name,
          join(directives, ' '),
          wrap('= ', join(types, ' | ')),
        ],
        ' ',
      ),
  },
  EnumTypeExtension: {
    leave: ({ name, directives, values }) =>
      join(['extend enum', name, join(directives, ' '), block(values)], ' '),
  },
  InputObjectTypeExtension: {
    leave: ({ name, directives, fields }) =>
      join(['extend input', name, join(directives, ' '), block(fields)], ' '),
  },
};
/**
 * Given maybeArray, print an empty string if it is null or empty, otherwise
 * print all items together separated by separator if provided
 */

function join(maybeArray, separator = '') {
  var _maybeArray$filter$jo;

  return (_maybeArray$filter$jo =
    maybeArray === null || maybeArray === void 0
      ? void 0
      : maybeArray.filter((x) => x).join(separator)) !== null &&
    _maybeArray$filter$jo !== void 0
    ? _maybeArray$filter$jo
    : '';
}
/**
 * Given array, print each item on its own line, wrapped in an indented `{ }` block.
 */

function block(array) {
  return wrap('{\n', indent(join(array, '\n')), '\n}');
}
/**
 * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
 */

function wrap(start, maybeString, end = '') {
  return maybeString != null && maybeString !== ''
    ? start + maybeString + end
    : '';
}

function indent(str) {
  return wrap('  ', str.replace(/\n/g, '\n  '));
}

function hasMultilineItems(maybeArray) {
  var _maybeArray$some;

  // FIXME: https://github.com/graphql/graphql-js/issues/2203

  /* c8 ignore next */
  return (_maybeArray$some =
    maybeArray === null || maybeArray === void 0
      ? void 0
      : maybeArray.some((str) => str.includes('\n'))) !== null &&
    _maybeArray$some !== void 0
    ? _maybeArray$some
    : false;
}


/***/ }),

/***/ "./node_modules/graphql/language/visitor.js":
/*!**************************************************!*\
  !*** ./node_modules/graphql/language/visitor.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true,
}));
exports.BREAK = void 0;
exports.getEnterLeaveForKind = getEnterLeaveForKind;
exports.getVisitFn = getVisitFn;
exports.visit = visit;
exports.visitInParallel = visitInParallel;

var _devAssert = __webpack_require__(/*! ../jsutils/devAssert.js */ "./node_modules/graphql/jsutils/devAssert.js");

var _inspect = __webpack_require__(/*! ../jsutils/inspect.js */ "./node_modules/graphql/jsutils/inspect.js");

var _ast = __webpack_require__(/*! ./ast.js */ "./node_modules/graphql/language/ast.js");

var _kinds = __webpack_require__(/*! ./kinds.js */ "./node_modules/graphql/language/kinds.js");

const BREAK = Object.freeze({});
/**
 * visit() will walk through an AST using a depth-first traversal, calling
 * the visitor's enter function at each node in the traversal, and calling the
 * leave function after visiting that node and all of its child nodes.
 *
 * By returning different values from the enter and leave functions, the
 * behavior of the visitor can be altered, including skipping over a sub-tree of
 * the AST (by returning false), editing the AST by returning a value or null
 * to remove the value, or to stop the whole traversal by returning BREAK.
 *
 * When using visit() to edit an AST, the original AST will not be modified, and
 * a new version of the AST with the changes applied will be returned from the
 * visit function.
 *
 * ```ts
 * const editedAST = visit(ast, {
 *   enter(node, key, parent, path, ancestors) {
 *     // @return
 *     //   undefined: no action
 *     //   false: skip visiting this node
 *     //   visitor.BREAK: stop visiting altogether
 *     //   null: delete this node
 *     //   any value: replace this node with the returned value
 *   },
 *   leave(node, key, parent, path, ancestors) {
 *     // @return
 *     //   undefined: no action
 *     //   false: no action
 *     //   visitor.BREAK: stop visiting altogether
 *     //   null: delete this node
 *     //   any value: replace this node with the returned value
 *   }
 * });
 * ```
 *
 * Alternatively to providing enter() and leave() functions, a visitor can
 * instead provide functions named the same as the kinds of AST nodes, or
 * enter/leave visitors at a named key, leading to three permutations of the
 * visitor API:
 *
 * 1) Named visitors triggered when entering a node of a specific kind.
 *
 * ```ts
 * visit(ast, {
 *   Kind(node) {
 *     // enter the "Kind" node
 *   }
 * })
 * ```
 *
 * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.
 *
 * ```ts
 * visit(ast, {
 *   Kind: {
 *     enter(node) {
 *       // enter the "Kind" node
 *     }
 *     leave(node) {
 *       // leave the "Kind" node
 *     }
 *   }
 * })
 * ```
 *
 * 3) Generic visitors that trigger upon entering and leaving any node.
 *
 * ```ts
 * visit(ast, {
 *   enter(node) {
 *     // enter any node
 *   },
 *   leave(node) {
 *     // leave any node
 *   }
 * })
 * ```
 */

exports.BREAK = BREAK;

function visit(root, visitor, visitorKeys = _ast.QueryDocumentKeys) {
  const enterLeaveMap = new Map();

  for (const kind of Object.values(_kinds.Kind)) {
    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
  }
  /* eslint-disable no-undef-init */

  let stack = undefined;
  let inArray = Array.isArray(root);
  let keys = [root];
  let index = -1;
  let edits = [];
  let node = root;
  let key = undefined;
  let parent = undefined;
  const path = [];
  const ancestors = [];
  /* eslint-enable no-undef-init */

  do {
    index++;
    const isLeaving = index === keys.length;
    const isEdited = isLeaving && edits.length !== 0;

    if (isLeaving) {
      key = ancestors.length === 0 ? undefined : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();

      if (isEdited) {
        if (inArray) {
          node = node.slice();
          let editOffset = 0;

          for (const [editKey, editValue] of edits) {
            const arrayKey = editKey - editOffset;

            if (editValue === null) {
              node.splice(arrayKey, 1);
              editOffset++;
            } else {
              node[arrayKey] = editValue;
            }
          }
        } else {
          node = Object.defineProperties(
            {},
            Object.getOwnPropertyDescriptors(node),
          );

          for (const [editKey, editValue] of edits) {
            node[editKey] = editValue;
          }
        }
      }

      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else if (parent) {
      key = inArray ? index : keys[index];
      node = parent[key];

      if (node === null || node === undefined) {
        continue;
      }

      path.push(key);
    }

    let result;

    if (!Array.isArray(node)) {
      var _enterLeaveMap$get, _enterLeaveMap$get2;

      (0, _ast.isNode)(node) ||
        (0, _devAssert.devAssert)(
          false,
          `Invalid AST Node: ${(0, _inspect.inspect)(node)}.`,
        );
      const visitFn = isLeaving
        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||
          _enterLeaveMap$get === void 0
          ? void 0
          : _enterLeaveMap$get.leave
        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||
          _enterLeaveMap$get2 === void 0
        ? void 0
        : _enterLeaveMap$get2.enter;
      result =
        visitFn === null || visitFn === void 0
          ? void 0
          : visitFn.call(visitor, node, key, parent, path, ancestors);

      if (result === BREAK) {
        break;
      }

      if (result === false) {
        if (!isLeaving) {
          path.pop();
          continue;
        }
      } else if (result !== undefined) {
        edits.push([key, result]);

        if (!isLeaving) {
          if ((0, _ast.isNode)(result)) {
            node = result;
          } else {
            path.pop();
            continue;
          }
        }
      }
    }

    if (result === undefined && isEdited) {
      edits.push([key, node]);
    }

    if (isLeaving) {
      path.pop();
    } else {
      var _node$kind;

      stack = {
        inArray,
        index,
        keys,
        edits,
        prev: stack,
      };
      inArray = Array.isArray(node);
      keys = inArray
        ? node
        : (_node$kind = visitorKeys[node.kind]) !== null &&
          _node$kind !== void 0
        ? _node$kind
        : [];
      index = -1;
      edits = [];

      if (parent) {
        ancestors.push(parent);
      }

      parent = node;
    }
  } while (stack !== undefined);

  if (edits.length !== 0) {
    // New root
    return edits[edits.length - 1][1];
  }

  return root;
}
/**
 * Creates a new visitor instance which delegates to many visitors to run in
 * parallel. Each visitor will be visited for each node before moving on.
 *
 * If a prior visitor edits a node, no following visitors will see that node.
 */

function visitInParallel(visitors) {
  const skipping = new Array(visitors.length).fill(null);
  const mergedVisitor = Object.create(null);

  for (const kind of Object.values(_kinds.Kind)) {
    let hasVisitor = false;
    const enterList = new Array(visitors.length).fill(undefined);
    const leaveList = new Array(visitors.length).fill(undefined);

    for (let i = 0; i < visitors.length; ++i) {
      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);
      hasVisitor || (hasVisitor = enter != null || leave != null);
      enterList[i] = enter;
      leaveList[i] = leave;
    }

    if (!hasVisitor) {
      continue;
    }

    const mergedEnterLeave = {
      enter(...args) {
        const node = args[0];

        for (let i = 0; i < visitors.length; i++) {
          if (skipping[i] === null) {
            var _enterList$i;

            const result =
              (_enterList$i = enterList[i]) === null || _enterList$i === void 0
                ? void 0
                : _enterList$i.apply(visitors[i], args);

            if (result === false) {
              skipping[i] = node;
            } else if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== undefined) {
              return result;
            }
          }
        }
      },

      leave(...args) {
        const node = args[0];

        for (let i = 0; i < visitors.length; i++) {
          if (skipping[i] === null) {
            var _leaveList$i;

            const result =
              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0
                ? void 0
                : _leaveList$i.apply(visitors[i], args);

            if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== undefined && result !== false) {
              return result;
            }
          } else if (skipping[i] === node) {
            skipping[i] = null;
          }
        }
      },
    };
    mergedVisitor[kind] = mergedEnterLeave;
  }

  return mergedVisitor;
}
/**
 * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.
 */

function getEnterLeaveForKind(visitor, kind) {
  const kindVisitor = visitor[kind];

  if (typeof kindVisitor === 'object') {
    // { Kind: { enter() {}, leave() {} } }
    return kindVisitor;
  } else if (typeof kindVisitor === 'function') {
    // { Kind() {} }
    return {
      enter: kindVisitor,
      leave: undefined,
    };
  } // { enter() {}, leave() {} }

  return {
    enter: visitor.enter,
    leave: visitor.leave,
  };
}
/**
 * Given a visitor instance, if it is leaving or not, and a node kind, return
 * the function the visitor runtime should call.
 *
 * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17
 */

/* c8 ignore next 8 */

function getVisitFn(visitor, kind, isLeaving) {
  const { enter, leave } = getEnterLeaveForKind(visitor, kind);
  return isLeaving ? leave : enter;
}


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "./src/browsers/src/env.ts":
/*!*********************************!*\
  !*** ./src/browsers/src/env.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.host = void 0;
exports.host = "https://gudangkomik.com/api" || 0;


/***/ }),

/***/ "./src/browsers/src/index.ts":
/*!***********************************!*\
  !*** ./src/browsers/src/index.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const komicastid_1 = __importDefault(__webpack_require__(/*! ./komicastid */ "./src/browsers/src/komicastid.ts"));
const komikcast_1 = __importDefault(__webpack_require__(/*! ./komikcast */ "./src/browsers/src/komikcast.ts"));
const manhwaindo_1 = __importDefault(__webpack_require__(/*! ./manhwaindo */ "./src/browsers/src/manhwaindo.ts"));
const manhwaland_1 = __importDefault(__webpack_require__(/*! ./manhwaland */ "./src/browsers/src/manhwaland.ts"));
const Logger_1 = __importDefault(__webpack_require__(/*! ../../modules/Logger */ "./src/modules/Logger.ts"));
const BunnyCDN_1 = __importDefault(__webpack_require__(/*! ../../modules/BunnyCDN */ "./src/modules/BunnyCDN.ts"));
main();
async function main() {
    console.log(`main called document state ${document.readyState}`);
    if (document.readyState === "interactive" ||
        document.readyState === "complete") {
        const declarations = [
            new manhwaindo_1.default(),
            new manhwaland_1.default(),
            new komicastid_1.default(),
            new komikcast_1.default(),
        ];
        for (const x of declarations) {
            try {
                x.run();
            }
            catch (error) {
                console.error(error);
            }
        }
        const chan = new BroadcastChannel("gudangkomik");
        const logger = new Logger_1.default();
        const bunny = new BunnyCDN_1.default();
        chan.onmessage = async ({ data }) => {
            console.log(`got command ${data.command} payload ${data.payload}`);
            const { path, url, file } = data.payload;
            switch (data.command) {
                case "downloadAndUpload":
                    await bunny.downloadAndUpload(url, path);
                    break;
                case "upload":
                    await bunny.upload(file, path);
                    break;
            }
            chan.postMessage({
                command: "done",
                payload: {
                    data: data.command,
                },
            });
        };
    }
}


/***/ }),

/***/ "./src/browsers/src/komicastid.ts":
/*!****************************************!*\
  !*** ./src/browsers/src/komicastid.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const lodash_1 = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
const scrapper_1 = __webpack_require__(/*! ./scrapper */ "./src/browsers/src/scrapper.ts");
const Helper_1 = __webpack_require__(/*! ../../modules/Helper */ "./src/modules/Helper.ts");
class Komicastid extends scrapper_1.Scrapper {
    getPageRangeUrl(x) {
        const rets = [];
        for (let index = 1; index <= x; index++) {
            rets.push(`https://komikcastid.com/komik-terbaru/page/${index}/`);
        }
        return rets;
    }
    getDeclaration() {
        return {
            name: "KomikcastID",
            url: ["https://komikcastid.com/komik-terbaru/"],
        };
    }
    getUpdates() {
        const links = new Set();
        document.querySelectorAll("a").forEach((e) => {
            const link = e.getAttribute("href");
            if (link && link.includes("https://komikcastid.com/komik/")) {
                links.add(link);
            }
        });
        const values = Array.from(links);
        return values;
    }
    parseComic(doc) {
        const title = doc?.querySelector("h1")?.textContent?.replace("Komik ", "")?.trim();
        const infos = doc?.querySelector(".spe")?.querySelectorAll("span");
        const thumb = doc?.querySelector(".thumb")?.querySelector("img")?.getAttribute("src") ?? "";
        const alt_title = infos && infos[0]?.textContent?.replace("Judul Alternatif: ", "").split(",");
        const genres = Array.from(doc?.querySelector(".genre-info")?.querySelectorAll("a") ?? []).map((e) => e.textContent ?? "");
        const info = Array.from(infos ?? []).reduce((e, c) => {
            const text = c?.textContent?.split(":");
            if (!text)
                return e;
            return {
                ...e,
                [text[0].trim().toLowerCase()]: text[1].trim(),
            };
        }, {});
        let chapters = [];
        doc?.querySelector("#chapter_list")?.querySelector("ul")?.querySelectorAll("li")?.forEach((x) => {
            const e = x.querySelector(".lchx");
            if (!e)
                return;
            const href = e.querySelector("a")?.getAttribute("href");
            if (!e.textContent || !href)
                return;
            const name = this.chapterGuesser(e.textContent);
            chapters.push({
                href,
                name,
            });
        });
        chapters = (0, lodash_1.uniq)([...chapters]);
        if (!title) {
            throw new Error("title not found");
        }
        const comic = {
            ...info,
            thumb,
            name: title,
            alt_name: alt_title ?? [],
            description: doc?.querySelector(".kshortcsc, .sht2")?.textContent ?? "",
            genres: genres ?? [],
            chapters,
            slug: (0, Helper_1.slugify)(title),
        };
        return comic;
    }
    parseChapter(doc) {
        const imgDom = Array.from(doc?.querySelector("#chimg")?.querySelectorAll("img") ?? []);
        const images = Array.from(imgDom.map((e) => e.getAttribute("src") ?? ""));
        const title = doc?.querySelector("h1")?.textContent ?? "";
        const name = this.chapterGuesser(title);
        return {
            name,
            image_count: images.length,
            original_image_count: images.length,
            images,
            processed: true,
            quality: this.checkQuality(title)
        };
    }
    constructor() {
        super();
    }
}
exports["default"] = Komicastid;


/***/ }),

/***/ "./src/browsers/src/komikcast.ts":
/*!***************************************!*\
  !*** ./src/browsers/src/komikcast.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const lodash_1 = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
const scrapper_1 = __webpack_require__(/*! ./scrapper */ "./src/browsers/src/scrapper.ts");
const Helper_1 = __webpack_require__(/*! ../../modules/Helper */ "./src/modules/Helper.ts");
class Komicast extends scrapper_1.Scrapper {
    getPageRangeUrl(x) {
        const rets = [];
        for (let index = 1; index <= x; index++) {
            rets.push(`https://komikcast.me/daftar-komik/page/${index}/?sortby=update`);
        }
        return rets;
    }
    getDeclaration() {
        return {
            name: "Komikcast",
            url: ["https://komikcast.me/", "https://komikcast.me/daftar-komik/?list"],
        };
    }
    getUpdates() {
        const links = new Set();
        document.querySelectorAll("a").forEach((e) => {
            const link = e.getAttribute("href");
            if (link && link.includes("https://komikcast.me/komik/")) {
                links.add(link);
            }
        });
        const values = Array.from(links);
        return values;
    }
    parseComic(doc) {
        const title = doc
            ?.querySelector("h1")
            ?.textContent?.replace(" Bahasa Indonesia", "")
            ?.trim();
        const thumb = doc
            ?.querySelector(".komik_info-content-thumbnail-image ,wp-post-image")
            ?.getAttribute("src") ?? "";
        const alt_title = doc
            ?.querySelector(".komik_info-content-native")
            ?.textContent?.split(",");
        const genres = Array.from(doc?.querySelector(".komik_info-content-genre")?.querySelectorAll("a") ??
            []).map((e) => e.textContent ?? "");
        const spans = Array.from(doc
            ?.querySelector(".komik_info-content-meta")
            ?.querySelectorAll("span") ?? []);
        const info = spans.reduce((e, c) => {
            const text = c?.textContent?.split(":");
            if (!text)
                return e;
            return {
                ...e,
                thumb,
                [text[0].trim().toLowerCase()]: text[1].trim(),
            };
        }, {});
        let chapters = [];
        let hqChapters = [];
        for (const e of Array.from(doc?.querySelectorAll("a")) ?? []) {
            const href = e.getAttribute("href");
            if (!href)
                continue;
            if (!href.includes("https://komikcast.me/chapter/"))
                continue;
            const text = e.textContent ?? "";
            const name = this.chapterGuesser(text);
            if (text.includes("HQ"))
                hqChapters.push({
                    name,
                    href,
                });
        }
        let hqChaptersStringMap = hqChapters.map((e) => e.name);
        if (hqChaptersStringMap.length > 0) {
            console.log(`found ${hqChaptersStringMap.length} HQ Chapter ${title}`);
        }
        for (const e of Array.from(doc?.querySelectorAll("a")) ?? []) {
            const href = e.getAttribute("href");
            if (!href)
                continue;
            if (!href.includes("https://komikcast.me/chapter/"))
                continue;
            const text = e.textContent ?? "";
            const name = this.chapterGuesser(text);
            if (!hqChaptersStringMap.includes(name))
                chapters.push({
                    name,
                    href,
                });
        }
        chapters = (0, lodash_1.uniq)([...chapters, ...hqChapters]);
        if (!title) {
            throw new Error("title not found");
        }
        const comic = {
            ...info,
            name: title,
            alt_name: alt_title ?? [],
            description: doc?.querySelector(".komik_info-description-sinopsis")?.textContent ??
                "",
            genres: genres ?? [],
            chapters,
            slug: (0, Helper_1.slugify)(title),
        };
        return comic;
    }
    parseChapter(doc) {
        const imgDom = Array.from(doc?.querySelector(".main-reading-area")?.querySelectorAll("img") ?? []);
        const images = Array.from(imgDom
            .map((e) => e.getAttribute("src") ?? "")
            ?.map((e) => e.includes("https://cdn.komikcast.com") ?
            e.replace("https://", "https://cdn.imagesimple.co/img/kcast/") : e));
        const title = doc?.querySelector("h1")?.textContent ?? "";
        const name = this.chapterGuesser(title);
        console.log(imgDom);
        console.log(images);
        return {
            name,
            image_count: images.length,
            original_image_count: images.length,
            images,
            processed: true,
            quality: this.checkQuality(title),
        };
    }
    constructor() {
        super();
    }
}
exports["default"] = Komicast;


/***/ }),

/***/ "./src/browsers/src/manhwaindo.ts":
/*!****************************************!*\
  !*** ./src/browsers/src/manhwaindo.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const lodash_1 = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
const scrapper_1 = __webpack_require__(/*! ./scrapper */ "./src/browsers/src/scrapper.ts");
const Helper_1 = __webpack_require__(/*! ../../modules/Helper */ "./src/modules/Helper.ts");
// SAME TEMPLATE AS MANHWAINDO
const IGNORE = "imagesimple.co/img/manhwaindo/";
class Manhwaindo extends scrapper_1.Scrapper {
    getPageRangeUrl(x) {
        const rets = [];
        for (let index = 1; index <= x; index++) {
            rets.push(`https://manhwaindo.id/series/?page=${index}&order=update`);
        }
        return rets;
    }
    getDeclaration() {
        return {
            name: "Manhwaindo",
            url: [
                "https://manhwaindo.id/",
                "https://manhwaindo.id/series/list-mode/",
            ],
            annoying: true,
        };
    }
    getUpdates() {
        const links = new Set();
        document.querySelectorAll("a").forEach((e) => {
            const link = e.getAttribute("href");
            if (link &&
                link.includes("https://manhwaindo.id/series/") &&
                link !== "https://manhwaindo.id/series/list-mode/") {
                links.add(link);
            }
        });
        const values = Array.from(links);
        return values;
    }
    parseComic(doc) {
        const title = doc
            ?.querySelector("h1")
            ?.textContent?.replace("Komik ", "")
            ?.trim();
        const thumb = doc
            ?.querySelector(".thumb")
            ?.querySelector("img")
            ?.getAttribute("src")
            ?.replace(IGNORE, "") ?? "";
        const alt_title = doc
            ?.querySelector("span, .alternative")
            ?.textContent?.split(",");
        const genres = Array.from(doc?.querySelector(".mgen")?.querySelectorAll("a") ?? [])?.map((e) => e.textContent ?? "");
        const spans = Array.from(doc?.querySelector(".bixbox")?.querySelectorAll(".imptdt") ?? [])?.map((e) => e?.textContent?.trim());
        const info = spans?.reduce((e, c) => {
            const text = c?.split(" ");
            if (!text)
                return e;
            return {
                ...e,
                [text[0].trim().toLowerCase()]: text[1].trim(),
            };
        }, {});
        if (!info.author)
            info.author = "N/A";
        let chapters = [];
        doc
            ?.querySelector("#chapterlist")
            ?.querySelectorAll("a")
            ?.forEach((e) => {
            const href = e.getAttribute("href");
            if (!e.textContent)
                return;
            if (href?.includes("chapter"))
                chapters.push({
                    name: this.chapterGuesser(e?.textContent),
                    href,
                });
        });
        chapters = (0, lodash_1.uniq)(chapters);
        if (!title) {
            throw new Error("title not found");
        }
        const comic = {
            ...info,
            thumb,
            name: title,
            alt_name: alt_title ?? [],
            description: doc?.querySelector(".entry-content-single")?.textContent ?? "",
            genres: genres ?? [],
            chapters,
            slug: (0, Helper_1.slugify)(title),
        };
        return comic;
    }
    parseChapter(doc) {
        const imgDom = Array.from(doc?.querySelectorAll("img") ?? []);
        const images = Array.from(imgDom.map((e) => e.getAttribute("src")?.replace("img.statically.io/img/manhwaindo/", "")?.replace(IGNORE, "") ?? ""));
        const title = doc?.querySelector("h1")?.textContent ?? "";
        const name = this.chapterGuesser(title);
        return {
            name,
            image_count: images.length,
            original_image_count: images.length,
            images,
            processed: true,
            quality: this.checkQuality(title),
        };
    }
    constructor() {
        super();
    }
}
exports["default"] = Manhwaindo;


/***/ }),

/***/ "./src/browsers/src/manhwaland.ts":
/*!****************************************!*\
  !*** ./src/browsers/src/manhwaland.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const lodash_1 = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
const scrapper_1 = __webpack_require__(/*! ./scrapper */ "./src/browsers/src/scrapper.ts");
const Helper_1 = __webpack_require__(/*! ../../modules/Helper */ "./src/modules/Helper.ts");
// SAME TEMPLATE AS MANHWAINDO
class Manhwaland extends scrapper_1.Scrapper {
    getPageRangeUrl(x) {
        const rets = [];
        for (let index = 1; index <= x; index++) {
            rets.push(`https://manhwaland.mom/series/?page=${index}&order=update`);
        }
        return rets;
    }
    getDeclaration() {
        return {
            name: "Manhwaland",
            url: [
                "https://manhwaland.mom/",
                "https://manhwaland.mom/series/list-mode/",
            ],
            annoying: true,
        };
    }
    getUpdates() {
        const links = new Set();
        document.querySelectorAll("a").forEach((e) => {
            const link = e.getAttribute("href");
            if (link &&
                link.includes("https://manhwaland.mom/series/") &&
                link !== "https://manhwaland.mom/series/list-mode/") {
                links.add(link);
            }
        });
        const values = Array.from(links);
        return values;
    }
    parseComic(doc) {
        const title = doc
            ?.querySelector("h1")
            ?.textContent?.replace("Manhwa ", "")
            ?.trim();
        const thumb = doc?.querySelector(".thumb")?.querySelector("img")?.getAttribute("src") ??
            "";
        const alt_title = doc
            ?.querySelector("span, .alternative")
            ?.textContent?.split(",");
        const genres = Array.from(doc?.querySelector(".mgen")?.querySelectorAll("a") ?? [])?.map((e) => e.textContent ?? "");
        const spans = Array.from(doc?.querySelectorAll(".imptdt") ?? [])?.map((e) => e?.textContent?.trim());
        const info = spans?.reduce((e, c) => {
            const text = c?.split(" ");
            if (!text)
                return e;
            return {
                ...e,
                [text[0].trim().toLowerCase()]: text[1].trim(),
            };
        }, {});
        if (!info.author)
            info.author = "N/A";
        let chapters = [];
        doc
            ?.querySelector("#chapterlist")
            ?.querySelectorAll("a")
            ?.forEach((e) => {
            const href = e.getAttribute("href");
            if (!e.textContent)
                return;
            if (href?.includes("chapter"))
                chapters.push({
                    name: this.chapterGuesser(e?.textContent),
                    href,
                });
        });
        chapters = (0, lodash_1.uniq)(chapters);
        if (!title) {
            throw new Error("title not found");
        }
        const comic = {
            ...info,
            thumb,
            name: title,
            alt_name: alt_title ?? [],
            description: doc?.querySelector(".entry-content-single")?.textContent ?? "",
            genres: genres ?? [],
            chapters,
            slug: (0, Helper_1.slugify)(title),
            isHentai: true,
        };
        return comic;
    }
    parseChapter(doc) {
        const imgDom = Array.from(doc?.querySelectorAll("img") ?? []);
        const images = Array.from(imgDom.map((e) => e
            .getAttribute("src")
            ?.replace("img.statically.io/img/manhwaindo/", "") ?? ""));
        const title = doc?.querySelector("h1")?.textContent ?? "";
        const name = this.chapterGuesser(title);
        return {
            name,
            image_count: images.length,
            original_image_count: images.length,
            images,
            processed: true,
            quality: this.checkQuality(title),
        };
    }
    constructor() {
        super();
    }
}
exports["default"] = Manhwaland;


/***/ }),

/***/ "./src/browsers/src/scrapper.ts":
/*!**************************************!*\
  !*** ./src/browsers/src/scrapper.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Scrapper = void 0;
const axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/index.js"));
const BunnyCDN_1 = __importDefault(__webpack_require__(/*! ../../modules/BunnyCDN */ "./src/modules/BunnyCDN.ts"));
const gkInteractor_1 = __webpack_require__(/*! ../../modules/gkInteractor */ "./src/modules/gkInteractor.ts");
const Logger_1 = __importDefault(__webpack_require__(/*! ../../modules/Logger */ "./src/modules/Logger.ts"));
const Helper_1 = __webpack_require__(/*! ../../modules/Helper */ "./src/modules/Helper.ts");
// import { DOSpaces } from "../../modules/DOSpaces";
const kc_all_1 = __importDefault(__webpack_require__(/*! ../../scrappers/kc-all */ "./src/scrappers/kc-all.ts"));
const async_1 = __webpack_require__(/*! async */ "./node_modules/async/dist/async.mjs");
class Scrapper {
    constructor() {
        this.extExtractor = (url) => url.split(".")[url.split(".").length - 1];
        this.removeReq = async (link) => await axios_1.default.post("https://gudangkomik.com/api/special-remove", {
            special: link,
        });
        this._bunny = new BunnyCDN_1.default({
            // downloadResponseType: "blob",
            log: true,
        });
        this._axios = axios_1.default.create();
        this._logger = new Logger_1.default();
        // this._axios.interceptors.response.use((e) => {
        //     this._logger.error(`SCRAPPER Error : 📁 ${e.config.url}, ${e.status} , ${e.statusText} `)
        // })
    }
    async getDOM(url) {
        try {
            return await (await this._axios.get(url)).data;
        }
        catch (error) {
            console.log(error);
            throw error;
        }
    }
    async getComic(url) {
        try {
            return this.parseComic(new DOMParser().parseFromString(await (await this._axios.get(url)).data, "text/html"));
        }
        catch (error) {
            console.log(error);
            throw error;
        }
    }
    async getChapter(url, annoying = false) {
        try {
            const text = await (await this._axios.get(url)).data;
            let dom;
            if (annoying) {
                dom = new DOMParser().parseFromString(text, "text/html");
                const href = dom
                    ?.querySelector("link[rel='alternate'][type='application/json']")
                    ?.getAttribute("href") ?? "";
                const jsonHtml = await (await axios_1.default.get(href)).data;
                dom = new DOMParser().parseFromString(`
                <h1>${jsonHtml.title.rendered}</h1>
                ${jsonHtml.content.rendered}`, "text/html");
            }
            else {
                dom = new DOMParser().parseFromString(`${text}`, "text/html");
            }
            return this.parseChapter(dom);
        }
        catch (error) {
            console.log(error);
            throw error;
        }
    }
    commitCommic(comic, chapters) {
        return gkInteractor_1.gkInteractor.sanityCheck(comic, chapters);
    }
    createImagePath(slug, chapIndex, imgIndex, ext) {
        return `/${slug}/${chapIndex}/${imgIndex}.${ext}`;
    }
    async downloadsImages(urls) {
        const results = [];
        await (0, async_1.mapLimit)(urls, 10, async (x, d) => {
            await this._bunny.downloadAndUpload(x.url, x.path);
            results.push(x.path);
        });
        return results;
    }
    chapterGuesser(e) {
        const splits = e.split(" ");
        let idx = 0;
        try {
            for (const x of splits) {
                if (x.toLocaleLowerCase() == "chapter") {
                    const name = parseFloat(splits[idx + 1]);
                    if (isNaN(name)) {
                        // throw new Error(`nan Detected ${e}`)
                        throw Error(`nan Detected ${e}`);
                    }
                    return name;
                }
                idx++;
            }
        }
        catch (error) {
            for (const x of splits) {
                const name = parseFloat(x);
                if (isNaN(name))
                    continue;
                return name;
            }
        }
        throw new Error(`Chapter name cant be guessed ${e}`);
    }
    checkQuality(e) {
        const t = e.toLowerCase();
        for (const x of t.split(" ")) {
            switch (x) {
                case "hq":
                    return 2;
                case "lq":
                    return 1;
            }
        }
        return 0;
    }
    async run() {
        // check gudang can be accessed
        // try {
        //     await axios.get("http://localhost:4000")
        // } catch (error) {
        //     this._logger.warn('cant access gudangkomik ! is v2 activated ?')
        //     return;
        // }
        const decl = this.getDeclaration();
        const prefix = `[${decl.name}]`;
        console.log(location.href);
        if (!decl.url.includes(location.href)) {
            return;
        }
        else {
            this._logger.info(`match ${location.href} ${decl.url}`);
        }
        this._logger.info(`${prefix} fetching ignores and specials`);
        // const ignores: string[] = await (
        //     await axios.get("https://gudangkomik.com/api/ignore")
        // ).data.ignore;
        // const specials: string[] = await (
        //     await axios.get("https://gudangkomik.com/api/special")
        // ).data.special.filter((x: string) => (x.includes(decl.name)));
        const specials = [];
        const ignores = [];
        this._logger.info(`${prefix} finish ignores and specials`);
        try {
        }
        catch (error) {
            console.log(error);
            throw error;
        }
        const xd = [];
        for (const e of this.getPageRangeUrl(1)) {
            console.log(e);
            for (const up of this.getUpdates(new DOMParser().parseFromString(await (await axios_1.default.get(e)).data, "text/html"))) {
                xd.push(up);
            }
        }
        const urls = [
            ...new Set([...specials, ...this.getUpdates(document)]),
            ...xd,
            ...kc_all_1.default,
        ];
        // const urls = [];
        // for (let index = 0; index < Math.floor(urls1.length / 3); index++) {
        // const element = urls1[index];
        //
        // urls.push(element)
        //
        // }
        let outer = 1;
        const chaptersBatchJobs = [];
        const ignoresS = [
            "https://komikcast.me/komik/megami-no-kafeterasu-goddess-cafe-terrace/",
        ];
        for (const x of urls) {
        }
        await (0, async_1.mapLimit)(urls, 30, async (x, d) => {
            if (ignores.includes(x))
                return;
            try {
                if ([...ignoresS, ...ignores].includes(x)) {
                    this._logger.info(`${prefix} logger ignores ${x}`);
                }
                const comic = await this.getComic(x);
                const comPrefix = `[${outer}/${urls.length}][${comic.name}] `;
                // check
                // this._logger.info(`${prefix}${comPrefix} checking chapter`);
                const { chapterscandidate, status, chaptersList } = await gkInteractor_1.gkInteractor.sanityCheck(comic, comic.chapters);
                if (status == "new") {
                    try {
                        const { thumb, slug } = comic;
                        this._bunny.downloadAndUpload(thumb, `/${slug}/thumb.jpg`);
                        // if (thumbWide) {
                        //     bunny.downloadAndUpload(thumbWide, `/${slug}/thumbWide.jpg`);
                        // }
                    }
                    catch (error) {
                        console.log("cannot donwload thumb, posibly v2 interfering");
                        comic.thumb = "https://cdn3.gudangkomik.com/fallback.jpg";
                    }
                }
                if (!comic.type) {
                    comic.type = "N/A";
                }
                if (chapterscandidate.length != 0) {
                    this._logger.info(`${prefix}${comPrefix} found ${chapterscandidate.length} new chapters that is ${chapterscandidate
                        .map((x) => x.name)
                        .join(", ")}`);
                }
                else {
                    this._logger.info(`${prefix}${comPrefix} no new chapter`);
                }
                for (const x of chapterscandidate) {
                    chaptersBatchJobs.push({
                        comic: { ...comic, chaptersList },
                        chapter: x,
                    });
                }
                // this.removeReq(x)
            }
            catch (error) {
                console.error(error);
            }
            outer++;
        });
        this._logger.info(`${prefix} fetching chapters`);
        const total = chaptersBatchJobs.length;
        let chapIdx = 0;
        const chaptersExistMap = new Map();
        for (const { chapter: x, comic } of chaptersBatchJobs) {
        }
        await (0, async_1.mapLimit)(chaptersBatchJobs, 20, async ({ chapter: x, comic }, d) => {
            try {
                const chapterExist = chaptersExistMap.get(comic.slug);
                if (!chapterExist)
                    chaptersExistMap.set(comic.slug, []);
                const chapter = await this.getChapter(x.href, decl.annoying);
                console.log(`sanity-check ${x.name} ${chapter.name}`);
                // if (x.name != chapter.name) {
                //     if (comic.chaptersList.includes(chapter.name) || comic.chaptersList.includes(x.name)) {
                //         this._logger.warn(`${prefix} ${comic.slug} chapter name mismatch ${x.name} ${chapter.name} already exists skipping ...`)
                //         chapIdx++;
                //         continue
                //     }
                //     chapterExist?.push(`${comic.slug}-${chapter.name}`)
                //     chapterExist?.push(`${comic.slug}-${x.name}`)
                // } else {
                //     chapterExist?.push(`${comic.slug}-${chapter.name}`)
                // }
                if (chapterExist &&
                    chapterExist.includes(`${comic.slug}-${chapter.name}`)) {
                    this._logger.warn(`${prefix} ${comic.slug} chapter name ${x.name} ${chapter.name} already scrapped skipping ...`);
                    chapIdx++;
                    return;
                }
                this._logger.info(`${prefix} ${comic.slug} [${chapIdx}/${total}] downloading chapter ${chapter.name}`);
                const downloadeds = await this.downloadsImages(chapter.images.map((e, i) => {
                    return {
                        path: this.createImagePath(comic.slug ?? (0, Helper_1.slugify)(comic.name), chapter.name, i, this.extExtractor(e)),
                        url: e,
                    };
                }));
                //@ts-ignore
                chapter.imageUrls = downloadeds;
                //@ts-ignore
                chapter.imageUrls = chapter.imageUrls.map((e) => `https://cdn3.gudangkomik.com${e}`);
                if (downloadeds.length == chapter.images.length) {
                    await gkInteractor_1.gkInteractor.sanityEclipse(comic.name, chapter);
                    chapIdx++;
                }
                else {
                    this._logger.info(`${prefix} ${comic.slug} [${chapIdx}/${total}] failed downloading chapter ${chapter.name} [number not match]`);
                }
            }
            catch (error) {
                console.log(`error ${comic.name} ${x} ${error}`);
            }
        });
        this._logger.info("[GK] done");
    }
}
exports.Scrapper = Scrapper;


/***/ }),

/***/ "./src/modules/BunnyCDN.ts":
/*!*********************************!*\
  !*** ./src/modules/BunnyCDN.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/index.js"));
const Logger_1 = __importDefault(__webpack_require__(/*! ./Logger */ "./src/modules/Logger.ts"));
const logger = new Logger_1.default();
class BunnyCDN {
    constructor(init) {
        this.start = new Date();
        this.end = new Date();
        const { log, axiosDefault } = init || {};
        this.log = log || false;
        // this.axios.interceptors.response.use((e) => {
        //     logger.error(`SCRAPPER Error : 📁 ${e.config.url}, ${e.status} , ${e.statusText} `)
        // });
        const headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36",
            AccessKey: "77948c15-c80a-4cbb-8e6a810c693b-6889-47f6",
            "Content-Type": "application/octet-stream",
        };
        this.axiosDown = axios_1.default.create({
            ...axiosDefault,
            headers
        });
        this.axiosUp = axios_1.default.create({
            headers
        });
        this.axiosDown.get("https://api.myip.com").then((e) => console.log(e.data));
    }
    _time() {
        this.start = new Date();
    }
    _end() {
        this.end = new Date();
    }
    getElapsed() {
        this._end();
        return this.end.getTime() - this.start.getTime();
    }
    filenameGueser(url) {
        return url.substring(url.lastIndexOf("/") + 1);
    }
    async download(url) {
        const y = await this.axiosDown.get(url, {
            responseType: "arraybuffer",
        });
        return y.data;
    }
    async upload(file, path) {
        this._time();
        try {
            const tobeSaved = `https://sg.storage.bunnycdn.com/komikgudang${path}`;
            const tobePurged = `https://cdn3.gudangkomik.com${path}`;
            const res = await this.axiosUp.put(tobeSaved, file);
            return await res.data;
        }
        catch (error) {
            console.log(`${path} error upload ${error} `);
            throw error;
        }
    }
    async downloadAndUpload(url, path, pipe) {
        this._time();
        try {
            const file = await this.download(url);
            this._end();
            const downloadElapsed = this.getElapsed();
            this._time();
            const result = await this.upload(pipe ? await pipe(file) : file, path);
            this._end();
            this.log && console.log(`[BUNNYCDN] 📁 Download ${pipe ? "And Pipe" : ""} finish at ${downloadElapsed} & Uploaded finish at ${this.getElapsed()} https://cdn3.gudangkomik.com${path}`);
            return result;
        }
        catch (error) {
            console.log(`[BUNNYCDN] 📁 [Error] Download ${url} and Uploading https://cdn3.gudangkomik.com${path}`);
            throw error;
        }
    }
    getAxios() {
        return this.axiosDown;
    }
}
exports["default"] = BunnyCDN;


/***/ }),

/***/ "./src/modules/Env.ts":
/*!****************************!*\
  !*** ./src/modules/Env.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// if (process.env.WEBPACK != "true") {
//   require("dotenv").config();
// }
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.APP_ENDPOINT = void 0;
exports.APP_ENDPOINT = "http://localhost:4000/graphql";


/***/ }),

/***/ "./src/modules/Helper.ts":
/*!*******************************!*\
  !*** ./src/modules/Helper.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.slugify = void 0;
const slugify = (title, separator = "-") => {
    // Convert all dashes/underscores into separator
    let flip = separator == "-" ? "_" : "-";
    title = title.replace(flip, separator);
    // Remove all characters that are not the separator, letters, numbers, or whitespace.
    title = title
        .toLowerCase()
        .replace(new RegExp("[^a-z0-9" + separator + "\\s]", "g"), "");
    // Replace all separator characters and whitespace by a single separator
    title = title.replace(new RegExp("[" + separator + "\\s]+", "g"), separator);
    return title.replace(new RegExp("^[" + separator + "\\s]+|[" + separator + "\\s]+$", "g"), "");
};
exports.slugify = slugify;


/***/ }),

/***/ "./src/modules/Key.ts":
/*!****************************!*\
  !*** ./src/modules/Key.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SPACES_SECRET = exports.SPACES_MAIN_KEY = exports.SECRET_KEY = void 0;
exports.SECRET_KEY = "lil bit sus isn't it";
exports.SPACES_MAIN_KEY = "WP2PYB7GSTPWMI4GTTNE";
exports.SPACES_SECRET = "CHeuWOW2Suq+tKz3v4hWtDvZnTtRB+RwSPewScjpg7Q";


/***/ }),

/***/ "./src/modules/Logger.ts":
/*!*******************************!*\
  !*** ./src/modules/Logger.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
class Logger {
    constructor(prefix) {
    }
    info(msg) {
        console.log(`[INFO] ${msg}`);
    }
    log(msg) {
        console.log(`[LOG] ${msg}`);
    }
    error(msg) {
        console.log(`[ERROR] ${msg}`);
    }
    warn(msg) {
        console.log(`[WARN] ${msg}`);
    }
}
exports["default"] = Logger;


/***/ }),

/***/ "./src/modules/gkInteractor.ts":
/*!*************************************!*\
  !*** ./src/modules/gkInteractor.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.gkInteractor = void 0;
const axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/index.js"));
const graphql_request_1 = __webpack_require__(/*! graphql-request */ "./node_modules/graphql-request/dist/index.js");
const env_1 = __webpack_require__(/*! ../browsers/src/env */ "./src/browsers/src/env.ts");
const Env_1 = __webpack_require__(/*! ./Env */ "./src/modules/Env.ts");
const Key_1 = __webpack_require__(/*! ./Key */ "./src/modules/Key.ts");
const Helper_1 = __webpack_require__(/*! ./Helper */ "./src/modules/Helper.ts");
const client = new graphql_request_1.GraphQLClient(Env_1.APP_ENDPOINT, {
    headers: {
        authorization: Key_1.SECRET_KEY
    }
});
const sanityCheck = (0, graphql_request_1.gql) `
mutation SanityCheck($name: String!, $thumb: String!, $author: String!, $genres: [String], $type: String, $released: String, $description: String, $thumbWide: String) {
  sanityCheck(name: $name, thumb: $thumb, author: $author, genres: $genres, type: $type, released: $released, description: $description, thumbWide: $thumbWide) {
    status
    chapters{
      id
      name
    }
  }
}
`;
const sanityEclipse = (0, graphql_request_1.gql) `
mutation SanityEclipse($slug: String!, $chapter: JSONObject) {
  sanityEclipse(slug: $slug, chapter: $chapter){
    status
    message
  }
}
`;
const map = new Map();
map.set('megami-no-kafeterasu-goddess-caf-terrace', 'megami-no-kafeterasu');
class gkInteractor {
    static async sanityCheck(comic, originalCandidate) {
        // console.log(`[${comic.name}] Checking ${comic.name} sanityCheck()`);
        if (!comic.type) {
            comic.type = "N/A";
        }
        let slug = map.get(comic.slug) || comic.slug;
        try {
            const { sanityCheck: data } = await client.request(sanityCheck, { ...comic, slug });
            const chapterscandidate = [];
            const { chapters, status } = data;
            const maps = chapters.map(e => e.name);
            for (let i of originalCandidate) {
                if (!maps.includes(i.name)) {
                    chapterscandidate.push({
                        href: i.href,
                        name: i.name
                    });
                }
            }
            // if (chapterscandidate.length > 0) {
            //   console.log(originalCandidate.sort((a, b) => a.name - b.name));
            //   console.log(maps.sort())
            //   console.log(chapterscandidate)
            // }
            // console.log(`[${comic.name}] Finish Checking ${comic.name} sanityCheck() status: ${status} length: ${chapterscandidate.length}`);
            return {
                status,
                chapterscandidate,
                chaptersList: maps
            };
        }
        catch (error) {
            console.log(error);
            throw error;
        }
    }
    static async uploadImage(url, path) {
        try {
            const { data: { status, message } } = await axios_1.default.post(`${env_1.host}/upload`, {
                url,
                path
            });
            if (status) {
                console.log(`Success Upload ${message}`);
            }
            return true;
        }
        catch (error) {
            throw error;
        }
    }
    static async sanityEclipse(title, chapter) {
        //@ts-ignore
        if (chapter.image_count == 0) {
            console.log("no image found");
            return;
        }
        let slug = map.get((0, Helper_1.slugify)(title)) || (0, Helper_1.slugify)(title);
        const { sanityEclipse: { status, message } = {} } = await client.request(sanityEclipse, { slug, chapter });
        if (status) {
            console.log(`Success SanityEclipse ${message}`);
        }
        else {
            console.log(`Failed SanityEclipse ${message}`);
        }
        return;
    }
}
exports.gkInteractor = gkInteractor;


/***/ }),

/***/ "./src/scrappers/kc-all.ts":
/*!*********************************!*\
  !*** ./src/scrappers/kc-all.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const kcAll = [
    "https://komikcast.me/komik/piquant/",
    "https://komikcast.me/komik/sins/",
    "https://komikcast.me/komik/hack-g-u/",
    "https://komikcast.me/komik/honyaku-no-sainou-de-ore-dake-ga-sekai-wo-kaihen-dekiru-ken/",
    "https://komikcast.me/komik/kawaii-wa-kimi-no-mono/",
    "https://komikcast.me/komik/its-too-precious-and-hard-to-read-4p-short-stories/",
    "https://komikcast.me/komik/kukuku-he-is-the-weakest-of-the-four-heavenly-monarchs-i-was-dismissed-from-my-job-but-somehow-i-became-the-master-of-a-hero-and-a-holy-maiden/",
    "https://komikcast.me/komik/mou-hatarakitakunaindesu-boukensha-nanka-yamete-yaru-imasara-taiguu-wo-kaerukara-to-onegai-sarete-mo-okotowaridesu-boku-wa-zettai-hatarakimasen/",
    "https://komikcast.me/komik/shop-skill-sae-areba-dungeon-ka-shita-sekai-demo-rakushou-da/",
    "https://komikcast.me/komik/watashi-ga-inakute-mo-shiawase-ni-natte-kudasai-nante-fuzaken-na/",
    "https://komikcast.me/komik/99-wooden-stick/",
    "https://komikcast.me/komik/c-sword-cornett/",
    "https://komikcast.me/komik/07-ghost/",
    "https://komikcast.me/komik/090-eko-to-issho/",
    "https://komikcast.me/komik/1-second/",
    "https://komikcast.me/komik/1-nen-a-gumi-no-monster/",
    "https://komikcast.me/komik/12-prince/",
    "https://komikcast.me/komik/100-nichigo-ni-kuufuku-de-taore-maid-ni-naru-onna-no-ko/",
    "https://komikcast.me/komik/100-nichigo-ni-s%e2%97%8bx-suru-tsuinte-chan/",
    "https://komikcast.me/komik/100-man-no-inochi-no-ue-ni-ore-wa-tatteiru/",
    "https://komikcast.me/komik/100-nin-no-eiyuu-o-sodateta-saikyou-yogensha-wa-boukensha-ni-natte-mo-sekaijuu-no-deshi-kara-shitawarete-masu/",
    "https://komikcast.me/komik/100-000-layers-of-body-refining-i-raise-all-emperor/",
    "https://komikcast.me/komik/100-gokuama-kareshi/",
    "https://komikcast.me/komik/1000-yen-hero/",
    "https://komikcast.me/komik/12-beast/",
    "https://komikcast.me/komik/12-suicidal-children/",
    "https://komikcast.me/komik/13/",
    "https://komikcast.me/komik/14-sai-no-koi/",
    "https://komikcast.me/komik/16-life/",
    "https://komikcast.me/komik/17-sai-no-kimi-e/",
    "https://komikcast.me/komik/17-sai-kiss-to-dilemma/",
    "https://komikcast.me/komik/1ldk-blues/",
    "https://komikcast.me/komik/1st-year-max-level-manager/",
    "https://komikcast.me/komik/2-kaime-no-hajimete-no-koi/",
    "https://komikcast.me/komik/2-5-dimensional-seduction/",
    "https://komikcast.me/komik/20th-century-boys/",
    "https://komikcast.me/komik/22-7-nanabun-no-nijyuuni-a/",
    "https://komikcast.me/komik/25-nichi-he-no-love-letter/",
    "https://komikcast.me/komik/25-years-apart/",
    "https://komikcast.me/komik/25-ji-no-ghost-writer/",
    "https://komikcast.me/komik/29-to-jk/",
    "https://komikcast.me/komik/29-sai-dokushin-chuuken-boukensha-no-nichijou/",
    "https://komikcast.me/komik/29-sai-dokushin-wa-isekai-de-jiyuu-ni-ikitakatta/",
    "https://komikcast.me/komik/30-minutes/",
    "https://komikcast.me/komik/300-nen-fuin-sa-reshi-jaryuu-chan-to-tomodachi-ni-narimashita-serialization/",
    "https://komikcast.me/komik/31-heroes/",
    "https://komikcast.me/komik/37-year-old-kindaichi-hajime-case-files/",
    "https://komikcast.me/komik/3d-kanojo/",
    "https://komikcast.me/komik/4-thousand-fold-man/",
    "https://komikcast.me/komik/49th-confession/",
    "https://komikcast.me/komik/4p-short-stories/",
    "https://komikcast.me/komik/5-years-later/",
    "https://komikcast.me/komik/5-toubun-no-hanayome/",
    "https://komikcast.me/komik/6-worlds-of-cultivation/",
    "https://komikcast.me/komik/6-gou-keibi/",
    "https://komikcast.me/komik/6-sai-no-kenja-wa-hikage-no-michi-wo-ayumitai/",
    "https://komikcast.me/komik/666-satan/",
    "https://komikcast.me/komik/7-days-dinner/",
    "https://komikcast.me/komik/7-senchi/",
    "https://komikcast.me/komik/7fates-chakho/",
    "https://komikcast.me/komik/7th-garden/",
    "https://komikcast.me/komik/86-eighty-six/",
    "https://komikcast.me/komik/8kaijuu/",
    "https://komikcast.me/komik/990k-ex-life-hunter/",
    "https://komikcast.me/komik/a-bad-person/",
    "https://komikcast.me/komik/a-banished-failure-survives-in-the-borderland-and-becomes-an-s-ranked-exorcist/",
    "https://komikcast.me/komik/a-bears-daughter/",
    "https://komikcast.me/komik/a-boring-story-about-telework/",
    "https://komikcast.me/komik/a-boy-who-loves-genderswap-got-genderswapped-so-he-acts-out-his-ideal-genderswap-girl/",
    "https://komikcast.me/komik/a-breakthrough-brought-by-forbidden-master-and-disciple/",
    "https://komikcast.me/komik/a-brick-to-break-into-other-world/",
    "https://komikcast.me/komik/a-callous-chairmans-summer/",
    "https://komikcast.me/komik/a-carefree-life/",
    "https://komikcast.me/komik/a-childhood-friend-who-has-only-one-day-of-memory/",
    "https://komikcast.me/komik/a-choice-of-boyfriend-and-girlfriend/",
    "https://komikcast.me/komik/a-city-called-nowhere/",
    "https://komikcast.me/komik/a-cliche-story-with-a-childhood-friend-onee-san/",
    "https://komikcast.me/komik/a-comic-artists-survival-guide/",
    "https://komikcast.me/komik/a-couple-that-wants-to-share-a-goodbye-kiss/",
    "https://komikcast.me/komik/a-couple-whose-relationship-is-only-cold-on-the-outside/",
    "https://komikcast.me/komik/a-court-magician-who-was-focused-on-supportive-magic-because-his-allies-were-too-weak-aims-to-become-the-strongest-after-being-banished/",
    "https://komikcast.me/komik/a-cross-dressing-boy-who-wants-an-excuse-to-cross-dress/",
    "https://komikcast.me/komik/a-cute-girlfriend/",
    "https://komikcast.me/komik/a-cute-guy/",
    "https://komikcast.me/komik/a-day-in-the-life-of-a-stupid-gyaru-and-a-glamourous-gyaru/",
    "https://komikcast.me/komik/a-day-in-the-lives-of-a-gyaru-couple-lunch-break/",
    "https://komikcast.me/komik/a-day-like-a-shit/",
    "https://komikcast.me/komik/a-deal-with-the-devil/",
    "https://komikcast.me/komik/a-disaster-class-hero-has-returned/",
    "https://komikcast.me/komik/a-first-year-high-school-boy-whose-hobby-is-cross-dressing/",
    "https://komikcast.me/komik/a-friend-who-i-went-to-the-same-middle-school-with-but-have-never-talked-to/",
    "https://komikcast.me/komik/a-girl-who-hasnt-adjusted-to-life-in-tokyo/",
    "https://komikcast.me/komik/a-girl-who-only-appears-on-snowy-days/",
    "https://komikcast.me/komik/a-girl-whose-breasts-are-a-little-big-and-is-kinda-pretty/",
    "https://komikcast.me/komik/a-gods-ascension/",
    "https://komikcast.me/komik/a-guide-to-proper-dating/",
    "https://komikcast.me/komik/a-gyaru-and-otaku-who-have-entered-a-school-where-they-will-have-to-dropout-if-they-cannot-get-a-lover/",
    "https://komikcast.me/komik/a-happy-couple/",
    "https://komikcast.me/komik/a-heroic-tale-about-starting-with-a-personal-relations-cheat-ability-and-letting-others-do-the-job/",
    "https://komikcast.me/komik/a-high-school-girl-and-a-private-teacher/",
    "https://komikcast.me/komik/a-kouhai-who-always-has-a-poker-face-challenged-me-to-a-game-of-old-maid/",
    "https://komikcast.me/komik/a-lanterns-light/",
    "https://komikcast.me/komik/a-legend-of-the-wind/",
    "https://komikcast.me/komik/a-little-secret-recipe/",
    "https://komikcast.me/komik/a-lonesome-fragrance-waiting-to-be-appreciated/",
    "https://komikcast.me/komik/a-love-story-in-moist-rainy-days/",
    "https://komikcast.me/komik/a-magic-move/",
    "https://komikcast.me/komik/a-man-and-a-woman-who-hate-obligatory-chocolates/",
    "https://komikcast.me/komik/a-man-meets-a-kuchisake-onna/",
    "https://komikcast.me/komik/a-manga-about-a-gyaru-that-loves-a-gyaru-thats-friendly-to-otaku/",
    "https://komikcast.me/komik/a-manga-about-a-hero-who-pulled-out-the-holy-sword-and-became-a-girl/",
    "https://komikcast.me/komik/a-manga-where-the-cutest-girl-in-my-school-might-like-me/",
    "https://komikcast.me/komik/a-neat-and-pretty-girl-at-my-new-school-is-a-childhood-friend-who-i-used-to-play-with-thinking-she-was-a-boy/",
    "https://komikcast.me/komik/a-novel-way-of-escaping-death/",
    "https://komikcast.me/komik/a-person-with-top-energy/",
    "https://komikcast.me/komik/a-plot-to-undermine-the-hero/",
    "https://komikcast.me/komik/a-pocket-full-of-holes-forgets-everything/",
    "https://komikcast.me/komik/a-post-apocalyptic-journey/",
    "https://komikcast.me/komik/a-rank-party-wo-ridatsu-shita-ore-wa-moto-oshiego-tachi-to-meikyuu-shinbu-wo-mezasu/",
    "https://komikcast.me/komik/a-rare-marriage-how-to-grill-our-love/",
    "https://komikcast.me/komik/a-relationship-communicated-through-hm-and-mhm/",
    "https://komikcast.me/komik/a-romantic-comedy-that-begins-with-a-dream/",
    "https://komikcast.me/komik/a-romantic-comedy-that-only-i-know/",
    "https://komikcast.me/komik/a-romcom-protagonist-who-knows-how-to-handle-himself/",
    "https://komikcast.me/komik/a-romcom-where-defying-the-honor-student-girlfriend-is-not-an-option/",
    "https://komikcast.me/komik/a-ruined-princess-and-alternate-world-hero-make-a-great-country/",
    "https://komikcast.me/komik/a-saint-joined-my-party/",
    "https://komikcast.me/komik/a-sense-of-distance/",
    "https://komikcast.me/komik/a-silent-voice-special-book/",
    "https://komikcast.me/komik/a-simple-way-to-make-a-tsundere-girlfriend-show-affection/",
    "https://komikcast.me/komik/a-socially-awkward-adventurer-perfect-in-appearance-becomes-the-leader-of-an-s-rank-party/",
    "https://komikcast.me/komik/a-story-about-a-blonde-virgin-girl-who-acquires-sexual-knowledge/",
    "https://komikcast.me/komik/a-story-about-a-boy-who-randomly-become-a-girl-of-various-type-when-he-wakes-up-in-the-morning/",
    "https://komikcast.me/komik/a-story-about-a-cat-reincarnated-in-a-different-world-where-there-are-no-cats/",
    "https://komikcast.me/komik/a-story-about-a-creepy-girls-smile/",
    "https://komikcast.me/komik/a-story-about-a-dragon-and-the-rising-of-an-adventurer-a-healer-who-was-seen-as-useless-and-was-kicked-out-from-an-s-rank-party-goes-off-to-revive-the-strongest-dragon-in-an-abandoned-area/",
    "https://komikcast.me/komik/a-story-about-a-droid/",
    "https://komikcast.me/komik/a-story-about-a-girl-who-pretended-to-have-a-frank-personality-to-get-close-to-her-crush/",
    "https://komikcast.me/komik/a-story-about-a-girl-who-supports-her-childhood-friends-love/",
    "https://komikcast.me/komik/a-story-about-a-grampa-and-granma-returned-back-to-their-youth/",
    "https://komikcast.me/komik/a-story-about-a-man-and-a-woman-and-when-they-sleep-together-money-appears-out-of-nowhere/",
    "https://komikcast.me/komik/a-story-about-a-perfect-girl-gradually-breaking-down/",
    "https://komikcast.me/komik/a-story-about-a-senpai-who-cant-get-better-test-scores-and-a-kouhai-who-actually-can/",
    "https://komikcast.me/komik/a-story-about-a-totally-straightforward-girlfriend/",
    "https://komikcast.me/komik/a-story-about-a-very-ordinary-couple/",
    "https://komikcast.me/komik/a-story-about-an-innocent-girl-who-doesnt-know-what-a-love-hotel-is-and-the-worried-girlfriend-who-is-dating-her/",
    "https://komikcast.me/komik/a-story-about-an-otaku-and-an-idol/",
    "https://komikcast.me/komik/a-story-about-becoming-temporary-lovers-with-a-classmate-that-i-fell-in-love-at-first-sight/",
    "https://komikcast.me/komik/a-story-about-living-with-a-ghost-who-will-attain-enlightenment-in-a-year/",
    "https://komikcast.me/komik/a-story-about-my-girlfriend-changing-her-personalities-everyday/",
    "https://komikcast.me/komik/a-story-about-smoking-at-the-back-of-the-supermarket/",
    "https://komikcast.me/komik/a-story-about-wanting-to-commit-suicide-but-its-scary-so-i-find-a-yandere-girl-to-kill-me-but-it-doesnt-work/",
    "https://komikcast.me/komik/a-story-about-wanting-to-kiss-after-being-together-for-a-year/",
    "https://komikcast.me/komik/a-story-in-which-an-older-brother-becomes-a-little-sister/",
    "https://komikcast.me/komik/a-story-of-heroes/",
    "https://komikcast.me/komik/a-story-where-all-the-characters-are-super-yandere/",
    "https://komikcast.me/komik/a-strange-world/",
    "https://komikcast.me/komik/a-succubus-and-thereafter/",
    "https://komikcast.me/komik/a-summer-miracle/",
    "https://komikcast.me/komik/a-sword-master-childhood-friend-power-harassed-me-harshly-so-i-broke-off-our-relationship-and-make-a-fresh-start-at-the-frontier-as-a-magic-swordsman/",
    "https://komikcast.me/komik/a-trail-of-blood/",
    "https://komikcast.me/komik/a-true-face-i-didnt-know-you-had/",
    "https://komikcast.me/komik/a-true-martial-world/",
    "https://komikcast.me/komik/a-vampire-who-is-inept-at-sucking-blood/",
    "https://komikcast.me/komik/a-walk-on-rainy-day/",
    "https://komikcast.me/komik/a-wife-who-heals-with-tights/",
    "https://komikcast.me/komik/a-will-eternal/",
    "https://komikcast.me/komik/a-witchs-life-in-a-six-tatami-room/",
    "https://komikcast.me/komik/a-woman-cutting-her-long-hair/",
    "https://komikcast.me/komik/a-yuri-manga-that-starts-with-getting-rejected-in-a-dream/",
    "https://komikcast.me/komik/a-bout/",
    "https://komikcast.me/komik/a-rank-boukensha-no-slow-life/",
    "https://komikcast.me/komik/a-i-doctor/",
    "https://komikcast.me/komik/abide-in-the-wind/",
    "https://komikcast.me/komik/ability/",
    "https://komikcast.me/komik/ability-shop/",
    "https://komikcast.me/komik/ability-stealing-hunter/",
    "https://komikcast.me/komik/abnormal-kei-joshi/",
    "https://komikcast.me/komik/above-all-gods/",
    "https://komikcast.me/komik/above-the-cloud-sea/",
    "https://komikcast.me/komik/above-the-heavens/",
    "https://komikcast.me/komik/absolute-duo/",
    "https://komikcast.me/komik/absolute-martial-arts/",
    "https://komikcast.me/komik/absolute-sword-sense/",
    "https://komikcast.me/komik/abyss-calling/",
    "https://komikcast.me/komik/academy-of-monster/",
    "https://komikcast.me/komik/academys-undercover-professor/",
    "https://komikcast.me/komik/accel-world-dural-magisa-garden/",
    "https://komikcast.me/komik/accidentally-became-a-god/",
    "https://komikcast.me/komik/ace-god-doctor/",
    "https://komikcast.me/komik/ace-master/",
    "https://komikcast.me/komik/act-age/",
    "https://komikcast.me/komik/actor-dance/",
    "https://komikcast.me/komik/adachi-to-shimamura/",
    "https://komikcast.me/komik/adachi-to-shimamura-i-wonder-what-im-drawing-doujinshi/",
    "https://komikcast.me/komik/adachi-to-shimamura-yuzuhara-moke/",
    "https://komikcast.me/komik/adu-of-hades/",
    "https://komikcast.me/komik/adults-who-dont-understand-love/",
    "https://komikcast.me/komik/advanced-evolution/",
    "https://komikcast.me/komik/adventure-of-sinbad-prototype/",
    "https://komikcast.me/komik/adventures-of-an-undead-who-became-paladin/",
    "https://komikcast.me/komik/aekanaru/",
    "https://komikcast.me/komik/after-an-exorcism/",
    "https://komikcast.me/komik/after-being-deported-from-the-country-i-became-the-4th-enchanter-in-the-world/",
    "https://komikcast.me/komik/after-demon/",
    "https://komikcast.me/komik/after-school/",
    "https://komikcast.me/komik/after-the-friendship-full/",
    "https://komikcast.me/komik/after-the-identity-of-the-boss-was-exposed/",
    "https://komikcast.me/komik/after-transformation-mine-and-her-wild-fantasy/",
    "https://komikcast.me/komik/after-visiting-an-odd-website-i-transformed-into-a-girl/",
    "https://komikcast.me/komik/again-my-life/",
    "https://komikcast.me/komik/against-the-gods/",
    "https://komikcast.me/komik/against-the-heaven-supreme-heaven-guards/",
    "https://komikcast.me/komik/agatha/",
    "https://komikcast.me/komik/age-of-barbarism/",
    "https://komikcast.me/komik/age-of-terror/",
    "https://komikcast.me/komik/agent-crazy-concubine-peerless-comprehension/",
    "https://komikcast.me/komik/agravity-boys/",
    "https://komikcast.me/komik/aharen-san-wa-hakarenai/",
    "https://komikcast.me/komik/ahiru-no-sora/",
    "https://komikcast.me/komik/aho-girl/",
    "https://komikcast.me/komik/ai-kara-hajimaru/",
    "https://komikcast.me/komik/ai-kora/",
    "https://komikcast.me/komik/aida-ni-hatachi/",
    "https://komikcast.me/komik/aikagi-kun-to-shiawase-gohan/",
    "https://komikcast.me/komik/aimane-akuma-na-kanojo-wo-produce/",
    "https://komikcast.me/komik/air-gear/",
    "https://komikcast.me/komik/aire/",
    "https://komikcast.me/komik/aishiteru-game-wo-owarasetai/",
    "https://komikcast.me/komik/aizawa-san-zoushoku/",
    "https://komikcast.me/komik/ajin/",
    "https://komikcast.me/komik/akaaka-shita-chi-no-monogatari/",
    "https://komikcast.me/komik/akagami-no-shirayuki-hime/",
    "https://komikcast.me/komik/akai-kiri-no-naka-kara/",
    "https://komikcast.me/komik/akai-mi-hajiketa/",
    "https://komikcast.me/komik/akame-ga-kill/",
    "https://komikcast.me/komik/akame-ga-kill-zero/",
    "https://komikcast.me/komik/akane-banashi/",
    "https://komikcast.me/komik/akarui-kioku-soushitsu/",
    "https://komikcast.me/komik/akarui-sekai-keikaku/",
    "https://komikcast.me/komik/akatsuki-no-yona/",
    "https://komikcast.me/komik/akazukin-chan-wa-ookami-san-o-nakasetai/",
    "https://komikcast.me/komik/akb48-satsujin-jiken/",
    "https://komikcast.me/komik/akb49/",
    "https://komikcast.me/komik/ake-no-tobari/",
    "https://komikcast.me/komik/akiba-strip/",
    "https://komikcast.me/komik/akita-imokko-ebina-chan/",
    "https://komikcast.me/komik/akito-wa-card-wo-hiku-you-desu/",
    "https://komikcast.me/komik/aku-no-hana/",
    "https://komikcast.me/komik/akuma-ga-kitarite/",
    "https://komikcast.me/komik/akuma-mo-fumu-wo-osoreru-tokoro/",
    "https://komikcast.me/komik/akuma-no-ikenie/",
    "https://komikcast.me/komik/akuma-no-mama/",
    "https://komikcast.me/komik/akuma-no-riddle/",
    "https://komikcast.me/komik/akuma-to-candy/",
    "https://komikcast.me/komik/akumetsu/",
    "https://komikcast.me/komik/akumu-kara-mezameta-gouman-reijou-wa-yarinaoshi-wo-mousakuchuu/",
    "https://komikcast.me/komik/akuryou/",
    "https://komikcast.me/komik/akuyaku-no-shukutoku/",
    "https://komikcast.me/komik/akuyaku-ouji-wa-koi-ga-dekinai/",
    "https://komikcast.me/komik/akuyaku-reijou-ni-narimashita/",
    "https://komikcast.me/komik/akuyaku-reijou-no-shitsuji-sama-hametsu-flag-wa-ore-ga-tsubusasete-itadakimasu/",
    "https://komikcast.me/komik/akuyaku-reijou-reberu-99-watashi-wa-urabosu-desuga-maou-de-wa-arimasen/",
    "https://komikcast.me/komik/akuyaku-reijou-route-ga-nai-nante-dare-ga-itta-no/",
    "https://komikcast.me/komik/akuyaku-reijou-wa-ringoku-no-outaishi-ni-dekiai-sareru/",
    "https://komikcast.me/komik/akuyome/",
    "https://komikcast.me/komik/akuyuu-no-ore-ga-ponkotsu-kishi-wo-mite-rare-naindaga-dou-sewa-wo-yaki-yaii-madome-gaiden/",
    "https://komikcast.me/komik/albert-ke-no-reijou-wa-botsuraku-wo-go-shomou-desu/",
    "https://komikcast.me/komik/alcafus/",
    "https://komikcast.me/komik/alcohol-yuri-anthology/",
    "https://komikcast.me/komik/alice-in-the-dark-world/",
    "https://komikcast.me/komik/alicias-diet-quest/",
    "https://komikcast.me/komik/aliens-area/",
    "https://komikcast.me/komik/alive-saishuu-shinkateki-shounen/",
    "https://komikcast.me/komik/all-attributes-martial-arts/",
    "https://komikcast.me/komik/all-female-cultivators-want-to-sleep-with-me/",
    "https://komikcast.me/komik/all-hail-the-sect-leader/",
    "https://komikcast.me/komik/all-heavenly-days/",
    "https://komikcast.me/komik/all-of-humanity-is-yuri-except-for-me/",
    "https://komikcast.me/komik/all-rounder/",
    "https://komikcast.me/komik/all-rounder-meguru/",
    "https://komikcast.me/komik/all-you-need-is-kill/",
    "https://komikcast.me/komik/alma-shinji-mito/",
    "https://komikcast.me/komik/alma-chan-wa-kazoku-ni-naritai/",
    "https://komikcast.me/komik/almadianos-eiyuuden/",
    "https://komikcast.me/komik/almighty-master/",
    "https://komikcast.me/komik/alone-necromancer/",
    "https://komikcast.me/komik/alpha/",
    "https://komikcast.me/komik/alternate-life/",
    "https://komikcast.me/komik/am-i-invincible/",
    "https://komikcast.me/komik/ama-devi/",
    "https://komikcast.me/komik/amachin-wa-jishou/",
    "https://komikcast.me/komik/amae-heta/",
    "https://komikcast.me/komik/amagami-san-chi-no-enmusubi/",
    "https://komikcast.me/komik/amagoi-no-kanojo/",
    "https://komikcast.me/komik/amai-amai-koi-o-seyo/",
    "https://komikcast.me/komik/amalgam-of-distortion/",
    "https://komikcast.me/komik/amanchu/",
    "https://komikcast.me/komik/amano-megumi-wa-sukidarake/",
    "https://komikcast.me/komik/amari-mawari/",
    "https://komikcast.me/komik/amaterasu-san-wa-hikikomoritai/",
    "https://komikcast.me/komik/amateur-demigod-non-professional-fairy/",
    "https://komikcast.me/komik/ame-demo-hare-demo/",
    "https://komikcast.me/komik/ame-no-hi/",
    "https://komikcast.me/komik/ame-to-kimi-no-mukou/",
    "https://komikcast.me/komik/ame-to-kimi-to-serialization/",
    "https://komikcast.me/komik/amentia/",
    "https://komikcast.me/komik/among-us/",
    "https://komikcast.me/komik/an-active-hunter-in-hokkaido-has-been-thrown-into-a-different-world/",
    "https://komikcast.me/komik/an-easy-introduction-to-love-triangles-a-study-guide/",
    "https://komikcast.me/komik/an-evil-dragon-that-was-sealed-away-for-300-years-became-my-friend/",
    "https://komikcast.me/komik/an-ha-muin/",
    "https://komikcast.me/komik/an-imperfect-kiss/",
    "https://komikcast.me/komik/an-indecent-manga-from-before/",
    "https://komikcast.me/komik/ana-satsujin/",
    "https://komikcast.me/komik/anagle-mole/",
    "https://komikcast.me/komik/anata-no-danna-uwaki-shitemasu-yo/",
    "https://komikcast.me/komik/ancestor/",
    "https://komikcast.me/komik/ancestor-of-the-gods/",
    "https://komikcast.me/komik/ancestor-please-come-out-of-the-mountain/",
    "https://komikcast.me/komik/ancestral-visit/",
    "https://komikcast.me/komik/androids-have-no-blood/",
    "https://komikcast.me/komik/ane-doki/",
    "https://komikcast.me/komik/ane-ga-kensei-de-imouto-ga-kenja-de/",
    "https://komikcast.me/komik/ane-golem/",
    "https://komikcast.me/komik/ane-naru-mono/",
    "https://komikcast.me/komik/ane-no-onaka-wo-fukuramaseru-no-wa-boku/",
    "https://komikcast.me/komik/anechuu-dekiai-monzetsu-minako-san/",
    "https://komikcast.me/komik/anemone-wa-netsu-o-obiru/",
    "https://komikcast.me/komik/angel-beats-heaven-door/",
    "https://komikcast.me/komik/angelic-syndrome/",
    "https://komikcast.me/komik/angelica-ni-utau/",
    "https://komikcast.me/komik/ani-no-yome-to-kurashite-imasu/",
    "https://komikcast.me/komik/ani-to-imouto-no-shitai-shitai-shitai-koto/",
    "https://komikcast.me/komik/ankoku-kishi-no-ore-desu-ga-saikyou-no-seikishi-wo-mezashimasu/",
    "https://komikcast.me/komik/annarasumanara/",
    "https://komikcast.me/komik/annoying-alice/",
    "https://komikcast.me/komik/ano-hana-ga-saku-oka-de-kimi-to-mata-deaetara/",
    "https://komikcast.me/komik/ano-hi-chikyuu-ni-dungeon-ga-shutsugen-shita/",
    "https://komikcast.me/komik/ano-ko-ni-yasashii-sekai-ga-ii/",
    "https://komikcast.me/komik/ano-koro-no-aoi-hoshi/",
    "https://komikcast.me/komik/ano-oni-kyoshi-ga-boku-no-ane-ni-narundesuka/",
    "https://komikcast.me/komik/anorexia-shikabane-hanako-wa-kyoshokushou/",
    "https://komikcast.me/komik/another/",
    "https://komikcast.me/komik/another-world-where-i-cant-even-collapse-and-die-ikidaore-mo-dekinai-konna-isekai-ja/",
    "https://komikcast.me/komik/ansatsu-no-kimi-wa-korosenai/",
    "https://komikcast.me/komik/ansatsu-skill-de-isekai-saikyou-renkinjutsu-to-ansatsujutsu-o-kiwameta-ore-wa-sekai-o-kage-kara-shihai-suru/",
    "https://komikcast.me/komik/ao-haru-ride/",
    "https://komikcast.me/komik/ao-no-exorcist/",
    "https://komikcast.me/komik/ao-no-flag/",
    "https://komikcast.me/komik/ao-no-hako/",
    "https://komikcast.me/komik/ao-no-orchestra/",
    "https://komikcast.me/komik/aoi-hikaru-ga-chikyuu-ni-itakoro/",
    "https://komikcast.me/komik/aoi-kiseki/",
    "https://komikcast.me/komik/aoi-yoru/",
    "https://komikcast.me/komik/aoi-san-wa-16-sai-toshishita/",
    "https://komikcast.me/komik/aoki-hagane-no-arpeggio/",
    "https://komikcast.me/komik/aola-star-parallel-universe/",
    "https://komikcast.me/komik/aozora-to-kumorizora/",
    "https://komikcast.me/komik/apartment-ghost/",
    "https://komikcast.me/komik/apocalypse-mechanic/",
    "https://komikcast.me/komik/apocalyptic-forecast/",
    "https://komikcast.me/komik/apocalyptic-thief/",
    "https://komikcast.me/komik/apotheosis/",
    "https://komikcast.me/komik/app-mode-2/",
    "https://komikcast.me/komik/appearance-of-the-yellow-dragon/",
    "https://komikcast.me/komik/appli-trap/",
    "https://komikcast.me/komik/apprentices-are-all-female-devil/",
    "https://komikcast.me/komik/aqua/",
    "https://komikcast.me/komik/arachnid/",
    "https://komikcast.me/komik/arafoo-kenja-no-isekai-seikatsu-nikki/",
    "https://komikcast.me/komik/arafoo-shachiku-no-golem-master/",
    "https://komikcast.me/komik/aragane-no-ko/",
    "https://komikcast.me/komik/arago/",
    "https://komikcast.me/komik/arakure-ojousama-wa-monmon-shiteiru/",
    "https://komikcast.me/komik/arasa-dakedo-hatsukoi-desu/",
    "https://komikcast.me/komik/arasaamama-no-watashi-de-ii-no/",
    "https://komikcast.me/komik/arashi-kun-no-dakimakura/",
    "https://komikcast.me/komik/arata-primal-the-new-primitive/",
    "https://komikcast.me/komik/arcana-fantasy/",
    "https://komikcast.me/komik/archmage-streamer/",
    "https://komikcast.me/komik/area-d-inou-ryouiki/",
    "https://komikcast.me/komik/area-no-kishi/",
    "https://komikcast.me/komik/argate-online/",
    "https://komikcast.me/komik/arifureta-gakuen-de-sekai-saikyou/",
    "https://komikcast.me/komik/arifureta-nichijou-de-sekai-saikyou/",
    "https://komikcast.me/komik/arifureta-shokugyou-de-sekai-saikyou/",
    "https://komikcast.me/komik/arifureta-shokugyou-de-sekai-saikyou-zero/",
    "https://komikcast.me/komik/arigatights/",
    "https://komikcast.me/komik/arisa/",
    "https://komikcast.me/komik/ark/",
    "https://komikcast.me/komik/ark-romancer/",
    "https://komikcast.me/komik/arknights-comic-anthology/",
    "https://komikcast.me/komik/arknights-operators/",
    "https://komikcast.me/komik/armados/",
    "https://komikcast.me/komik/aroma-chan-wa-konya-mo-hazukashii/",
    "https://komikcast.me/komik/around-40-kenja-no-isekai-seikatsu-nikki-kimana-na-isekai-kyoushi-raifu/",
    "https://komikcast.me/komik/aru-asa-okitara/",
    "https://komikcast.me/komik/aru-doroido-no-o-hanashi/",
    "https://komikcast.me/komik/arubaito-munekyun/",
    "https://komikcast.me/komik/as-a-result-of-breaking-an-otome-game-the-villainess-young-lady-becomes-a-cheat/",
    "https://komikcast.me/komik/as-the-richest-man-i-really-dont-want-to-be-reborn/",
    "https://komikcast.me/komik/asa-made-jugyou-chu/",
    "https://komikcast.me/komik/asa-okitara-onnanoko-ni-natteta-manga/",
    "https://komikcast.me/komik/asagao-kase-san/",
    "https://komikcast.me/komik/asahi-kun-is-bad-at-being-a-delinquent/",
    "https://komikcast.me/komik/asahina-koharus-delusional-weather/",
    "https://komikcast.me/komik/asahina-wakaba-to-marumaru-na-kareshi/",
    "https://komikcast.me/komik/asako/",
    "https://komikcast.me/komik/ascension-starts-from-raising-a-fairy/",
    "https://komikcast.me/komik/ascension-to-godhood-by-slaying-demons/",
    "https://komikcast.me/komik/asebi-to-sora-sekai-no-boukensha/",
    "https://komikcast.me/komik/asha/",
    "https://komikcast.me/komik/ashi-no-aji/",
    "https://komikcast.me/komik/ashigei-shoujo-komura-san/",
    "https://komikcast.me/komik/ashita-wa-doyoubi/",
    "https://komikcast.me/komik/ashita-kimi-ni-aetara/",
    "https://komikcast.me/komik/ashita-watashi-wa-dareka-no-kanojo/",
    "https://komikcast.me/komik/ashitaba-san-chi-no-muko-kurashi/",
    "https://komikcast.me/komik/ashura-dan-indra/",
    "https://komikcast.me/komik/askr-yggdrasils-wood/",
    "https://komikcast.me/komik/asmodeus-wa-akiramenai/",
    "https://komikcast.me/komik/asobi-asobase/",
    "https://komikcast.me/komik/asoko-de-hataraku-musubu-san/",
    "https://komikcast.me/komik/assassin-de-aru-ore-no-sutetasu-ga-yuusha-yori-mo-akiraka-ni-tsuyoi-nodaga/",
    "https://komikcast.me/komik/assassin-no-kyuujitsu/",
    "https://komikcast.me/komik/assassins-pride/",
    "https://komikcast.me/komik/assassination-classroom/",
    "https://komikcast.me/komik/asshole-hero/",
    "https://komikcast.me/komik/assistant-teacher-in-a-magical-girls-school/",
    "https://komikcast.me/komik/asuperu-kanojo/",
    "https://komikcast.me/komik/asura/",
    "https://komikcast.me/komik/asura-gate/",
    "https://komikcast.me/komik/at-that-time-the-battle-began-yandere-x-yandere/",
    "https://komikcast.me/komik/atm-no-naka-no-otoko/",
    "https://komikcast.me/komik/ato-de-shimai-masu/",
    "https://komikcast.me/komik/atsumare-fushigi-kenkyuubu/",
    "https://komikcast.me/komik/atsumori-kun-no-oyomesan-%e2%86%90mitei/",
    "https://komikcast.me/komik/attack-of-sea-king/",
    "https://komikcast.me/komik/attouteki-gacha-un-de-isekai-o-nariagaru/",
    "https://komikcast.me/komik/attribute-extractor/",
    "https://komikcast.me/komik/auto-hunting/",
    "https://komikcast.me/komik/autophagy-regulation/",
    "https://komikcast.me/komik/avatar-the-promise/",
    "https://komikcast.me/komik/awakening-in-the-three-kingdoms-as-the-demons-daughter-the-legend-of-dong-bai/",
    "https://komikcast.me/komik/awakening-sss-rank-skill-after-a-kiss/",
    "https://komikcast.me/komik/awfully-damn-kiss-and-hug/",
    "https://komikcast.me/komik/awkward-senpai/",
    "https://komikcast.me/komik/awkward-senpai-serialization/",
    "https://komikcast.me/komik/ayakashi-triangle/",
    "https://komikcast.me/komik/ayakashiko/",
    "https://komikcast.me/komik/ayame-senpai-wa-boku-to-himitsuno-keiyaku-wo/",
    "https://komikcast.me/komik/ayanashi/",
    "https://komikcast.me/komik/ayane-oujou-sama-wa-sanova/",
    "https://komikcast.me/komik/ayashimon/",
    "https://komikcast.me/komik/ayu-mayu/",
    "https://komikcast.me/komik/azfareo-no-sobayounin/",
    "https://komikcast.me/komik/azur-lane-spare-time-doujinshi/",
    "https://komikcast.me/komik/azur-lane-4-koma-slow-ahead/",
    "https://komikcast.me/komik/azur-lane-comic-anthology/",
    "https://komikcast.me/komik/azur-lane-comic-anthology-breaking/",
    "https://komikcast.me/komik/azur-lane-queens-orders/",
    "https://komikcast.me/komik/azusa/",
    "https://komikcast.me/komik/b-group-no-shounen-x/",
    "https://komikcast.me/komik/baby-princess/",
    "https://komikcast.me/komik/baby-steps/",
    "https://komikcast.me/komik/baby-kokoro-no-mama-ni/",
    "https://komikcast.me/komik/bachelors-return/",
    "https://komikcast.me/komik/back-street-girls/",
    "https://komikcast.me/komik/back-to-ancient-times-as-a-sage/",
    "https://komikcast.me/komik/back-to-the-city-the-strongest-investment-king/",
    "https://komikcast.me/komik/back-to-the-kaasan/",
    "https://komikcast.me/komik/backstage/",
    "https://komikcast.me/komik/bad-girls-diary/",
    "https://komikcast.me/komik/bad-tripper/",
    "https://komikcast.me/komik/bai-zes-bizarre-collection/",
    "https://komikcast.me/komik/baikoku-kikan/",
    "https://komikcast.me/komik/baito-saki-wa-aku-no-soshiki/",
    "https://komikcast.me/komik/bakana-shinigami/",
    "https://komikcast.me/komik/bakapple/",
    "https://komikcast.me/komik/bakapple-yuri/",
    "https://komikcast.me/komik/bakemono-recchan/",
    "https://komikcast.me/komik/bakemonogatari/",
    "https://komikcast.me/komik/bakuman/",
    "https://komikcast.me/komik/bakuman-age-13/",
    "https://komikcast.me/komik/ballpark-de-tsukamaete/",
    "https://komikcast.me/komik/ballroom-e-youkoso/",
    "https://komikcast.me/komik/bamen-kanmoku-shou-ni-natta-hanashi/",
    "https://komikcast.me/komik/bamora/",
    "https://komikcast.me/komik/bandai-kaname-wa-asobitai/",
    "https://komikcast.me/komik/bang-dream-girls-band-party-roselia-stage/",
    "https://komikcast.me/komik/bankara-san-ga-tooru/",
    "https://komikcast.me/komik/banken-hero/",
    "https://komikcast.me/komik/bar-flowers/",
    "https://komikcast.me/komik/barakamon/",
    "https://komikcast.me/komik/barbarian-quest/",
    "https://komikcast.me/komik/baroque-night/",
    "https://komikcast.me/komik/baseball-yuri/",
    "https://komikcast.me/komik/basilisk/",
    "https://komikcast.me/komik/basketball-monster/",
    "https://komikcast.me/komik/baski/",
    "https://komikcast.me/komik/bastard/",
    "https://komikcast.me/komik/batsu-harem/",
    "https://komikcast.me/komik/batsu-ichi-jk/",
    "https://komikcast.me/komik/batsu-gyaru/",
    "https://komikcast.me/komik/battle-frenzy/",
    "https://komikcast.me/komik/battle-mexia/",
    "https://komikcast.me/komik/battle-of-tianjiao/",
    "https://komikcast.me/komik/battle-through-the-heavens/",
    "https://komikcast.me/komik/battle-heavens-prequel/",
    "https://komikcast.me/komik/battle-through-the-heavens-return-of-the-beasts/",
    "https://komikcast.me/komik/be-a-big-boss-from-spending-money/",
    "https://komikcast.me/komik/be-a-deadly/",
    "https://komikcast.me/komik/be-born-again/",
    "https://komikcast.me/komik/beach-girls/",
    "https://komikcast.me/komik/beast-complex/",
    "https://komikcast.me/komik/beastars/",
    "https://komikcast.me/komik/beastmaster-of-the-ages/",
    "https://komikcast.me/komik/beatles-dystopia/",
    "https://komikcast.me/komik/beautiful-boss-cold-hearted/",
    "https://komikcast.me/komik/beautiful-legends/",
    "https://komikcast.me/komik/beauty-and-the-beasts/",
    "https://komikcast.me/komik/beautys-close-coach/",
    "https://komikcast.me/komik/became-king-after-being-bitten/",
    "https://komikcast.me/komik/became-the-lucky-666-princess-destiny/",
    "https://komikcast.me/komik/because-im-an-uncle-who-runs-a-weapon-shop/",
    "https://komikcast.me/komik/become-a-brave-mentor/",
    "https://komikcast.me/komik/become-a-genius-at-the-academy/",
    "https://komikcast.me/komik/become-a-god/",
    "https://komikcast.me/komik/become-a-villain-in-cultivation-world-game/",
    "https://komikcast.me/komik/become-the-richest-man-today/",
    "https://komikcast.me/komik/becoming-a-god-by-teaching-six-sisters/",
    "https://komikcast.me/komik/beelzebub/",
    "https://komikcast.me/komik/before-becoming-invincible-too-many-love-debt/",
    "https://komikcast.me/komik/before-i-knew-it-my-troublesome-childhood-friends-grew-up/",
    "https://komikcast.me/komik/begin/",
    "https://komikcast.me/komik/beginners-test-for-infinite-power/",
    "https://komikcast.me/komik/beginning-of-the-human-age/",
    "https://komikcast.me/komik/beng-huai-3rd-honkai-impact/",
    "https://komikcast.me/komik/berserk/",
    "https://komikcast.me/komik/berserk-of-gluttony/",
    "https://komikcast.me/komik/berserk-sovereign-of-battle/",
    "https://komikcast.me/komik/best-son-in-law/",
    "https://komikcast.me/komik/best-wedding/",
    "https://komikcast.me/komik/bestia/",
    "https://komikcast.me/komik/bewitching-demonic-beauty/",
    "https://komikcast.me/komik/beyond-myriad-peoples/",
    "https://komikcast.me/komik/beyond-the-strong/",
    "https://komikcast.me/komik/beyond-virtual/",
    "https://komikcast.me/komik/bibliomania/",
    "https://komikcast.me/komik/big-heros-girlfriend-is-super-fierce/",
    "https://komikcast.me/komik/big-order/",
    "https://komikcast.me/komik/bijin-onna-joushi-takizawa-san/",
    "https://komikcast.me/komik/bijo-kenja-majin-no-ken/",
    "https://komikcast.me/komik/bijutsubu-girl/",
    "https://komikcast.me/komik/billion-world-invasion/",
    "https://komikcast.me/komik/bimajyo-no-ayano-san/",
    "https://komikcast.me/komik/bimyou-ni-yasashii-ijimekko/",
    "https://komikcast.me/komik/binbou-kokka-no-kuroji-kaikaku/",
    "https://komikcast.me/komik/binbou-reijou-no-kanchigai-seijo-den-okane-no-tame-ni-doryoku-shitetara-oozoku-harem-ga-dekite-imashita/",
    "https://komikcast.me/komik/binding-with-monkey-king/",
    "https://komikcast.me/komik/binetsu-kuukan/",
    "https://komikcast.me/komik/biohazard-marhawa-desire/",
    "https://komikcast.me/komik/biomeat/",
    "https://komikcast.me/komik/biorg-trinity/",
    "https://komikcast.me/komik/birth-of-evil/",
    "https://komikcast.me/komik/bisheng-supremes-rebirth/",
    "https://komikcast.me/komik/bishoujo-ni-natta-chiyahoya-sarete-jinsei-jinsei-easy-de-ikitai/",
    "https://komikcast.me/komik/bishoujo-sakka-to-mezasu-million-selleeeeeeeeer/",
    "https://komikcast.me/komik/bite-into-me/",
    "https://komikcast.me/komik/biting-is-wrong/",
    "https://komikcast.me/komik/bitou-na-koi/",
    "https://komikcast.me/komik/black-abyss-at-dawn/",
    "https://komikcast.me/komik/black-bird/",
    "https://komikcast.me/komik/black-bullet/",
    "https://komikcast.me/komik/black-card/",
    "https://komikcast.me/komik/black-cat-and-soldier/",
    "https://komikcast.me/komik/black-clover/",
    "https://komikcast.me/komik/black-clover-gaiden-quartet-knights/",
    "https://komikcast.me/komik/black-gakkou-ni-tsutomete-shimatta-sensei/",
    "https://komikcast.me/komik/black-haze/",
    "https://komikcast.me/komik/black-kanojo/",
    "https://komikcast.me/komik/black-maid-revengers/",
    "https://komikcast.me/komik/black-scavenger/",
    "https://komikcast.me/komik/black-torch/",
    "https://komikcast.me/komik/black%e2%98%85out/",
    "https://komikcast.me/komik/black999/",
    "https://komikcast.me/komik/blacksun/",
    "https://komikcast.me/komik/blade-and-expedition-impervious/",
    "https://komikcast.me/komik/blade-from-a-perishing-world/",
    "https://komikcast.me/komik/blade-note/",
    "https://komikcast.me/komik/blade-of-the-phantom-master/",
    "https://komikcast.me/komik/blade-of-winds-and-thunders/",
    "https://komikcast.me/komik/bladed-petal/",
    "https://komikcast.me/komik/blades-of-the-guardians/",
    "https://komikcast.me/komik/blame/",
    "https://komikcast.me/komik/blanket/",
    "https://komikcast.me/komik/blast/",
    "https://komikcast.me/komik/bleach/",
    "https://komikcast.me/komik/bleach-final-alternative/",
    "https://komikcast.me/komik/blend-s/",
    "https://komikcast.me/komik/bless/",
    "https://komikcast.me/komik/blind-faith/",
    "https://komikcast.me/komik/blinded-by-the-setting-sun/",
    "https://komikcast.me/komik/blood-and-butterflies/",
    "https://komikcast.me/komik/blood-blade/",
    "https://komikcast.me/komik/blood-c/",
    "https://komikcast.me/komik/blood-lad/",
    "https://komikcast.me/komik/blood-revenger/",
    "https://komikcast.me/komik/bloody-heavens/",
    "https://komikcast.me/komik/bloody-monday/",
    "https://komikcast.me/komik/blue/",
    "https://komikcast.me/komik/blue-archive/",
    "https://komikcast.me/komik/blue-hearts/",
    "https://komikcast.me/komik/blue-lock/",
    "https://komikcast.me/komik/blue-period/",
    "https://komikcast.me/komik/blue-phobia/",
    "https://komikcast.me/komik/bna-brand-new-animal/",
    "https://komikcast.me/komik/bocchi-hakase-to-robot-shoujo-no-zetsubou-teki-utopia/",
    "https://komikcast.me/komik/bocchi-jieikan-no-isekai-funsenki/",
    "https://komikcast.me/komik/bocchi-na-bokura-no-renai-jijou/",
    "https://komikcast.me/komik/bocchi-no-boku-ni-kyousei-kanojo-ga-yattekita/",
    "https://komikcast.me/komik/bocchi-tenseiki/",
    "https://komikcast.me/komik/bocchi-the-rock/",
    "https://komikcast.me/komik/bodyguard/",
    "https://komikcast.me/komik/bodyguard-of-the-goddess/",
    "https://komikcast.me/komik/boku-dake-ga-inai-machi/",
    "https://komikcast.me/komik/boku-dake-ga-inai-machi-gaiden/",
    "https://komikcast.me/komik/boku-dake-shitteru-ichinomiya-san/",
    "https://komikcast.me/komik/boku-ga-kotaeru-kimi-no-nazotoki/",
    "https://komikcast.me/komik/boku-ga-shinu-dake-no-hyakumonogatari/",
    "https://komikcast.me/komik/boku-ga-yuusha-de-maou-mo-boku-de/",
    "https://komikcast.me/komik/boku-girl/",
    "https://komikcast.me/komik/boku-ni-koisuru-mechanical/",
    "https://komikcast.me/komik/boku-no-aderia/",
    "https://komikcast.me/komik/boku-no-dokuhime-wa-kyou-mo-kawaii/",
    "https://komikcast.me/komik/boku-no-hero-academia/",
    "https://komikcast.me/komik/boku-no-hero-academia-team-up-mission/",
    "https://komikcast.me/komik/boku-no-heya-ga-dungeon-no-kyuukeijo-ni-natteshimatta-ken/",
    "https://komikcast.me/komik/boku-no-kangaeta-sai-kyo-no-kohai/",
    "https://komikcast.me/komik/boku-no-kanojo-ga-majime-sugiru-shojo-bitch-na-ken/",
    "https://komikcast.me/komik/boku-no-kanojo-sensei/",
    "https://komikcast.me/komik/boku-no-kanojo-wa-saikou-desu/",
    "https://komikcast.me/komik/boku-no-kawaii-musume-wa-futago-no-kenja/",
    "https://komikcast.me/komik/boku-no-kokoro-no-yabai-yatsu/",
    "https://komikcast.me/komik/boku-no-nakama-wa-isekai-saikyou-undead/",
    "https://komikcast.me/komik/boku-no-namae-wa-shounen-a/",
    "https://komikcast.me/komik/boku-no-seito-wa-otona-gyaru/",
    "https://komikcast.me/komik/boku-no-sophia/",
    "https://komikcast.me/komik/boku-no-tsuma-wa-kanjou-ga-nai/",
    "https://komikcast.me/komik/boku-no-yome-no-ranbou-na-aijyo/",
    "https://komikcast.me/komik/boku-to-kimi-no-taisetsu-na-hanashi/",
    "https://komikcast.me/komik/boku-to-senpai-no-tekken-kousai/",
    "https://komikcast.me/komik/boku-wa-isekai-de-fuyo-mahou-to-shoukan-mahou-wo-tenbin-ni-kakeru/",
    "https://komikcast.me/komik/boku-wa-kimitachi-wo-shihai-suru/",
    "https://komikcast.me/komik/boku-wa-mari-no-naka/",
    "https://komikcast.me/komik/boku-wa-mata-kimi-ni-sayonara-no-kazu-o-miru/",
    "https://komikcast.me/komik/boku-wa-ohime-ni-narenai/",
    "https://komikcast.me/komik/boku-wa-ookami/",
    "https://komikcast.me/komik/boku-wa-yurina-onee-chan-wo-ouenshite-imasu/",
    "https://komikcast.me/komik/bokunchi-no-maid-san-tachi/",
    "https://komikcast.me/komik/bokura-no-complex/",
    "https://komikcast.me/komik/bokura-no-kiseki/",
    "https://komikcast.me/komik/bokura-no-sentaku/",
    "https://komikcast.me/komik/bokura-wa-minna-kawaisou/",
    "https://komikcast.me/komik/bokutachi-no-remake/",
    "https://komikcast.me/komik/bokutachi-no-saitan-kyori/",
    "https://komikcast.me/komik/bokutachi-wa-benkyou-ga-dekinai/",
    "https://komikcast.me/komik/bokutachi-wa-hanshoku-wo-yameta/",
    "https://komikcast.me/komik/bone-collection/",
    "https://komikcast.me/komik/bonkotsu-shinpei-no-monster-life/",
    "https://komikcast.me/komik/bonnou-%e2%98%86-saiyuuki/",
    "https://komikcast.me/komik/bonnou-o-nakushitai-shounen-ga-tenshi-ni-dou-ni-ka-shite-morau-ohanashi/",
    "https://komikcast.me/komik/book-eater/",
    "https://komikcast.me/komik/bookworm/",
    "https://komikcast.me/komik/border/",
    "https://komikcast.me/komik/borderline-bestial-corpse/",
    "https://komikcast.me/komik/bored-will-die/",
    "https://komikcast.me/komik/born-to-be-a-god/",
    "https://komikcast.me/komik/born-to-be-god-tokjjom/",
    "https://komikcast.me/komik/born-to-be-rich/",
    "https://komikcast.me/komik/boroboro-no-elf-san-o-shiawaseni-suru-kusuri-uri-san/",
    "https://komikcast.me/komik/boruto-naruto-next-generations/",
    "https://komikcast.me/komik/boruto-saikyo-dash-generations-boruto-sd/",
    "https://komikcast.me/komik/boryaku-no-pantsu/",
    "https://komikcast.me/komik/boss-in-school/",
    "https://komikcast.me/komik/bothered-by-my-neighbors-noises/",
    "https://komikcast.me/komik/botsuraku-yotei-nano-de-kaji-shokunin-wo-mezasu/",
    "https://komikcast.me/komik/bouken-ka-ni-narou/",
    "https://komikcast.me/komik/boukensha-license-o-hakudatsu-sareta-ossan-dakedo-manamusume-ga-dekita-no-de-nonbiri-jinsei/",
    "https://komikcast.me/komik/boukensha-ni-naritai-to-miyako-ni-deteitta-musume-ga-s-rank-ni-natteta/",
    "https://komikcast.me/komik/boukensha-party-wo-tsuihou-sareta-kaifukushi-no-shoujo/",
    "https://komikcast.me/komik/boushoku-hi-no-ken/",
    "https://komikcast.me/komik/bowblade-spirit/",
    "https://komikcast.me/komik/boy-or-girl/",
    "https://komikcast.me/komik/boyfriend/",
    "https://komikcast.me/komik/boyfriend-playing-center/",
    "https://komikcast.me/komik/boyish-girl-x-gyaru/",
    "https://komikcast.me/komik/boys-be-zombitious/",
    "https://komikcast.me/komik/bozebeats/",
    "https://komikcast.me/komik/brainless-witch/",
    "https://komikcast.me/komik/brave-10-s/",
    "https://komikcast.me/komik/brave-fantasia/",
    "https://komikcast.me/komik/break-blade/",
    "https://komikcast.me/komik/break-the-world/",
    "https://komikcast.me/komik/bring-my-level-up-alone/",
    "https://komikcast.me/komik/broken-daily-life/",
    "https://komikcast.me/komik/brother-trap/",
    "https://komikcast.me/komik/brother-villain/",
    "https://komikcast.me/komik/brown-sugar-days/",
    "https://komikcast.me/komik/btooom/",
    "https://komikcast.me/komik/buchimaru-chaos/",
    "https://komikcast.me/komik/buddha-cafe/",
    "https://komikcast.me/komik/buddy-antique/",
    "https://komikcast.me/komik/bug-eater-bug-hunter/",
    "https://komikcast.me/komik/bug-train/",
    "https://komikcast.me/komik/build-a-wall-to-survive/",
    "https://komikcast.me/komik/build-king/",
    "https://komikcast.me/komik/build-up/",
    "https://komikcast.me/komik/builder/",
    "https://komikcast.me/komik/building-the-strongest-shaolin-temple-in-another-world/",
    "https://komikcast.me/komik/bukiyou-na-senpai/",
    "https://komikcast.me/komik/bullet-armors/",
    "https://komikcast.me/komik/bungo/",
    "https://komikcast.me/komik/bungou-stray-dogs/",
    "https://komikcast.me/komik/bunkiten/",
    "https://komikcast.me/komik/burn-the-witch/",
    "https://komikcast.me/komik/burnout-shock/",
    "https://komikcast.me/komik/busamen-gachi-fighter/",
    "https://komikcast.me/komik/busou-shoujo-machiavellianism/",
    "https://komikcast.me/komik/busted-darklord/",
    "https://komikcast.me/komik/buster-keel/",
    "https://komikcast.me/komik/buta-koushaku-ni-tensei-shita-kara-kondo-wa-kimi-ni-suki-to-iitai/",
    "https://komikcast.me/komik/butsuri-san-de-musou-shitetara-motemote-ni-narimashita/",
    "https://komikcast.me/komik/butsuri-teki-ni-koritsu-shiteiru-ore-no-koukou-seikatsu/",
    "https://komikcast.me/komik/buyuden/",
    "https://komikcast.me/komik/by-spring/",
    "https://komikcast.me/komik/by-the-way-dragon-mistress/",
    "https://komikcast.me/komik/byousoku-5-centimeter/",
    "https://komikcast.me/komik/c-o-p/",
    "https://komikcast.me/komik/caelum/",
    "https://komikcast.me/komik/cafe-de-fantome/",
    "https://komikcast.me/komik/cage-of-eden/",
    "https://komikcast.me/komik/call-me-master/",
    "https://komikcast.me/komik/call-me-the-goddess-of-vengeance/",
    "https://komikcast.me/komik/called-game/",
    "https://komikcast.me/komik/can-i-accept-your-proposal-from-all-those-years-ago/",
    "https://komikcast.me/komik/can-i-be-loving-towards-my-wife-who-wants-to-do-all-kinds-of-things/",
    "https://komikcast.me/komik/can-i-put-you-on-the-spot/",
    "https://komikcast.me/komik/can-you-fall-in-love-with-the-skeleton/",
    "https://komikcast.me/komik/cant-defy-the-lonely-girl/",
    "https://komikcast.me/komik/cant-stop-cursing-you/",
    "https://komikcast.me/komik/candy-cigarettes/",
    "https://komikcast.me/komik/candy-flurry-amenofuru/",
    "https://komikcast.me/komik/cang-yuantu/",
    "https://komikcast.me/komik/cangren/",
    "https://komikcast.me/komik/cardcaptor-sakura/",
    "https://komikcast.me/komik/carrying-the-goddess-along/",
    "https://komikcast.me/komik/castle/",
    "https://komikcast.me/komik/cat-chiyo/",
    "https://komikcast.me/komik/cat-maid-and-mistress/",
    "https://komikcast.me/komik/catbox-reverse/",
    "https://komikcast.me/komik/catch-female-ghost-and-fall-in-love/",
    "https://komikcast.me/komik/cate-land/",
    "https://komikcast.me/komik/catulus-syndrome/",
    "https://komikcast.me/komik/cavalier-of-the-abyss/",
    "https://komikcast.me/komik/celestial-jailer/",
    "https://komikcast.me/komik/cell/",
    "https://komikcast.me/komik/ceos-sudden-proposal/",
    "https://komikcast.me/komik/ceos-top-master/",
    "https://komikcast.me/komik/cerebral-renal-failure/",
    "https://komikcast.me/komik/chainsawman/",
    "https://komikcast.me/komik/chand-ra-has/",
    "https://komikcast.me/komik/changan-fantasy/",
    "https://komikcast.me/komik/change/",
    "https://komikcast.me/komik/change-123/",
    "https://komikcast.me/komik/change-season-2/",
    "https://komikcast.me/komik/changing-seats/",
    "https://komikcast.me/komik/chanto-suenai-kyuuketsuki-chan/",
    "https://komikcast.me/komik/chao-hua-armor-awakening/",
    "https://komikcast.me/komik/chaos-alchemist/",
    "https://komikcast.me/komik/chaos-attack/",
    "https://komikcast.me/komik/chaos-emperor/",
    "https://komikcast.me/komik/chaos-golden-crow/",
    "https://komikcast.me/komik/chaos-jinwu/",
    "https://komikcast.me/komik/chaos-pill-god/",
    "https://komikcast.me/komik/chaos-theory/",
    "https://komikcast.me/komik/chaotic-sword-god/",
    "https://komikcast.me/komik/chaotic-sword-god-remake/",
    "https://komikcast.me/komik/charging-war-girl/",
    "https://komikcast.me/komik/chasing-spica/",
    "https://komikcast.me/komik/cheat-kusushi-no-slow-life-isekai-ni-tsukurou-drugstore/",
    "https://komikcast.me/komik/cheat-skill-shisha-sosei-ga-kakusei-shite-inishieno-maougun-wo-fukkatsu-sasete-shimaimashita-dare-mo-shinasenai-saikyou-hiiro/",
    "https://komikcast.me/komik/cheating-men-must-die/",
    "https://komikcast.me/komik/checkpoint/",
    "https://komikcast.me/komik/chemy/",
    "https://komikcast.me/komik/cherry-teacher-sakura-naoki/",
    "https://komikcast.me/komik/chiaraijima-kanako-wa-naze-%e2%97%8b%e2%97%8b-suru-no-ka/",
    "https://komikcast.me/komik/chibi-arcane-sniper/",
    "https://komikcast.me/komik/chibi-miku-san/",
    "https://komikcast.me/komik/chicchai-kanojo-senpai-ga-kawaisugiru/",
    "https://komikcast.me/komik/chicchai-kanojo-senpai-to-douseishimasu/",
    "https://komikcast.me/komik/chicchai-senpai-ga-kawaisugiru/",
    "https://komikcast.me/komik/chichi-ga-loli-na-mono-de/",
    "https://komikcast.me/komik/chichi-wa-eiyuu-haha-wa-seirei-musume-no-watashi-wa-tenseisha/",
    "https://komikcast.me/komik/chief-of-the-novice-village/",
    "https://komikcast.me/komik/chihiro-kun-wa-atashi-choudoku/",
    "https://komikcast.me/komik/chihou-kishi-hans-no-junan/",
    "https://komikcast.me/komik/chiis-sweet-home/",
    "https://komikcast.me/komik/chiisai-nozomi-to-ooki-na-yume/",
    "https://komikcast.me/komik/chiisana-mori-no-ookami-chan/",
    "https://komikcast.me/komik/chikan-otoko/",
    "https://komikcast.me/komik/chikan-saresou-ni-natteiru-s-kyuu-bishoujo-wo-tasuketara-tonari-no-seki-no-osanajimi-datta/",
    "https://komikcast.me/komik/chikanoko/",
    "https://komikcast.me/komik/chikashitsu-dungeon-binbou-kyoudai-wa-goraku-o-motomete-saikyou-e/",
    "https://komikcast.me/komik/chikyuu-kiroku-0001/",
    "https://komikcast.me/komik/chikyuu-no-owari-wa-koi-no-hajimari/",
    "https://komikcast.me/komik/chikyuu-saigo-no-hi-kokuhaku-suru-hanashi/",
    "https://komikcast.me/komik/chikyuu-umare-no-anata-e/",
    "https://komikcast.me/komik/child-of-light/",
    "https://komikcast.me/komik/childhood-friend/",
    "https://komikcast.me/komik/childhood-friends-commuting-to-school-by-train/",
    "https://komikcast.me/komik/childhood-friends-with-a-pet-and-master-relationship/",
    "https://komikcast.me/komik/chitose-kun-is-inside-a-ramune-bottle/",
    "https://komikcast.me/komik/chocolat-company-women-yuri-anthology/",
    "https://komikcast.me/komik/choice-of-error-hero/",
    "https://komikcast.me/komik/chong-sheng-resurrection/",
    "https://komikcast.me/komik/chongsa/",
    "https://komikcast.me/komik/choppiri-toshiue-demo-kanojo-ni-shite-kuremasu-ka/",
    "https://komikcast.me/komik/choroidesuyo-onigoroshi-san/",
    "https://komikcast.me/komik/chorokoi-zo-kyuukan-san/",
    "https://komikcast.me/komik/chotto-dake-ai-ga-omoi-dark-elf-ga-isekai-kara-oikakete-kita/",
    "https://komikcast.me/komik/chotto-ippai/",
    "https://komikcast.me/komik/chotto-kiken-na-amaama-onii-san/",
    "https://komikcast.me/komik/chotto-mune-ga-dekakute-kao-ga-ii-ko/",
    "https://komikcast.me/komik/chou-donkan-mob-ni-heroine-ga-kouryaku-sarete-otome-game-ga-hajimarimasen/",
    "https://komikcast.me/komik/chou-onna-kirai-na-ore-ga-isekai-no-joshikou-ni-ryuugaku-suru-koto-ni-natta/",
    "https://komikcast.me/komik/chouchou-koi/",
    "https://komikcast.me/komik/chouetsu-sha-to-natta-ossan-wa-my-pace-ni-isekai-wo-sansaku-suru/",
    "https://komikcast.me/komik/choujin-koukousei-tachi-wa-isekai-demo-yoyuu-de-ikinuku-you-desu/",
    "https://komikcast.me/komik/choujin-x/",
    "https://komikcast.me/komik/choukyoushi-wa-mamono-ni-kakomarete-ikite-ikimasu-yuusha-party-ni-oite-ikareta-kedo-densetsu-no-mamono-to-deai-saikyou-ni-natteta/",
    "https://komikcast.me/komik/chromosome-47/",
    "https://komikcast.me/komik/chronicles-of-heavenly-demon/",
    "https://komikcast.me/komik/chronicles-of-ling-yan/",
    "https://komikcast.me/komik/chronicles-of-the-martial-gods-return/",
    "https://komikcast.me/komik/chrono-magia-toki-no-shoukanshi-to-shiraha-no-hanayome/",
    "https://komikcast.me/komik/chrono-monochrome/",
    "https://komikcast.me/komik/chu-boss-san-level-99-saikyou-no-buka-tachi-to-tomo-ni-nishuume-totsunyuu/",
    "https://komikcast.me/komik/chuan-yue-xi-yuan-3000-hou/",
    "https://komikcast.me/komik/chuuko-demo-koi-ga-shitai/",
    "https://komikcast.me/komik/cigarette-cherry/",
    "https://komikcast.me/komik/cinderella-wa-sagasanai/",
    "https://komikcast.me/komik/circle-crash/",
    "https://komikcast.me/komik/circle-zeros-otherworldly-hero/",
    "https://komikcast.me/komik/circle-zeros-otherworldly-hero-business-reboot/",
    "https://komikcast.me/komik/citrus/",
    "https://komikcast.me/komik/citrus-plus/",
    "https://komikcast.me/komik/city/",
    "https://komikcast.me/komik/city-god-eye/",
    "https://komikcast.me/komik/city-immortal-emperor-dragon-king-temple/",
    "https://komikcast.me/komik/city-of-darkness/",
    "https://komikcast.me/komik/city-of-heaven-timestamp/",
    "https://komikcast.me/komik/city-of-sanctuary/",
    "https://komikcast.me/komik/city-of-the-dead-sorcerer/",
    "https://komikcast.me/komik/clark-walker-empire/",
    "https://komikcast.me/komik/class-de-inkya-no-ore-ga-jitsu-wa-daininki-band-no-vocal-na-ken/",
    "https://komikcast.me/komik/class-ga-isekai-shoukan-sareta-naka-ore-dake-nokotta-n-desu-ga/",
    "https://komikcast.me/komik/class-president-and-delinquent/",
    "https://komikcast.me/komik/class-saiya-sune-de-urareta-ore-wa-jitsu-wa-saikyou-parameter/",
    "https://komikcast.me/komik/class-teni-de-ore-dake-haburareta-no-de-doukyuusei-harem-tsukuru-koto-ni-shita/",
    "https://komikcast.me/komik/class-goto-shuudan-teni-shimashita-ga-ichiban-tsuyoi-ore-wa-saijaku-no-shounin-ni-gisouchuu/",
    "https://komikcast.me/komik/classmate-kamimura-yuuka-wa-kou-itta/",
    "https://komikcast.me/komik/claymore/",
    "https://komikcast.me/komik/clockwork-planet/",
    "https://komikcast.me/komik/close-mad-doctor/",
    "https://komikcast.me/komik/close-sister/",
    "https://komikcast.me/komik/clover-tetshuhiro-hirakawa/",
    "https://komikcast.me/komik/cocoa-senpai-no-yuugana-soutai-ron-chuutoriaru-chuugaku-suugaku-de-wakaru-tokushu-soutaiseiriron/",
    "https://komikcast.me/komik/cocoa/",
    "https://komikcast.me/komik/code-breaker/",
    "https://komikcast.me/komik/code-geass-shikkoku-no-renya/",
    "https://komikcast.me/komik/code-vein-memory-echoes/",
    "https://komikcast.me/komik/codenamel-o-v-e/",
    "https://komikcast.me/komik/coffee-cat/",
    "https://komikcast.me/komik/coffee-thief/",
    "https://komikcast.me/komik/coffee-wo-shizuka-ni/",
    "https://komikcast.me/komik/coin-laundry-no-kireina-onee-san/",
    "https://komikcast.me/komik/collecting-the-divine/",
    "https://komikcast.me/komik/collectors/",
    "https://komikcast.me/komik/college-student-and-ol/",
    "https://komikcast.me/komik/colorless/",
    "https://komikcast.me/komik/combine-cube/",
    "https://komikcast.me/komik/come-come-vanilla/",
    "https://komikcast.me/komik/come-on-out-romeo/",
    "https://komikcast.me/komik/comic-girls/",
    "https://komikcast.me/komik/confessing-to-my-childhood-friend-whos-worried-shes-plain/",
    "https://komikcast.me/komik/confession-stories/",
    "https://komikcast.me/komik/contact-x-contact/",
    "https://komikcast.me/komik/contender-nine-word-emperor/",
    "https://komikcast.me/komik/convenience-store-of-the-dead-the-convenience-store-clerk-will-get-rescued-in-100-days/",
    "https://komikcast.me/komik/corporal-punishment-teacher/",
    "https://komikcast.me/komik/cotton-candy/",
    "https://komikcast.me/komik/could-you-turn-three-perverted-sisters-into-fine-brides/",
    "https://komikcast.me/komik/count-over/",
    "https://komikcast.me/komik/counter-cube/",
    "https://komikcast.me/komik/countrouble/",
    "https://komikcast.me/komik/country-of-the-crimson-moon/",
    "https://komikcast.me/komik/couple-of-mirrors/",
    "https://komikcast.me/komik/couples-twitter/",
    "https://komikcast.me/komik/covert-agent/",
    "https://komikcast.me/komik/cradle-of-monsters/",
    "https://komikcast.me/komik/craft-game-no-nouryoku-de-isekai-kouryaku/",
    "https://komikcast.me/komik/craftsman/",
    "https://komikcast.me/komik/crayon-days-daikirai-na-aitsu/",
    "https://komikcast.me/komik/crazy-food-truck/",
    "https://komikcast.me/komik/crazy-for-you/",
    "https://komikcast.me/komik/crazy-leveling-system/",
    "https://komikcast.me/komik/crazy-professor-system/",
    "https://komikcast.me/komik/creepy-cat/",
    "https://komikcast.me/komik/cremators/",
    "https://komikcast.me/komik/crepe-panic/",
    "https://komikcast.me/komik/crepuscule/",
    "https://komikcast.me/komik/cretaceous-period/",
    "https://komikcast.me/komik/crime-digging-brother/",
    "https://komikcast.me/komik/criminale/",
    "https://komikcast.me/komik/crimson-stone/",
    "https://komikcast.me/komik/crisis-talk/",
    "https://komikcast.me/komik/cross-account/",
    "https://komikcast.me/komik/cross-days/",
    "https://komikcast.me/komik/cross-x-regalia/",
    "https://komikcast.me/komik/crossing-the-adorable-concubine-to-counter-attack/",
    "https://komikcast.me/komik/crows/",
    "https://komikcast.me/komik/crows-gaiden/",
    "https://komikcast.me/komik/crows-the-aftermath/",
    "https://komikcast.me/komik/crows-zero-2/",
    "https://komikcast.me/komik/crying-voice/",
    "https://komikcast.me/komik/cultivating-immortals-with-rich-women/",
    "https://komikcast.me/komik/cultivation-chat-group/",
    "https://komikcast.me/komik/cultivation-record-of-the-undead-king-undead-kings-immortal-cultivation/",
    "https://komikcast.me/komik/cultivation-return-on-campus/",
    "https://komikcast.me/komik/cultivation-successors-in-the-city/",
    "https://komikcast.me/komik/cultivation-through-science/",
    "https://komikcast.me/komik/cultivator-against-hero-society/",
    "https://komikcast.me/komik/cultivators-in-the-city/",
    "https://komikcast.me/komik/cunni-noroi-no-les-play-2/",
    "https://komikcast.me/komik/cunni-noroi-no-les-play/",
    "https://komikcast.me/komik/cupid-chocolates/",
    "https://komikcast.me/komik/cuprums-bride/",
    "https://komikcast.me/komik/curse-blood/",
    "https://komikcast.me/komik/cursed-by-heaven-im-stronger/",
    "https://komikcast.me/komik/custom-heavenly-court/",
    "https://komikcast.me/komik/custom-maid/",
    "https://komikcast.me/komik/cute-bodyguard/",
    "https://komikcast.me/komik/cyber-crazy-moon/",
    "https://komikcast.me/komik/cystic-story-call-the-spear/",
    "https://komikcast.me/komik/d-gray-man/",
    "https://komikcast.me/komik/d-rank-adventurer-invited-by-a-brave-party-and-the-stalking-princess/",
    "https://komikcast.me/komik/d-30/",
    "https://komikcast.me/komik/d-frag/",
    "https://komikcast.me/komik/da-yuan-shen/",
    "https://komikcast.me/komik/dachi-no-imouto/",
    "https://komikcast.me/komik/dad-the-strongest-god-of-war/",
    "https://komikcast.me/komik/daddy-from-hell/",
    "https://komikcast.me/komik/dagashi-kashi/",
    "https://komikcast.me/komik/dai-nana-ouji-ni-umareta-kedo-nani-surya-iino/",
    "https://komikcast.me/komik/daidai-wa-hantoumei-ni-nidone-suru/",
    "https://komikcast.me/komik/daidokoro-no-dragon/",
    "https://komikcast.me/komik/daikenja-no-manadeshi-bougyo-mahou-no-susume-great-wise-mans-beloved-pupil/",
    "https://komikcast.me/komik/daily-life-of-a-couple-in-which-the-boyfriend-became-a-girl-one-day/",
    "https://komikcast.me/komik/daily-life-of-my-childhood-friend-the-airy-esper-high-school-girl/",
    "https://komikcast.me/komik/daily-life-of-sa-chan-a-drugstore-clerk/",
    "https://komikcast.me/komik/dain-ironworks/",
    "https://komikcast.me/komik/daizai-dungeon-kyoushuujo-no-hanmen-kyoushi-hazure-gift-no-annaijin-ga-jitsuha-saikyou-no-tansakusha-de-aru-koto-o-seito-tachi-wa-mada-shiranai/",
    "https://komikcast.me/komik/dakimakura-to-ha-kekkon-dekinai/",
    "https://komikcast.me/komik/dakkou-suru-made-ochimasen/",
    "https://komikcast.me/komik/dam-of-the-forest/",
    "https://komikcast.me/komik/damage-danshi/",
    "https://komikcast.me/komik/dame-na-kanojo-wa-amaetai/",
    "https://komikcast.me/komik/dame-ni-shite-koyou-to-suru-nenjiou-5-bai-kanojo-to-correct/",
    "https://komikcast.me/komik/dame-skill-auto-mode-ga-kakuseishimashita-are-guild-no-scout-san-ore-wo-iranai-tte-itte-masendeshita/",
    "https://komikcast.me/komik/damena-onee-san-demo-sukida-yo-ne/",
    "https://komikcast.me/komik/damocles-sword-bearer/",
    "https://komikcast.me/komik/danchigai/",
    "https://komikcast.me/komik/dandadan/",
    "https://komikcast.me/komik/dangan-tenshi-fan-club/",
    "https://komikcast.me/komik/danjou-no-yuujou-wa-seiritsu-suru-iya-shinai/",
    "https://komikcast.me/komik/dansai-bunri-no-crime-edge/",
    "https://komikcast.me/komik/danshi-koukousei-ga-mahou-shoujo-ni-naru-hanashi/",
    "https://komikcast.me/komik/danshi-koukousei-no-nichijou/",
    "https://komikcast.me/komik/danshi-koukousei-wa-kyou-mo-onaka-ga-suiteiru/",
    "https://komikcast.me/komik/danshi-koukousei-wo-yashinaitai-onee-san-no-hanashi/",
    "https://komikcast.me/komik/danshi-toire-de-machiawase/",
    "https://komikcast.me/komik/danshiko-ga-kyo-gakko-ni-pinto-hazure-no-nazo-shojo/",
    "https://komikcast.me/komik/danwu-supreme/",
    "https://komikcast.me/komik/dao-yin/",
    "https://komikcast.me/komik/daoist-magician-from-another-world/",
    "https://komikcast.me/komik/dare-ga-yonda-no-isekai-to-game-dzukuri-to-recruit-shoukan/",
    "https://komikcast.me/komik/dare-ni-mo-ienai-futarigoto/",
    "https://komikcast.me/komik/dark-air/",
    "https://komikcast.me/komik/dark-energy-engine/",
    "https://komikcast.me/komik/dark-gathering/",
    "https://komikcast.me/komik/dark-hole-another-survivor/",
    "https://komikcast.me/komik/dark-sea-era/",
    "https://komikcast.me/komik/dark-star-emperor/",
    "https://komikcast.me/komik/dark-tale/",
    "https://komikcast.me/komik/darkness-and-death/",
    "https://komikcast.me/komik/darling-in-the-franxx/",
    "https://komikcast.me/komik/darwins-game/",
    "https://komikcast.me/komik/date-a-live/",
    "https://komikcast.me/komik/dawn-of-the-frozen-wastelands/",
    "https://komikcast.me/komik/days/",
    "https://komikcast.me/komik/dazzling-prince/",
    "https://komikcast.me/komik/dead-company/",
    "https://komikcast.me/komik/dead-mount-death-play/",
    "https://komikcast.me/komik/dead-soul-revolver/",
    "https://komikcast.me/komik/deadbeat-hero/",
    "https://komikcast.me/komik/deaddie-du-dead/",
    "https://komikcast.me/komik/deadly-vs-romance/",
    "https://komikcast.me/komik/deadman-31/",
    "https://komikcast.me/komik/deadman-wonderland/",
    "https://komikcast.me/komik/deadpool-samurai-one-shot/",
    "https://komikcast.me/komik/deadpool-samurai/",
    "https://komikcast.me/komik/dear-future-you/",
    "https://komikcast.me/komik/dear-my-living-dead/",
    "https://komikcast.me/komik/dear-my-teacher/",
    "https://komikcast.me/komik/dear-sir-married-to-a-killer/",
    "https://komikcast.me/komik/death-field/",
    "https://komikcast.me/komik/death-march-kara-hajimaru-isekai-kofuku-kyoku/",
    "https://komikcast.me/komik/death-march-kara-hajimaru-isekai-kyousoukyoku/",
    "https://komikcast.me/komik/death-note/",
    "https://komikcast.me/komik/death-note-color-edition/",
    "https://komikcast.me/komik/death-note-special/",
    "https://komikcast.me/komik/death-row-boy/",
    "https://komikcast.me/komik/deathbound-dukes-daughter-and-seven-noblemen/",
    "https://komikcast.me/komik/deathtopia/",
    "https://komikcast.me/komik/deatte-5-byou-de-battle/",
    "https://komikcast.me/komik/debyuu-jk-wa-ki-ga-ki-janai/",
    "https://komikcast.me/komik/deck-hitotsu-de-isekai-tanbou/",
    "https://komikcast.me/komik/deep-insanity/",
    "https://komikcast.me/komik/defense-devil/",
    "https://komikcast.me/komik/deisui-kanojo/",
    "https://komikcast.me/komik/deitys-path-through-ten-thousand-worlds/",
    "https://komikcast.me/komik/dekisokonai-no-monster-trainer/",
    "https://komikcast.me/komik/dekisokonai-to-yobareta-moto-eiyuu-wa-jikka-kara-tsuihou-sa-retanode-suki-katte-ni-ikiru-koto-ni-shita/",
    "https://komikcast.me/komik/dekoboko-majo-no-oyako-jijou/",
    "https://komikcast.me/komik/delusional-boy/",
    "https://komikcast.me/komik/demand-killer/",
    "https://komikcast.me/komik/demi-chan-wa-kataritai/",
    "https://komikcast.me/komik/demi-gods-and-semi-devils/",
    "https://komikcast.me/komik/demon-asura-becomes-a-5-year-old-loli/",
    "https://komikcast.me/komik/demon-bitch/",
    "https://komikcast.me/komik/demon-blade/",
    "https://komikcast.me/komik/demon-conqueror/",
    "https://komikcast.me/komik/demon-hunter/",
    "https://komikcast.me/komik/demon-king-cheat-system/",
    "https://komikcast.me/komik/demon-king-domination-pet-genius-meng-bao-belly-black-mother/",
    "https://komikcast.me/komik/demon-king-with-low-blood/",
    "https://komikcast.me/komik/demon-king/",
    "https://komikcast.me/komik/demon-lord-2099/",
    "https://komikcast.me/komik/demon-lord-and-the-hero/",
    "https://komikcast.me/komik/demon-painting-master-of-mountain-and-sea-city/",
    "https://komikcast.me/komik/demon-spirit-seed-manual/",
    "https://komikcast.me/komik/demon-spirit-shop/",
    "https://komikcast.me/komik/demon-x-angel-cant-get-along/",
    "https://komikcast.me/komik/demon-slaying-chronicles/",
    "https://komikcast.me/komik/demons-sword-master-of-excalibur-school/",
    "https://komikcast.me/komik/demons-plan-end/",
    "https://komikcast.me/komik/demonic-awakening/",
    "https://komikcast.me/komik/demonic-companions/",
    "https://komikcast.me/komik/demonic-housekeeper/",
    "https://komikcast.me/komik/demons-and-strangers/",
    "https://komikcast.me/komik/dengeki-daisy/",
    "https://komikcast.me/komik/dennou-kakugi-mephistowaltz/",
    "https://komikcast.me/komik/denpa-kyoushi/",
    "https://komikcast.me/komik/densetsu-no-yuusha-no-konkatsu/",
    "https://komikcast.me/komik/dentist-san-your-boobs-are-touching-me/",
    "https://komikcast.me/komik/deor/",
    "https://komikcast.me/komik/descent-of-the-phoenix/",
    "https://komikcast.me/komik/deserve-it/",
    "https://komikcast.me/komik/deshi-ga-kawai-sugite-tsurai/",
    "https://komikcast.me/komik/destiny-of-dragon-gods/",
    "https://komikcast.me/komik/destroy-all-humankind-they-cant-be-regenerated/",
    "https://komikcast.me/komik/detective-conan-police-academy-arc-wild-police-story/",
    "https://komikcast.me/komik/detective-vlog/",
    "https://komikcast.me/komik/dethrone/",
    "https://komikcast.me/komik/detour/",
    "https://komikcast.me/komik/detroit-metal-city/",
    "https://komikcast.me/komik/devil-down-under/",
    "https://komikcast.me/komik/devil-immortal-cultivator/",
    "https://komikcast.me/komik/devil-may-cry-5-visions-of-v/",
    "https://komikcast.me/komik/devil-romance/",
    "https://komikcast.me/komik/devil-survivor-2-animation/",
    "https://komikcast.me/komik/devil-warlord/",
    "https://komikcast.me/komik/devil-chi/",
    "https://komikcast.me/komik/devils-editing/",
    "https://komikcast.me/komik/devils-line/",
    "https://komikcast.me/komik/devilshot/",
    "https://komikcast.me/komik/devouring-eternity/",
    "https://komikcast.me/komik/diamond-no-ace/",
    "https://komikcast.me/komik/diamond-no-ace-act-2/",
    "https://komikcast.me/komik/dianfeng/",
    "https://komikcast.me/komik/dick-cloud/",
    "https://komikcast.me/komik/die-now-telencephalon/",
    "https://komikcast.me/komik/die-please/",
    "https://komikcast.me/komik/dies-irae-amantes-amentes/",
    "https://komikcast.me/komik/different-kings/",
    "https://komikcast.me/komik/digimon-dreamers/",
    "https://komikcast.me/komik/digimon-v-tamer/",
    "https://komikcast.me/komik/digimon-world-redigitize/",
    "https://komikcast.me/komik/dioti-manual-kamisama-tachi-no-renai-daikou/",
    "https://komikcast.me/komik/disciple-of-the-lich-or-how-i-was-cursed-by-the-gods-and-dropped-into-the-abyss/",
    "https://komikcast.me/komik/disguised-as-a-demon-lord/",
    "https://komikcast.me/komik/distancia-the-untouchable-one/",
    "https://komikcast.me/komik/divine-sandhill/",
    "https://komikcast.me/komik/divine-abuse/",
    "https://komikcast.me/komik/divine-doctor/",
    "https://komikcast.me/komik/divine-realm-online/",
    "https://komikcast.me/komik/divine-soul-emperor/",
    "https://komikcast.me/komik/do-chokkyuu-kareshi-x-kanojo/",
    "https://komikcast.me/komik/do-you-hate-romantic-comedies/",
    "https://komikcast.me/komik/docchi-mo-kizukanai/",
    "https://komikcast.me/komik/doctor-in-the-house/",
    "https://komikcast.me/komik/doctor-li-ming/",
    "https://komikcast.me/komik/doctors-rebirth/",
    "https://komikcast.me/komik/does-the-lords-coin-not-shrink/",
    "https://komikcast.me/komik/dog-collar/",
    "https://komikcast.me/komik/dog-end/",
    "https://komikcast.me/komik/dog-nigga/",
    "https://komikcast.me/komik/dogeza-de-tanondemita/",
    "https://komikcast.me/komik/dokgo/",
    "https://komikcast.me/komik/dokgo-2/",
    "https://komikcast.me/komik/dokgo-rewind/",
    "https://komikcast.me/komik/dokumo-oji-san/",
    "https://komikcast.me/komik/dokunie-cooking/",
    "https://komikcast.me/komik/dokuzakura/",
    "https://komikcast.me/komik/dokuzetsu-shoujo-wa-amanojaku/",
    "https://komikcast.me/komik/dokyuu-hentai-hxeros/",
    "https://komikcast.me/komik/dokyuusei-no-oshi-sakka-ni-yuri-mousou-ga-bareta-kekka/",
    "https://komikcast.me/komik/dollkara/",
    "https://komikcast.me/komik/dolls-fall/",
    "https://komikcast.me/komik/dolls-frontline-comic-anthology/",
    "https://komikcast.me/komik/dolls-transmigration-fantasy/",
    "https://komikcast.me/komik/dolly-kill-kill/",
    "https://komikcast.me/komik/dolos-destiny-pill/",
    "https://komikcast.me/komik/domestic-na-kanojo/",
    "https://komikcast.me/komik/dominate-the-three-realms/",
    "https://komikcast.me/komik/domination-one-sword/",
    "https://komikcast.me/komik/dont-mind-%e2%98%85-count-fruit-punch-sensei/",
    "https://komikcast.me/komik/dons-adventure-another-world/",
    "https://komikcast.me/komik/dont-concern-yourself-with-that-book/",
    "https://komikcast.me/komik/dont-worry-even-if-you-became-a-girl-were-still-best-friends/",
    "https://komikcast.me/komik/donten-ni-warau/",
    "https://komikcast.me/komik/doomed-to-be-a-king/",
    "https://komikcast.me/komik/doomsday-girlfriend-my-backyard-leads-to-doomsday/",
    "https://komikcast.me/komik/doomsday-hunter/",
    "https://komikcast.me/komik/doomsday-wonderland/",
    "https://komikcast.me/komik/dorayome/",
    "https://komikcast.me/komik/dore-ga-koi-ka-ga-wakaranai/",
    "https://komikcast.me/komik/dorei-no-onnanoko-wo-guhehe-suru/",
    "https://komikcast.me/komik/dorei-shounin-shika-sentakushi-ga-nai-desu-yo-harem-nani-sore-oishii-no/",
    "https://komikcast.me/komik/dorei-tensei-sono-dorei-saikyou-no-moto-ouji-ni-tsuki/",
    "https://komikcast.me/komik/dorohedoro/",
    "https://komikcast.me/komik/dorondororon/",
    "https://komikcast.me/komik/dororo-to-hyakkimaru-den/",
    "https://komikcast.me/komik/doryoku-shisugita-sekai-saikyou-no-butouka-ha-mahou-sekai-wo-yoyuu-de-ikinuku/",
    "https://komikcast.me/komik/dosanko-gyaru-is-mega-cute/",
    "https://komikcast.me/komik/doshomin-no-watashi-jitsu-wa-tenseisha-deshita/",
    "https://komikcast.me/komik/double-click/",
    "https://komikcast.me/komik/double-faceted-co-dependent-couple/",
    "https://komikcast.me/komik/double-sided-agent/",
    "https://komikcast.me/komik/doujigun-kan/",
    "https://komikcast.me/komik/doujima-kun-ha-doujinai/",
    "https://komikcast.me/komik/doumo-suki-na-hito-ni-horegusuri-wo-irai-sareta-majo-desu/",
    "https://komikcast.me/komik/dousei-seikatsu/",
    "https://komikcast.me/komik/doushite-watashi-ga-bijutsuka-ni/",
    "https://komikcast.me/komik/douyara-boku-no-hanayome-wa-onna-kishidan-na-you-de/",
    "https://komikcast.me/komik/douyara-watashi-no-karada-wa-kanzen-muteki-no-you-desu-ne/",
    "https://komikcast.me/komik/dr-stone-spinoff/",
    "https://komikcast.me/komik/dr-choi-tae-soo/",
    "https://komikcast.me/komik/dr-prisoner/",
    "https://komikcast.me/komik/dr-stone/",
    "https://komikcast.me/komik/dracorun/",
    "https://komikcast.me/komik/dracu-riot/",
    "https://komikcast.me/komik/dracula-yakin/",
    "https://komikcast.me/komik/dragalia-lost/",
    "https://komikcast.me/komik/dragon-ball-super/",
    "https://komikcast.me/komik/dragon-dance/",
    "https://komikcast.me/komik/dragon-ego/",
    "https://komikcast.me/komik/dragon-emperor-martial-god/",
    "https://komikcast.me/komik/dragon-heroes-crow/",
    "https://komikcast.me/komik/dragon-king-awakening/",
    "https://komikcast.me/komik/dragon-king-hall/",
    "https://komikcast.me/komik/dragon-king-of-the-world/",
    "https://komikcast.me/komik/dragon-king-son/",
    "https://komikcast.me/komik/dragon-master/",
    "https://komikcast.me/komik/dragon-nest-sage-prophecy/",
    "https://komikcast.me/komik/dragon-princess/",
    "https://komikcast.me/komik/dragon-pulse/",
    "https://komikcast.me/komik/dragon-soul-agent/",
    "https://komikcast.me/komik/dragon-star-god/",
    "https://komikcast.me/komik/dragon-throne/",
    "https://komikcast.me/komik/dragon-warriors/",
    "https://komikcast.me/komik/dragons-blood-vessels/",
    "https://komikcast.me/komik/dragons-chosen/",
    "https://komikcast.me/komik/dragons-rioting/",
    "https://komikcast.me/komik/drawing-romance/",
    "https://komikcast.me/komik/drawing-while-masturbating/",
    "https://komikcast.me/komik/drawing-saikyou-mangaka-wa-oekaki-skill-de-isekai-musou-suru/",
    "https://komikcast.me/komik/dream-maker-hatsune-miku/",
    "https://komikcast.me/komik/dream-shaper/",
    "https://komikcast.me/komik/dream-to-be-an-idol/",
    "https://komikcast.me/komik/dreamside/",
    "https://komikcast.me/komik/drifters/",
    "https://komikcast.me/komik/dual-na-kanojo-no-taoshikata/",
    "https://komikcast.me/komik/dukedoms-legendary-prodigy/",
    "https://komikcast.me/komik/dumbbell-nan-kilo-moteru/",
    "https://komikcast.me/komik/dungeon-battle-royale-maou-ni-nattanode-sekai-touitsu-wo-mezashimasu/",
    "https://komikcast.me/komik/dungeon-busters/",
    "https://komikcast.me/komik/dungeon-house/",
    "https://komikcast.me/komik/dungeon-kurashi-no-moto-yuusha/",
    "https://komikcast.me/komik/dungeon-nursery/",
    "https://komikcast.me/komik/dungeon-reset/",
    "https://komikcast.me/komik/dungeon-seeker/",
    "https://komikcast.me/komik/dungeon-sherpa/",
    "https://komikcast.me/komik/dungeon-tou-de-yadoya-wo-yarou-souzou-mahou-wo-moratta-ore-no-hosoude-hanjouki/",
    "https://komikcast.me/komik/dungeons-artifacts/",
    "https://komikcast.me/komik/dushi-xian-wang/",
    "https://komikcast.me/komik/dushi-xiaoyao/",
    "https://komikcast.me/komik/dushi-xiewang/",
    "https://komikcast.me/komik/dushi-xiuzhen/",
    "https://komikcast.me/komik/dushi-xuan-lang/",
    "https://komikcast.me/komik/dushi-zhizun/",
    "https://komikcast.me/komik/dusk-howler/",
    "https://komikcast.me/komik/e-rank-no-kusushi/",
    "https://komikcast.me/komik/earthchild/",
    "https://komikcast.me/komik/eclipse-walker/",
    "https://komikcast.me/komik/ecstas-online/",
    "https://komikcast.me/komik/eden-tsuruoka-nobuhisa/",
    "https://komikcast.me/komik/eden-game/",
    "https://komikcast.me/komik/edens-zero/",
    "https://komikcast.me/komik/eeh-tamer-wa-tsukaenai-tte-party-kara-tsuiho-shita-yo-ne/",
    "https://komikcast.me/komik/efforts-never-betray/",
    "https://komikcast.me/komik/eguchi-kun-wa-minogasanai/",
    "https://komikcast.me/komik/eien-ni-korosare-tsuzukeru-natsu/",
    "https://komikcast.me/komik/eisen-flugel/",
    "https://komikcast.me/komik/eisen-no-lovelock/",
    "https://komikcast.me/komik/eiyu-no-musume-shite-umarekawatta-eiyu-wa-futatabi-eiyu-o-mezasu/",
    "https://komikcast.me/komik/eiyu-oh-bu-wo-kiwameru-tame-tensei-su-soshite-sekai-saikyou-no-minarai-kisi/",
    "https://komikcast.me/komik/eiyuu-densetsu-sen-no-kiseki/",
    "https://komikcast.me/komik/eiyuu-densetsu-sora-no-kiseki/",
    "https://komikcast.me/komik/eiyuu-kyoushitsu/",
    "https://komikcast.me/komik/eiyuu-kyoushitsu-honoo-no-empress/",
    "https://komikcast.me/komik/eleceed/",
    "https://komikcast.me/komik/elephant-invisible/",
    "https://komikcast.me/komik/eleventh-consecutive-brave/",
    "https://komikcast.me/komik/elf-boyfriend-boyish-girlfriend/",
    "https://komikcast.me/komik/elf-droid/",
    "https://komikcast.me/komik/elf-tensei-kara-no-cheat-kenkokuki/",
    "https://komikcast.me/komik/elf-yome-hajimeru-isekai-ryoushu-seikatsu/",
    "https://komikcast.me/komik/elf-san-kako-hen/",
    "https://komikcast.me/komik/ember-cocoon-ming-chen/",
    "https://komikcast.me/komik/emergency-rations-bountiful-feasts/",
    "https://komikcast.me/komik/emperor-domination/",
    "https://komikcast.me/komik/emperor-jiwu-xuan/",
    "https://komikcast.me/komik/emperor-lingwu/",
    "https://komikcast.me/komik/emperor-son-in-law/",
    "https://komikcast.me/komik/empiras-awakening/",
    "https://komikcast.me/komik/ennoshita-no-chikaramocha/",
    "https://komikcast.me/komik/enami-kun-wa-ikiru-no-ga/",
    "https://komikcast.me/komik/enchanter/",
    "https://komikcast.me/komik/end-of-nightmare/",
    "https://komikcast.me/komik/end-of-the-world-2028/",
    "https://komikcast.me/komik/end-rollback/",
    "https://komikcast.me/komik/endeavors-cross/",
    "https://komikcast.me/komik/ending-maker/",
    "https://komikcast.me/komik/endless-rebirth/",
    "https://komikcast.me/komik/endless-your-world/",
    "https://komikcast.me/komik/enemies/",
    "https://komikcast.me/komik/energy-hunters/",
    "https://komikcast.me/komik/engage-princess-side%e3%83%bbby%e3%83%bbside/",
    "https://komikcast.me/komik/english-xx-sensei/",
    "https://komikcast.me/komik/enishi-kun-wa-masho-harem-taishitsu-ni-mezamemashita/",
    "https://komikcast.me/komik/enmusubi-no-ki/",
    "https://komikcast.me/komik/enoch/",
    "https://komikcast.me/komik/enryo-zero-no-gyaru/",
    "https://komikcast.me/komik/entertainment-spring-and-autumn-palm-reading-culture/",
    "https://komikcast.me/komik/entrance-exam-substitute-cross-dressing-boy/",
    "https://komikcast.me/komik/enzai-de-shokei-sareta-koushaku-reijou-wa-konse-de-wa-mofu-kami-sama-to-odayaka-ni-sugoshitai/",
    "https://komikcast.me/komik/epic-of-gilgamesh/",
    "https://komikcast.me/komik/erabareru-onna-ni-onarinasai-dewi-fujin-no-konkatsuron/",
    "https://komikcast.me/komik/ernak/",
    "https://komikcast.me/komik/eroge-yattetara-isekai-ni-tensei-shita-no-de-bishoujo-maou-o-doreika-suru/",
    "https://komikcast.me/komik/eroi-koto-suru-tame-ni-kyonyuu-bishoujo-dorei-o-katta-hazu-ga-oshishou-sama-to-shitawa-rete-omotta-toori-ni-ikanaku-naru-hanashi/",
    "https://komikcast.me/komik/eroi-skill-de-isekai-musou/",
    "https://komikcast.me/komik/eromanga-sensei/",
    "https://komikcast.me/komik/escape-from-the-poverty-by-catching-golem/",
    "https://komikcast.me/komik/escort-agency-of-the-apocalypse/",
    "https://komikcast.me/komik/escort-warrior/",
    "https://komikcast.me/komik/ester-de-valonia/",
    "https://komikcast.me/komik/estio/",
    "https://komikcast.me/komik/eternal-club/",
    "https://komikcast.me/komik/eternal-first-god/",
    "https://komikcast.me/komik/eternal-god-emperor/",
    "https://komikcast.me/komik/eternal-kingdom/",
    "https://komikcast.me/komik/eternal-life/",
    "https://komikcast.me/komik/eureka-seven/",
    "https://komikcast.me/komik/evergreen-kasukabe-akira/",
    "https://komikcast.me/komik/everlasting-god-of-sword/",
    "https://komikcast.me/komik/every-minute-ends/",
    "https://komikcast.me/komik/evil-heroes/",
    "https://komikcast.me/komik/evil-is-king/",
    "https://komikcast.me/komik/evolution-frenzy-the-frenzy-of-evolution/",
    "https://komikcast.me/komik/evolutionary-game/",
    "https://komikcast.me/komik/excellent-product/",
    "https://komikcast.me/komik/excuse-me-but-the-world-will-be-gone-for-a-while/",
    "https://komikcast.me/komik/exorcism/",
    "https://komikcast.me/komik/exorcist-to-kubiwa-no-akuma/",
    "https://komikcast.me/komik/exorcist-zhong-kui/",
    "https://komikcast.me/komik/expressionless-face-girl-and-emotional-face-boy/",
    "https://komikcast.me/komik/exterminator/",
    "https://komikcast.me/komik/extreme-god/",
    "https://komikcast.me/komik/extreme-mad-emperor-system/",
    "https://komikcast.me/komik/face-genius/",
    "https://komikcast.me/komik/face-slap/",
    "https://komikcast.me/komik/face-with-love-affection-and-time/",
    "https://komikcast.me/komik/fainda-goshi-no-ano-ko/",
    "https://komikcast.me/komik/fairy-agent/",
    "https://komikcast.me/komik/fairy-bone/",
    "https://komikcast.me/komik/fairy-demon-dad/",
    "https://komikcast.me/komik/fairy-drawing-ssr/",
    "https://komikcast.me/komik/fairy-killer/",
    "https://komikcast.me/komik/fairy-king/",
    "https://komikcast.me/komik/fairy-kings-daily-life/",
    "https://komikcast.me/komik/fairy-tail/",
    "https://komikcast.me/komik/fairy-tail-city-hero/",
    "https://komikcast.me/komik/fairy-tail-gaiden-raigo-issen/",
    "https://komikcast.me/komik/fairy-tail-gaiden-road-knight/",
    "https://komikcast.me/komik/fairy-tail-gaiden-sabertooth/",
    "https://komikcast.me/komik/fairy-tail-ice-trail/",
    "https://komikcast.me/komik/fairy-tail-the-movie-priestess-of-the-phoenix/",
    "https://komikcast.me/komik/fairy-tail-100-years-quest/",
    "https://komikcast.me/komik/fairy-tail-blue-mistral/",
    "https://komikcast.me/komik/fairy-tail-happys-grand/",
    "https://komikcast.me/komik/fairy-teach-me-to-install-x/",
    "https://komikcast.me/komik/fake-hero/",
    "https://komikcast.me/komik/fake-marriage-true-love/",
    "https://komikcast.me/komik/fake-rebellion/",
    "https://komikcast.me/komik/falling-in-the-night-with-you/",
    "https://komikcast.me/komik/fantasy-bishoujo-juniku-ojisan-to/",
    "https://komikcast.me/komik/fast-break/",
    "https://komikcast.me/komik/fast-breakfast/",
    "https://komikcast.me/komik/faster-than-a-kiss/",
    "https://komikcast.me/komik/fatal-code/",
    "https://komikcast.me/komik/fatal-possession/",
    "https://komikcast.me/komik/fatal-sweet-wife-the-president-wants-to-remarry/",
    "https://komikcast.me/komik/fate-coin/",
    "https://komikcast.me/komik/fate-strange-fake/",
    "https://komikcast.me/komik/fate-apocrypha/",
    "https://komikcast.me/komik/fate-grand-order-epic-of-remnant-ashu-tokui-ten-ex-shinkai-dennou-rakudo-se-ra-ph/",
    "https://komikcast.me/komik/fate-grand-order-epic-of-remnant-eirei-kengou-nanaban-shoubu/",
    "https://komikcast.me/komik/fate-grand-order-epic-of-remnant-pseudo-singularity-i-quarantined-territory-of-malice-shinjuku-shinjuku-phantom-incident/",
    "https://komikcast.me/komik/fate-grand-order-from-lostbelt/",
    "https://komikcast.me/komik/fate-grand-order-holy-grail-front/",
    "https://komikcast.me/komik/fate-stay-night-realta-nua-last-episode/",
    "https://komikcast.me/komik/fatestay-night-heavens-feel/",
    "https://komikcast.me/komik/fechippuru-bokura-no-junsuina-koi/",
    "https://komikcast.me/komik/female-demon-benefactor-please-be-dignified/",
    "https://komikcast.me/komik/female-knight-goblin/",
    "https://komikcast.me/komik/feng-ni-tian-xia/",
    "https://komikcast.me/komik/feng-qi-cang-lan/",
    "https://komikcast.me/komik/feng-shen-ji/",
    "https://komikcast.me/komik/feng-shen-ji-ii/",
    "https://komikcast.me/komik/feng-shen-ji-iii/",
    "https://komikcast.me/komik/feng-shui-master/",
    "https://komikcast.me/komik/fenriru-nesan-boku/",
    "https://komikcast.me/komik/fff-class-trashero/",
    "https://komikcast.me/komik/fiend-warrior/",
    "https://komikcast.me/komik/fifth-grader-girlfriend-with-an-adult-love/",
    "https://komikcast.me/komik/fight-club-kindergarten/",
    "https://komikcast.me/komik/fight-hard/",
    "https://komikcast.me/komik/fighters/",
    "https://komikcast.me/komik/fighting-spirit-mainland/",
    "https://komikcast.me/komik/fighting-the-curse/",
    "https://komikcast.me/komik/final-boss/",
    "https://komikcast.me/komik/final-fantasy-lost-stranger/",
    "https://komikcast.me/komik/final-girl/",
    "https://komikcast.me/komik/finding-mama-hololive/",
    "https://komikcast.me/komik/fire-brigade-of-flame/",
    "https://komikcast.me/komik/fire-king-dragon/",
    "https://komikcast.me/komik/fire-punch/",
    "https://komikcast.me/komik/first-class-family/",
    "https://komikcast.me/komik/first-comes-love-then-comes-marriage/",
    "https://komikcast.me/komik/first-day-dating/",
    "https://komikcast.me/komik/first-dragon/",
    "https://komikcast.me/komik/first-god-of-war/",
    "https://komikcast.me/komik/first-master/",
    "https://komikcast.me/komik/first-rate-master/",
    "https://komikcast.me/komik/first-time-gamer-mari-nees-leisurely-vrmmo-journal/",
    "https://komikcast.me/komik/fist-demon-of-mount-hua/",
    "https://komikcast.me/komik/flag-capture-in-the-first-move/",
    "https://komikcast.me/komik/flirt-with-a-prince/",
    "https://komikcast.me/komik/floor-ni-maou-ga-imasu/",
    "https://komikcast.me/komik/flower-day/",
    "https://komikcast.me/komik/flower-war/",
    "https://komikcast.me/komik/flower-warrior/",
    "https://komikcast.me/komik/flower-wizard/",
    "https://komikcast.me/komik/fluffy-yuri-4koma/",
    "https://komikcast.me/komik/fly-me-to-the-moon/",
    "https://komikcast.me/komik/flying-witch/",
    "https://komikcast.me/komik/follow-the-bread-crumbs/",
    "https://komikcast.me/komik/fool-night/",
    "https://komikcast.me/komik/foral-guardian-in-the-city/",
    "https://komikcast.me/komik/forced-marriage-true-love/",
    "https://komikcast.me/komik/forced-to-be-the-strongest-in-the-world/",
    "https://komikcast.me/komik/forced-to-become-the-unbelievably-invincible-saintess/",
    "https://komikcast.me/komik/forced-to-become-the-villains-son-in-law/",
    "https://komikcast.me/komik/foreigner-on-the-periphery/",
    "https://komikcast.me/komik/forgotten/",
    "https://komikcast.me/komik/fortune-arterial/",
    "https://komikcast.me/komik/forty-millenniums-of-cultivation/",
    "https://komikcast.me/komik/fox-and-hunter-yuri/",
    "https://komikcast.me/komik/frame-out/",
    "https://komikcast.me/komik/fray/",
    "https://komikcast.me/komik/frayed-newbie/",
    "https://komikcast.me/komik/freaks/",
    "https://komikcast.me/komik/free-draw/",
    "https://komikcast.me/komik/free-life-isekai-nandemoya-funtouki/",
    "https://komikcast.me/komik/freeter-ga-jimini-isekai-teni-suru/",
    "https://komikcast.me/komik/freezing/",
    "https://komikcast.me/komik/freezing-zero/",
    "https://komikcast.me/komik/from-heaven/",
    "https://komikcast.me/komik/from-nightmare-to-love/",
    "https://komikcast.me/komik/from-the-grave-and-back/",
    "https://komikcast.me/komik/frontier-dairy/",
    "https://komikcast.me/komik/frost-mission-dog-life-dog-style/",
    "https://komikcast.me/komik/fuan-no-tane/",
    "https://komikcast.me/komik/fuan-no-tane-plus/",
    "https://komikcast.me/komik/fudatsuki-no-kyouko-chan/",
    "https://komikcast.me/komik/fuguu-skill-no-renkinjutsushi-henkyou-o-kaitaku-suru-kizoku-no-sannan-ni-tensei-shita-no-de-oida-sarenai-you-ni-ryouchi-keiei-shite-mita/",
    "https://komikcast.me/komik/fuguushoku-to-baka-ni-saremashita-ga-jissai-wa-sorehodo-waruku-arimasen/",
    "https://komikcast.me/komik/fuin-maou-wa-mederaretai/",
    "https://komikcast.me/komik/fujimura-kun-meitsu/",
    "https://komikcast.me/komik/fujiyama-san-wa-shishunki/",
    "https://komikcast.me/komik/fukakaina-boku-no-subette-o/",
    "https://komikcast.me/komik/fukanzen-de-fueisei-de-fushidara/",
    "https://komikcast.me/komik/fukashigi-philia/",
    "https://komikcast.me/komik/fuku-wo-kiru-nara-konna/",
    "https://komikcast.me/komik/fukumenkei-noise/",
    "https://komikcast.me/komik/fukushuu-kansuisha-no-jinsei-nishuume/",
    "https://komikcast.me/komik/fukushuu-kyoushitsu/",
    "https://komikcast.me/komik/fukushuu-no-kyoukasho/",
    "https://komikcast.me/komik/fukushuu-o-koinegau-saikyou-yuusha-wa-yami-no-chikara-de-senmetsu-musou-suru/",
    "https://komikcast.me/komik/full-drive/",
    "https://komikcast.me/komik/full-drum/",
    "https://komikcast.me/komik/full-level-peach-blossom-acupuncturist/",
    "https://komikcast.me/komik/fullmetal-alchemist/",
    "https://komikcast.me/komik/fumetsu-no-anata-e/",
    "https://komikcast.me/komik/fun-territory-defense-of-the-easy-going-lord-the-nameless-village-is-made-into-the-strongest-fortified-city-by-production-magic/",
    "https://komikcast.me/komik/funeral-sword/",
    "https://komikcast.me/komik/fureru-to-kikoeru/",
    "https://komikcast.me/komik/furidashi-ni-ochiru/",
    "https://komikcast.me/komik/furuki-okite-no-mahou-kishi/",
    "https://komikcast.me/komik/furyou-taimashi-reina/",
    "https://komikcast.me/komik/fushi-no-sougishi/",
    "https://komikcast.me/komik/fushichou-e-no-tensei-dragon-taoseru-tte-futsuu-no-tori-ja-nai-yo-ne/",
    "https://komikcast.me/komik/fushigi-neko-no-kyuu-chan/",
    "https://komikcast.me/komik/fushigi-no-mayuri-san/",
    "https://komikcast.me/komik/fushigina-megane-to-tonari-no-yankee/",
    "https://komikcast.me/komik/futaba-san-chi-no-kyoudai/",
    "https://komikcast.me/komik/futago-complex/",
    "https://komikcast.me/komik/futago-futagokoro/",
    "https://komikcast.me/komik/futago-no-ane-ga-miko-toshite-hikitorarete-watashi-wa-suterareta-kedo-tabun-watashi-ga-miko-de-aru/",
    "https://komikcast.me/komik/futago-wazurai/",
    "https://komikcast.me/komik/futago-tachi-no-shojijou/",
    "https://komikcast.me/komik/futari-ashitamo-sorenarini/",
    "https://komikcast.me/komik/futari-de-koi-wo-suru-riyuu/",
    "https://komikcast.me/komik/futari-no-jikan/",
    "https://komikcast.me/komik/futari-no-renai-shoka/",
    "https://komikcast.me/komik/futari-no-table/",
    "https://komikcast.me/komik/futari-wa-konamilk/",
    "https://komikcast.me/komik/futaribocchi-sensou/",
    "https://komikcast.me/komik/futoku-no-guild/",
    "https://komikcast.me/komik/fuufu-ijou-koibito-miman/",
    "https://komikcast.me/komik/fuuka/",
    "https://komikcast.me/komik/fuuki-shoujo-manga/",
    "https://komikcast.me/komik/fuun-kara-no-saikyou-otoko/",
    "https://komikcast.me/komik/fuyu-fenriru-no-itoshigo-to-natta-watashi-ga-zetsubou-kara-iyasareteiku-hanashi/",
    "https://komikcast.me/komik/fuzzy-core/",
    "https://komikcast.me/komik/ga-rei/",
    "https://komikcast.me/komik/gabriel-dropout/",
    "https://komikcast.me/komik/gacha-wo-mawashite-nakama-wo-fuyasu-saikyou-no-bishoujo-gundan-wo-tsukuriagero/",
    "https://komikcast.me/komik/gachiakuta/",
    "https://komikcast.me/komik/gachipin/",
    "https://komikcast.me/komik/gaijin-chan-to-mushinkei-boyish-chan/",
    "https://komikcast.me/komik/gaikotsu-kishi-sama-tadaima-isekai-e-odekakechuu/",
    "https://komikcast.me/komik/gaishuu-isshoku/",
    "https://komikcast.me/komik/gajuu-the-beast/",
    "https://komikcast.me/komik/gakkou-gurashi/",
    "https://komikcast.me/komik/gakkou-gurashi-otayori/",
    "https://komikcast.me/komik/gakkou-no-madonna-gyaru-wa-kimo-garinagara-mo-boku-wo-motomeru/",
    "https://komikcast.me/komik/gakuen-babysitters/",
    "https://komikcast.me/komik/gakuen-chaika/",
    "https://komikcast.me/komik/gakuen-dragon-slayer/",
    "https://komikcast.me/komik/gakuenmono-no-otome-game-no-sekai-ni-tensei-shita-kedo-cheat-mochi-no-haikei-danshi-seitodatta-you-desu/",
    "https://komikcast.me/komik/gakusen-toshi-asterisk/",
    "https://komikcast.me/komik/gal-gohan/",
    "https://komikcast.me/komik/gal-kazoku/",
    "https://komikcast.me/komik/gal-no-haigo-ni-rei-ga-iru-serialization/",
    "https://komikcast.me/komik/gal-tensei-isekai-seikatsu-majidarui/",
    "https://komikcast.me/komik/gal-sen/",
    "https://komikcast.me/komik/gal%e2%98%86cleaning/",
    "https://komikcast.me/komik/galette-anthology/",
    "https://komikcast.me/komik/gamaran/",
    "https://komikcast.me/komik/game-death-sniper/",
    "https://komikcast.me/komik/game-obu-familia-family-senki/",
    "https://komikcast.me/komik/game-of-murder/",
    "https://komikcast.me/komik/game-of-the-strong/",
    "https://komikcast.me/komik/game-over/",
    "https://komikcast.me/komik/game-yaru-kara-100-en-kashite/",
    "https://komikcast.me/komik/gamma/",
    "https://komikcast.me/komik/gan-kon-my-wife-is-a-beautiful-god/",
    "https://komikcast.me/komik/ganbare-douki-chan-serialization/",
    "https://komikcast.me/komik/gang-noir/",
    "https://komikcast.me/komik/gang-of-school/",
    "https://komikcast.me/komik/gang-of-yuusha/",
    "https://komikcast.me/komik/gangho-daeran-life-and-punishment/",
    "https://komikcast.me/komik/gangnam-dokkaebi/",
    "https://komikcast.me/komik/gangsta/",
    "https://komikcast.me/komik/gantz-g/",
    "https://komikcast.me/komik/ganzi-monster/",
    "https://komikcast.me/komik/garbage-brave-isekai-ni-shoukan-sare-suterareta-yuusha-no-fukushuu-monogatari/",
    "https://komikcast.me/komik/gate-jietai-kare-no-chi-nite-kaku-tatakeri/",
    "https://komikcast.me/komik/gate-of-nightmares/",
    "https://komikcast.me/komik/ge-good-ending/",
    "https://komikcast.me/komik/geesen-shoujo-to-ibunka-kouryuu/",
    "https://komikcast.me/komik/gekiryuuchi/",
    "https://komikcast.me/komik/gekkan-shoujo-nozaki-kun/",
    "https://komikcast.me/komik/gekkoh/",
    "https://komikcast.me/komik/general-begs-to-let-go/",
    "https://komikcast.me/komik/genius-doctor-lee-moo-jin/",
    "https://komikcast.me/komik/genius-doctor-black-belly-miss/",
    "https://komikcast.me/komik/genius-mad-man/",
    "https://komikcast.me/komik/genius-poison-princess-consort-han-yun-xi/",
    "https://komikcast.me/komik/genjitsu-de-love-comedy-dekinai-to-dare-ga-kimeta/",
    "https://komikcast.me/komik/genjitsu-shugi-yuusha-no-oukoku-saikenki/",
    "https://komikcast.me/komik/genjuu-chousain/",
    "https://komikcast.me/komik/genkai-koe-no-tenpu-wa-tensei-sha-ni-shika-atsukaenai-overlimit-skill-holders/",
    "https://komikcast.me/komik/genkai-level-1-kara-no-nariagari/",
    "https://komikcast.me/komik/genocide-online/",
    "https://komikcast.me/komik/genshin-impact-fischl-x-bennett-doujinshi/",
    "https://komikcast.me/komik/genshin-impact-4-koma/",
    "https://komikcast.me/komik/genshin-4-koma/",
    "https://komikcast.me/komik/gensou-gourmet/",
    "https://komikcast.me/komik/gentleman-devil/",
    "https://komikcast.me/komik/gesen-no-kanojo/",
    "https://komikcast.me/komik/get-life/",
    "https://komikcast.me/komik/get-out/",
    "https://komikcast.me/komik/getsuyoubi-no-tawawa/",
    "https://komikcast.me/komik/getsuyoubi-no-tawawa-serialization/",
    "https://komikcast.me/komik/getting-into-ecchi-romcom-situations/",
    "https://komikcast.me/komik/ghost-blade/",
    "https://komikcast.me/komik/ghost-emperor/",
    "https://komikcast.me/komik/ghost-girl/",
    "https://komikcast.me/komik/ghost-sweeper-arai-kun/",
    "https://komikcast.me/komik/ghoulmate/",
    "https://komikcast.me/komik/giant-killing/",
    "https://komikcast.me/komik/gikou-taichi-no-torikaeshi-toichi-tte-saisho-ni-itta-yo-na/",
    "https://komikcast.me/komik/gimai-seikatsu/",
    "https://komikcast.me/komik/gintama/",
    "https://komikcast.me/komik/giri-giri-saegiru-katagirisan/",
    "https://komikcast.me/komik/girigiri-out/",
    "https://komikcast.me/komik/girl-and-science/",
    "https://komikcast.me/komik/girl-crush/",
    "https://komikcast.me/komik/girlfriend-who-absolutely-doesnt-want-to-take-a-bath-vs-boyfriend-who-absolutely-wants-her-to-take-a-bath/",
    "https://komikcast.me/komik/girls-a-la-carte/",
    "https://komikcast.me/komik/girls-go-around/",
    "https://komikcast.me/komik/girls-und-panzer-girls-scp-doujinshi/",
    "https://komikcast.me/komik/girls-und-panzer-saga-of-pravda/",
    "https://komikcast.me/komik/girls-und-panzer-motto-love-love-sakusen-desu/",
    "https://komikcast.me/komik/girls-who-behave-differently-when-dating/",
    "https://komikcast.me/komik/girls-frontline/",
    "https://komikcast.me/komik/girls-last-tour/",
    "https://komikcast.me/komik/give-you-my-first-time/",
    "https://komikcast.me/komik/glamorous-end/",
    "https://komikcast.me/komik/gleipnir/",
    "https://komikcast.me/komik/global-countdown-to-life/",
    "https://komikcast.me/komik/global-gao-wu/",
    "https://komikcast.me/komik/global-mayhem-awakening-sss-class-talent-at-the-start/",
    "https://komikcast.me/komik/gluttonous-elf/",
    "https://komikcast.me/komik/go-with-the-clouds-north-by-northwest/",
    "https://komikcast.me/komik/go-toubun-no-hanayome/",
    "https://komikcast.me/komik/go-toubun-no-hanayome-itsuki-doujins/",
    "https://komikcast.me/komik/go-toubun-no-hanayome-route-nino/",
    "https://komikcast.me/komik/go-toubun-no-hanayome-ichika-dj/",
    "https://komikcast.me/komik/go-toubun-no-hanayome-dj/",
    "https://komikcast.me/komik/go-toubun-no-hanayome-nino-dj/",
    "https://komikcast.me/komik/go-toubun-no-hanayome-yotsuba-dj/",
    "https://komikcast.me/komik/go-toubun-no-hanayome-yotsuba-butterfly/",
    "https://komikcast.me/komik/go-toubun-no-hanayome-pop-quiz-yotsuba-doujinshi/",
    "https://komikcast.me/komik/goblin-slayer/",
    "https://komikcast.me/komik/goblin-slayer-gaiden-2-tsubanari-no-daikatana/",
    "https://komikcast.me/komik/goblin-slayer-side-story-year-one/",
    "https://komikcast.me/komik/goblin-slayer-brand-new-day/",
    "https://komikcast.me/komik/goblin-wa-mou-juubun-ni-tsuyoi/",
    "https://komikcast.me/komik/gochuumon-wa-usagi-desu-ka/",
    "https://komikcast.me/komik/god-at-random/",
    "https://komikcast.me/komik/god-awekening/",
    "https://komikcast.me/komik/god-eater-2nd-break/",
    "https://komikcast.me/komik/god-eater-the-spiral-fate/",
    "https://komikcast.me/komik/god-fisherman/",
    "https://komikcast.me/komik/god-game/",
    "https://komikcast.me/komik/god-gave-me-this-awkward-superpower-what-is-it-for/",
    "https://komikcast.me/komik/god-girls/",
    "https://komikcast.me/komik/god-level-exchange-system/",
    "https://komikcast.me/komik/god-of-cooking/",
    "https://komikcast.me/komik/god-of-knowledge/",
    "https://komikcast.me/komik/god-martial-arts/",
    "https://komikcast.me/komik/god-of-war/",
    "https://komikcast.me/komik/god-of-war-dragon-son-in-law/",
    "https://komikcast.me/komik/god-of-wine/",
    "https://komikcast.me/komik/god-slayer/",
    "https://komikcast.me/komik/god-thief-agent/",
    "https://komikcast.me/komik/god-tribe/",
    "https://komikcast.me/komik/god-level-takeout-man/",
    "https://komikcast.me/komik/gods-doctor-is-too-arrogant/",
    "https://komikcast.me/komik/goddess-creation-system/",
    "https://komikcast.me/komik/goddesss-personal-doctor/",
    "https://komikcast.me/komik/godhand-teru/",
    "https://komikcast.me/komik/godly-mobile-game/",
    "https://komikcast.me/komik/goinkyo-maou-no-hinichijou/",
    "https://komikcast.me/komik/gokiburi-buster/",
    "https://komikcast.me/komik/gokicha/",
    "https://komikcast.me/komik/gokufuri-kyohi-shite-tesaguri-starto/",
    "https://komikcast.me/komik/gokukoku-no-brynhildr/",
    "https://komikcast.me/komik/gokumane/",
    "https://komikcast.me/komik/gokurakugai-sanbandori-no-ken/",
    "https://komikcast.me/komik/gokushufudou-way-house-husband/",
    "https://komikcast.me/komik/gokutei-higuma/",
    "https://komikcast.me/komik/gold-system/",
    "https://komikcast.me/komik/golden-boy/",
    "https://komikcast.me/komik/golden-kamuy/",
    "https://komikcast.me/komik/golem-hearts/",
    "https://komikcast.me/komik/gomen-asobase-tonogata-sama-100-nin-no-ikemen-to-no-flag-wa-subete-orasete-itadakimasu/",
    "https://komikcast.me/komik/gomennasai-ojou-sama-ore-wa-maid-ga-suki-nan-desu/",
    "https://komikcast.me/komik/gon/",
    "https://komikcast.me/komik/gong-heon-ja/",
    "https://komikcast.me/komik/good-deeds-of-kane-of-old-guy/",
    "https://komikcast.me/komik/good-morning-leon/",
    "https://komikcast.me/komik/good-morning-psychopath/",
    "https://komikcast.me/komik/good-night-world/",
    "https://komikcast.me/komik/good-reaper/",
    "https://komikcast.me/komik/goodbye-body/",
    "https://komikcast.me/komik/goodbye-mr-bunny/",
    "https://komikcast.me/komik/goodbye-isekai-tensei/",
    "https://komikcast.me/komik/gorae-byul-the-gyeongseong-mermaid/",
    "https://komikcast.me/komik/goreijo-takashima-kiyono-wa-hisoka-ni-tashinamu/",
    "https://komikcast.me/komik/gorin-no-megami-sama-nedeshiko-ryou-no-medal-gohan/",
    "https://komikcast.me/komik/goshujin-sama-to-h-na-koto-shitai-dorei-no-manga/",
    "https://komikcast.me/komik/gosu/",
    "https://komikcast.me/komik/gotou-san-wants-me-to-turn-around/",
    "https://komikcast.me/komik/gotou-san-wants-me-to-turn-around-serialization/",
    "https://komikcast.me/komik/granblue-fantasy/",
    "https://komikcast.me/komik/grancrest-senki/",
    "https://komikcast.me/komik/grand-blue/",
    "https://komikcast.me/komik/grand-general/",
    "https://komikcast.me/komik/grand-lingerie/",
    "https://komikcast.me/komik/grandblue-fantasy-saenai-dancho-no-sodatekata/",
    "https://komikcast.me/komik/grashros/",
    "https://komikcast.me/komik/great-doctor-ling-ran/",
    "https://komikcast.me/komik/great-land/",
    "https://komikcast.me/komik/great-priest-imhotep/",
    "https://komikcast.me/komik/great-zhou-immortal-officials/",
    "https://komikcast.me/komik/greatest-boss-system/",
    "https://komikcast.me/komik/greatest-sword-immortal/",
    "https://komikcast.me/komik/green-worldz/",
    "https://komikcast.me/komik/grim-reaper-san-kill-me-please/",
    "https://komikcast.me/komik/grimm-gritty/",
    "https://komikcast.me/komik/grimoire-x-reverse-tensei-kijin-romantan/",
    "https://komikcast.me/komik/gu-nanchens-variety-secretary/",
    "https://komikcast.me/komik/guard-against-the-sky/",
    "https://komikcast.me/komik/guard-pass/",
    "https://komikcast.me/komik/guardian-dogs/",
    "https://komikcast.me/komik/guardian-dragon-system/",
    "https://komikcast.me/komik/guarding/",
    "https://komikcast.me/komik/guild-no-cheat-na-uketsukejou/",
    "https://komikcast.me/komik/guild-no-uketsukejou-desu-ga-zangyou-wa-lyananode-boss-wo-solo-tobatsu-shiyou-to-omoimasu/",
    "https://komikcast.me/komik/guilty-axe/",
    "https://komikcast.me/komik/guilty-children/",
    "https://komikcast.me/komik/guilty-circle/",
    "https://komikcast.me/komik/gul/",
    "https://komikcast.me/komik/gun-x-clover/",
    "https://komikcast.me/komik/gunbured-x-sisters/",
    "https://komikcast.me/komik/gundaddy-immortal/",
    "https://komikcast.me/komik/gunner/",
    "https://komikcast.me/komik/gunota-ga-mahou-sekai-ni-tensei-shitara-gendai-heiki-de-guntai-harem-o-tsukucchaimashita/",
    "https://komikcast.me/komik/guns-girl-schooldayz-ex/",
    "https://komikcast.me/komik/gunslayer-legend/",
    "https://komikcast.me/komik/guomin-laogong-dai-huijia/",
    "https://komikcast.me/komik/guren-5/",
    "https://komikcast.me/komik/gwanghaes-lover/",
    "https://komikcast.me/komik/gyakkou-shita-akuyaku-reijou-wa-naze-ka-maryoku-wo-ushinattanode-shinsou-no-reijou-ni-narimasu-the-villainess-who-traveled-back-in-time-inexplicably-lost-her-magic-so-she-went-into-seclusion/",
    "https://komikcast.me/komik/gyaku-isekai-tensei-shite-kimowota-ni-natte-shimatta-dai-majutsushi-del-rey-curtis-no-fujourina-nichijou/",
    "https://komikcast.me/komik/gyaru-couple-no-nichijou-hiru-yasumi-hen/",
    "https://komikcast.me/komik/gyaru-gamer-homeraretai/",
    "https://komikcast.me/komik/gyaru-to-ojou-sama-no-himitsu-tokkun/",
    "https://komikcast.me/komik/gyaru-plain-girl-and-hand-lip-cream/",
    "https://komikcast.me/komik/ha-buk-paengs-youngest-son/",
    "https://komikcast.me/komik/hachi-ichi/",
    "https://komikcast.me/komik/hachigatsu-kokonoka-boku-wa-kimi-ni-kuwareru/",
    "https://komikcast.me/komik/hachigatsu-no-ghost/",
    "https://komikcast.me/komik/hachinan-tte-sore-wa-nai-deshou/",
    "https://komikcast.me/komik/hadi-girl-end/",
    "https://komikcast.me/komik/hagoromo-sensei-wa-kyou-mo-kanzume/",
    "https://komikcast.me/komik/hagure-seirei-ino-shinsatsu-kiroku-seijo-kishi-dan-to-iyashi-no-kamiwaza/",
    "https://komikcast.me/komik/hahasama-no-ie-ogamiya-gounai-kokoro-hitomi-no-kaiitan/",
    "https://komikcast.me/komik/hai-gamer-na-imouto-to-hajimeru-vrmmo-seikatsu/",
    "https://komikcast.me/komik/hai-shinigami-to-fushi-no-neko/",
    "https://komikcast.me/komik/haikei-hannibal/",
    "https://komikcast.me/komik/haikyuu/",
    "https://komikcast.me/komik/hair-pulled-back-over-one-ear/",
    "https://komikcast.me/komik/haite-kudasai-takamine-san/",
    "https://komikcast.me/komik/hajimari-no-niina/",
    "https://komikcast.me/komik/hajimete-kisu-shita-toki-no-onnanoko-futari-no-hannou/",
    "https://komikcast.me/komik/hajimete-no-gal/",
    "https://komikcast.me/komik/hajimete-no-suwa-san/",
    "https://komikcast.me/komik/hajiotsu/",
    "https://komikcast.me/komik/hakanai-kimi-wa-moukou-o-hajimeru/",
    "https://komikcast.me/komik/hakarazumo-koi/",
    "https://komikcast.me/komik/hakase-suraimu-chan/",
    "https://komikcast.me/komik/haken-no-kouki-altina-chapter-01/",
    "https://komikcast.me/komik/hakoniwa-no-soleil/",
    "https://komikcast.me/komik/hakoniwa-oukoku-no-souzoushu-sama/",
    "https://komikcast.me/komik/hakui-no-eiyuu/",
    "https://komikcast.me/komik/hakui-no-ou-sama/",
    "https://komikcast.me/komik/hakumei-to-mikochi/",
    "https://komikcast.me/komik/half-half/",
    "https://komikcast.me/komik/hallym-gymnasium/",
    "https://komikcast.me/komik/hamefura-x-arte/",
    "https://komikcast.me/komik/hametsu-endo-masshigura-no-akuyaku-reijo-ni-tensei-shita-node-oishi-gohan-o-tsukutte-kurashimasu/",
    "https://komikcast.me/komik/hametsu-no-kanojo/",
    "https://komikcast.me/komik/hamster/",
    "https://komikcast.me/komik/han-rim-gymnasium/",
    "https://komikcast.me/komik/hana-ni-arashi/",
    "https://komikcast.me/komik/hana-odori-to-kaze-no-uta/",
    "https://komikcast.me/komik/hana-to-akuma/",
    "https://komikcast.me/komik/hana-to-alice-satsujin-jiken/",
    "https://komikcast.me/komik/hana-wa-saku-shura-no-gotoku/",
    "https://komikcast.me/komik/hana-wa-shinitagaru/",
    "https://komikcast.me/komik/hana-yori-dango/",
    "https://komikcast.me/komik/hananoi-kun-to-koi-no-yamai/",
    "https://komikcast.me/komik/hanazono-and-kazoes-bizzare-after-school-rendezvous/",
    "https://komikcast.me/komik/hanazono-twins/",
    "https://komikcast.me/komik/handling-the-demoness-and-saintess/",
    "https://komikcast.me/komik/handsome-and-cute/",
    "https://komikcast.me/komik/handsome-girl-and-sheltered-girl-ikemen-to-hakoiri-musume/",
    "https://komikcast.me/komik/handyman-saitou-in-another-world/",
    "https://komikcast.me/komik/hanging-out-with-a-gamer-girl/",
    "https://komikcast.me/komik/hankou-dekinai-ibara-chan/",
    "https://komikcast.me/komik/hannin-no-hanzawa-san/",
    "https://komikcast.me/komik/hantsu-x-trash/",
    "https://komikcast.me/komik/happiness-oshimi-shuzo/",
    "https://komikcast.me/komik/happy-birthday-to-my-favorit-bunny-doujin-genshin-impact/",
    "https://komikcast.me/komik/happy-moment/",
    "https://komikcast.me/komik/harapeko-girl/",
    "https://komikcast.me/komik/harapeko-no-marie/",
    "https://komikcast.me/komik/hard-carry-supporter/",
    "https://komikcast.me/komik/hard-luck-woman/",
    "https://komikcast.me/komik/hard-boiled-cop-and-dolphin/",
    "https://komikcast.me/komik/hardcore-leveling/",
    "https://komikcast.me/komik/hare-kon/",
    "https://komikcast.me/komik/harebare-biyori/",
    "https://komikcast.me/komik/harem-manga-no-shujinkou-da-ga-gei-na-node-mainichi-ga-tsurai/",
    "https://komikcast.me/komik/harmonious-emperor/",
    "https://komikcast.me/komik/haru-returns/",
    "https://komikcast.me/komik/haru-to-midori/",
    "https://komikcast.me/komik/haru-nee-ga-boku-ni-xx-suru-riyuu/",
    "https://komikcast.me/komik/harus-curse/",
    "https://komikcast.me/komik/harukawa-san-wa-kyou-mo-uete-iru/",
    "https://komikcast.me/komik/harumatsu-bokura/",
    "https://komikcast.me/komik/hatarakanai-futari/",
    "https://komikcast.me/komik/hataraku-maou-sama/",
    "https://komikcast.me/komik/hataraku-saibou-black/",
    "https://komikcast.me/komik/hatsu-deeto-de-kisutte/",
    "https://komikcast.me/komik/hatsu-kokuhaku/",
    "https://komikcast.me/komik/hatsukoi-limited/",
    "https://komikcast.me/komik/hatsukoi-losstime/",
    "https://komikcast.me/komik/hatsukoi-maze/",
    "https://komikcast.me/komik/hatsukoi-zombie/",
    "https://komikcast.me/komik/hatsune-miku-unofficial-hatsune-mix/",
    "https://komikcast.me/komik/haunted-house/",
    "https://komikcast.me/komik/have-a-nice-ending/",
    "https://komikcast.me/komik/hayaku-shitai-futari/",
    "https://komikcast.me/komik/hayama-sensei-to-terano-sensei-wa-tsukiatteiru/",
    "https://komikcast.me/komik/hayasegawa-kun-to-megami-na-onee-san/",
    "https://komikcast.me/komik/hazukashi-isouna-kao-de-oppai-misete-moraitai-sekimen-oppai-anthology/",
    "https://komikcast.me/komik/hazure-akamadoushi-ha-kenjyatime-ni-musou-suru-the-loser-red-mage-is-unmatched-in-sage-time/",
    "https://komikcast.me/komik/hazure-hantei-kara-hajimatta-cheat-majutsushi-seikatsu/",
    "https://komikcast.me/komik/hazure-skill-nigeru-de-rre-wa-kyokugen-tei-reberu-no-mama-saikyou-wo-mezasu/",
    "https://komikcast.me/komik/hazure-skill-gacha-de-tsuiho-sareta-ore-ha-waga-mama-osananajimi-wo-zetsuen-shi-kakusei-suru-banno-chi-toss-kill-wo-get-shite-mezase-rakuraku-saikyo-slow-life/",
    "https://komikcast.me/komik/hazure-skill-kage-ga-usui-o-motsu-guild-shokuin-ga-jitsuha-densetsu-no-ansatsusha/",
    "https://komikcast.me/komik/hazure-skill-mapping-wo-te-ni-shita-shonen-ha-saikyou-party-to-dungeon-ni-idomu/",
    "https://komikcast.me/komik/hazure-sukiru-konomi-masuta-sukiru-no-mi-tabetara-shinu-o-mugen-ni-tabe-rareru-yo-ni-natta-kudan/",
    "https://komikcast.me/komik/hazure-waku-no-joutai-ijou-skill-de-saikyou-ni-natta-ore-ga-subete-wo-juurin-suru-made/",
    "https://komikcast.me/komik/he-flew-back-from/",
    "https://komikcast.me/komik/he-is-a-magical-girl-nayameru-kare-wa-mahou-shoujo/",
    "https://komikcast.me/komik/head-over-heels/",
    "https://komikcast.me/komik/heart-gear/",
    "https://komikcast.me/komik/heart-warming-meals-with-mother-fenrir/",
    "https://komikcast.me/komik/heaven-defying-sword/",
    "https://komikcast.me/komik/heaven-officials-blessing/",
    "https://komikcast.me/komik/heaven-soul/",
    "https://komikcast.me/komik/heavenly-beads-master/",
    "https://komikcast.me/komik/heavenly-demon-cultivation-simulation/",
    "https://komikcast.me/komik/heavenly-demon-instructor/",
    "https://komikcast.me/komik/heavenly-god-mnemonic/",
    "https://komikcast.me/komik/heavenly-jewel-change/",
    "https://komikcast.me/komik/heavenly-koi/",
    "https://komikcast.me/komik/heavenly-martial-god/",
    "https://komikcast.me/komik/heavenly-moon/",
    "https://komikcast.me/komik/heavenly-mystery-magician/",
    "https://komikcast.me/komik/heavenly-robber/",
    "https://komikcast.me/komik/heavenly-solo-defender/",
    "https://komikcast.me/komik/heavy-scorpion/",
    "https://komikcast.me/komik/heibon-na-kanojo/",
    "https://komikcast.me/komik/your-majesty-the-voice-of-your-heart-is-leaking-out/",
    "https://komikcast.me/komik/helck/",
    "https://komikcast.me/komik/hell-58/",
    "https://komikcast.me/komik/hell-dogs/",
    "https://komikcast.me/komik/hell-mode-yarikomi-suki-no-gamer-wa-hai-settei-no-isekai-de-musou-suru/",
    "https://komikcast.me/komik/hello-world/",
    "https://komikcast.me/komik/hello-hello-and-hello/",
    "https://komikcast.me/komik/hello-im-the-gardener/",
    "https://komikcast.me/komik/hells-kitchen/",
    "https://komikcast.me/komik/hen-na-chishiki-ni-kuwashii-kanojo-takayukashiki-souko-san/",
    "https://komikcast.me/komik/henai/",
    "https://komikcast.me/komik/henjo-hen-na-joshikousei-amaguri-chiko/",
    "https://komikcast.me/komik/henkyou-gurashi-no-maou-tensei-shite-saikyou-no-majutsushi-ni-naru-aisarenagara-nariagaru-moto-mao-wa-ningen-o-shiritai/",
    "https://komikcast.me/komik/henkyou-no-roukishi-bard-loen/",
    "https://komikcast.me/komik/henkyou-toshi-no-ikuseisha-hajimari-no-kaminari-hime/",
    "https://komikcast.me/komik/henshin-ganbo/",
    "https://komikcast.me/komik/henshuu-no-isshou/",
    "https://komikcast.me/komik/hensokukei-quadrangle/",
    "https://komikcast.me/komik/hentai-yoku-dekimashita/",
    "https://komikcast.me/komik/her-hero/",
    "https://komikcast.me/komik/her-life-is-comicalized/",
    "https://komikcast.me/komik/her-special-seat/",
    "https://komikcast.me/komik/her-summon/",
    "https://komikcast.me/komik/her-true-self-is-revealed-after-taking-off-her-miko-attire/",
    "https://komikcast.me/komik/heres-a-punch/",
    "https://komikcast.me/komik/heritage-doctor/",
    "https://komikcast.me/komik/hero-you-ling/",
    "https://komikcast.me/komik/hero-from-a-past-life/",
    "https://komikcast.me/komik/hero-has-returned/",
    "https://komikcast.me/komik/hero-killer/",
    "https://komikcast.me/komik/hero-of-his-own-opinion/",
    "https://komikcast.me/komik/hero-san-and-former-general-san/",
    "https://komikcast.me/komik/hero-watch-up/",
    "https://komikcast.me/komik/hero-i-quit-a-long-time-ago/",
    "https://komikcast.me/komik/heros/",
    "https://komikcast.me/komik/heroes-of-ordeal/",
    "https://komikcast.me/komik/heroes-on/",
    "https://komikcast.me/komik/heroine-hajimemashita/",
    "https://komikcast.me/komik/heroines/",
    "https://komikcast.me/komik/hetare-ane-webcomic/",
    "https://komikcast.me/komik/heterogenia-linguistico-ishuzoku-gengogaku-nyuumon/",
    "https://komikcast.me/komik/hey-the-cheat-code-management-skill-which-was-thought-to-be-useless-is-too-monstrous/",
    "https://komikcast.me/komik/hibi-chouchou/",
    "https://komikcast.me/komik/hidan-no-aria/",
    "https://komikcast.me/komik/higashi-no-kurume-to-tonari-no-meguru/",
    "https://komikcast.me/komik/hige-wo-soru-soshite-joshi-kosei-wo-hirou-each-stories/",
    "https://komikcast.me/komik/hige-wo-soru-soshite-joshikosei-wo-hirou/",
    "https://komikcast.me/komik/high-energy-core/",
    "https://komikcast.me/komik/high-risk-mission-therapy/",
    "https://komikcast.me/komik/high-school-girl-kingdom-tokyo/",
    "https://komikcast.me/komik/high-school-of-spy/",
    "https://komikcast.me/komik/high-school-taoist/",
    "https://komikcast.me/komik/high-spec-lovers/",
    "https://komikcast.me/komik/highest-level-returnee-max-level-returner/",
    "https://komikcast.me/komik/highschool-lunch-dad/",
    "https://komikcast.me/komik/highschool-of-the-dead/",
    "https://komikcast.me/komik/higurashi-no-naku-koro-ni-rei-hoshiwatashi-hen/",
    "https://komikcast.me/komik/hiiragi-san-chi-no-kyuuketsu-jijou/",
    "https://komikcast.me/komik/hiiragi-sensei-wa-kyoushi-shikkaku/",
    "https://komikcast.me/komik/hikaru-no-go/",
    "https://komikcast.me/komik/hikikomari-kyuuketsuki-no-monmon/",
    "https://komikcast.me/komik/hikikomori-hakoiri-reijou-no-kekkon/",
    "https://komikcast.me/komik/hikikomori-no-ore-ga-kawaii-guild-master-ni-sewa-wo-yakaremakuttatte-betsu-ni-ii-darou/",
    "https://komikcast.me/komik/himari-no-mawari/",
    "https://komikcast.me/komik/himawari-san/",
    "https://komikcast.me/komik/himawari-san-sugano-manami/",
    "https://komikcast.me/komik/himedore/",
    "https://komikcast.me/komik/himegami-no-miko/",
    "https://komikcast.me/komik/himegasaki-sakurako-wa-kyoumo-fubin-kawaii/",
    "https://komikcast.me/komik/himeno-chan-ni-koi-wa-mada-hayai/",
    "https://komikcast.me/komik/himenospia/",
    "https://komikcast.me/komik/himitsu-no-reptiles/",
    "https://komikcast.me/komik/himouto-umaru-chan/",
    "https://komikcast.me/komik/hinako-san-wa-boku-no-yome/",
    "https://komikcast.me/komik/hinamatsuri/",
    "https://komikcast.me/komik/hinatazaka/",
    "https://komikcast.me/komik/hiniiru/",
    "https://komikcast.me/komik/hinmin-choujin-kanenashi-kun/",
    "https://komikcast.me/komik/hino-san-no-baka/",
    "https://komikcast.me/komik/hinomaru-zumou/",
    "https://komikcast.me/komik/hinomoto-san-chi-no-3-shimai/",
    "https://komikcast.me/komik/hinowa-ga-crush/",
    "https://komikcast.me/komik/iota-no-kanojo-ga-ore-no-motteru-eroge-ni-kyoumi-shinshin-nanda-ga/",
    "https://komikcast.me/komik/hiraheishi-wa-kako-wo-yumemiru/",
    "https://komikcast.me/komik/hirasaka-hinako-ga-ero-kawaii-koto-wo-ore-dake-ga-shitteiru/",
    "https://komikcast.me/komik/hiratsu-cute-shizu-cute/",
    "https://komikcast.me/komik/hiren-trip/",
    "https://komikcast.me/komik/hirunaka-no-ryuusei/",
    "https://komikcast.me/komik/hisshou-dungeon-unei-houhou/",
    "https://komikcast.me/komik/history-of-the-three-states/",
    "https://komikcast.me/komik/shijou-saikyou-no-deshi-kenichi/",
    "https://komikcast.me/komik/hitman-seo-kouji/",
    "https://komikcast.me/komik/hitogata/",
    "https://komikcast.me/komik/hitomebore/",
    "https://komikcast.me/komik/hitomi-chan-is-shy-with-strangers/",
    "https://komikcast.me/komik/hitomi-chan-wa-hitomishiri/",
    "https://komikcast.me/komik/hitoribocchi-no-%e2%97%8b%e2%97%8b-seikatsu/",
    "https://komikcast.me/komik/hitoribocchi-no-isekai-kouryaku/",
    "https://komikcast.me/komik/hitoribocchi-no-oo-seikatsu-webcomic/",
    "https://komikcast.me/komik/hitorigurashi-netsu-wo-dasu-koi-wo-shiru/",
    "https://komikcast.me/komik/hitotsu-yane-no-shita-de-kirai-na-aitsu-no-amai-yuuwaku/",
    "https://komikcast.me/komik/hitpoint/",
    "https://komikcast.me/komik/hiyokoi/",
    "https://komikcast.me/komik/hiyori-chan-no-onegai-wa-zettai/",
    "https://komikcast.me/komik/hoarding-in-hell/",
    "https://komikcast.me/komik/hokago-wa-kissaten-de/",
    "https://komikcast.me/komik/hokenshitsu-no-otaku-oneesan-wa-suki-desu-ka/",
    "https://komikcast.me/komik/hokuou-kizoku-to-moukinzuma-no-yukiguni/",
    "https://komikcast.me/komik/hokuto-no-ken/",
    "https://komikcast.me/komik/hold-on-to-the-angels/",
    "https://komikcast.me/komik/hololive-matsubara-tsuyoshis-twitter-shorts/",
    "https://komikcast.me/komik/holy-ancestor/",
    "https://komikcast.me/komik/holy-chef-crazy-empress/",
    "https://komikcast.me/komik/holy-knight/",
    "https://komikcast.me/komik/holy-lord/",
    "https://komikcast.me/komik/homeless/",
    "https://komikcast.me/komik/homeless-tensei-isekai-de-jiyuu-sugiru-majutsu-jisoku/",
    "https://komikcast.me/komik/homemade-freshs/",
    "https://komikcast.me/komik/homura-sensei-wa-tabun-motenai/",
    "https://komikcast.me/komik/hone-dragon-no-mana-musume/",
    "https://komikcast.me/komik/hone-ga-kusaru-made/",
    "https://komikcast.me/komik/honey-come-honey/",
    "https://komikcast.me/komik/honey-trap-sharehouse/",
    "https://komikcast.me/komik/hongshi-loves-me/",
    "https://komikcast.me/komik/honkai-impact-3rd-anti-entropy-invasion/",
    "https://komikcast.me/komik/honou-no-majo-hime-to-sekiwan-no-tomo/",
    "https://komikcast.me/komik/hontou-wa-tsukiatte-nai-onnanoko-no-yuri-the-girls-who-arent-really-dating/",
    "https://komikcast.me/komik/honzuki-no-gekokujou/",
    "https://komikcast.me/komik/honzuki-no-gekokujou-koushiki-comic-anthology/",
    "https://komikcast.me/komik/honzuki-no-gekokujou-part-4/",
    "https://komikcast.me/komik/honzuki-no-gekokujou-part-2/",
    "https://komikcast.me/komik/honzuki-no-gekokujou-part-3/",
    "https://komikcast.me/komik/hukeu/",
    "https://komikcast.me/komik/hoozuki-no-reitetsu/",
    "https://komikcast.me/komik/hoozuki-san-chi-no-aneki/",
    "https://komikcast.me/komik/hopeless/",
    "https://komikcast.me/komik/hore-shou-no-half-elf-san/",
    "https://komikcast.me/komik/horimiya/",
    "https://komikcast.me/komik/horobi-no-kuni-no-seifukusha-maou-wa-sekai-wo-seifuku-suru-you-desu/",
    "https://komikcast.me/komik/hortensia-saga/",
    "https://komikcast.me/komik/hoshikiri-no-kenshi/",
    "https://komikcast.me/komik/hoshino-me-o-tsubutte/",
    "https://komikcast.me/komik/hotel-of-the-underworld/",
    "https://komikcast.me/komik/hottoite-kudasai-juuma-to-cheat-life-tanoshi-mitai/",
    "https://komikcast.me/komik/houfuku-kanojo-to-koukatsu-kareshi/",
    "https://komikcast.me/komik/houjou-urara-no-renai-shousetsu-okakinasai/",
    "https://komikcast.me/komik/houkago-bitch-craft/",
    "https://komikcast.me/komik/houkago-no-goumon-shoujo/",
    "https://komikcast.me/komik/houkago-no-ijiwaru/",
    "https://komikcast.me/komik/houkago-wa-isekai-kissa-de-coffee-wo/",
    "https://komikcast.me/komik/houseki-no-kuni/",
    "https://komikcast.me/komik/houtu/",
    "https://komikcast.me/komik/how-our-indifference-fades/",
    "https://komikcast.me/komik/how-pathetic-we-are/",
    "https://komikcast.me/komik/how-to-be-god/",
    "https://komikcast.me/komik/how-to-fight/",
    "https://komikcast.me/komik/how-to-kill-a-god/",
    "https://komikcast.me/komik/how-to-legally-get-it-on-with-a-high-school-girl/",
    "https://komikcast.me/komik/how-to-live-as-a-villain/",
    "https://komikcast.me/komik/how-to-live-at-the-max-level/",
    "https://komikcast.me/komik/how-to-open-a-triangular-riceball/",
    "https://komikcast.me/komik/how-to-properly-care-for-your-pet-wife/",
    "https://komikcast.me/komik/how-to-subdue-the-wicked-demon-girl-wreaking-havoc-on-the-demon-world-with-this-one-method/",
    "https://komikcast.me/komik/huadu-need-war-king/",
    "https://komikcast.me/komik/huangtian-supreme/",
    "https://komikcast.me/komik/human-body-cultivation/",
    "https://komikcast.me/komik/human-card/",
    "https://komikcast.me/komik/human-lost-ningen-shikkaku/",
    "https://komikcast.me/komik/humman-era/",
    "https://komikcast.me/komik/hundred/",
    "https://komikcast.me/komik/hundred-demon-spectrum/",
    "https://komikcast.me/komik/hundred-years-game/",
    "https://komikcast.me/komik/hundreds-of-option-for-becoming-a-god/",
    "https://komikcast.me/komik/hungry-joker/",
    "https://komikcast.me/komik/hunt-twelve-saints-the-beginning-of-the-end/",
    "https://komikcast.me/komik/hunter-academys-greatest-war-god/",
    "https://komikcast.me/komik/hunter-age/",
    "https://komikcast.me/komik/hunter-and-snow/",
    "https://komikcast.me/komik/hunter-x-hunter/",
    "https://komikcast.me/komik/husk-eden/",
    "https://komikcast.me/komik/hyakuma-no-aruji/",
    "https://komikcast.me/komik/hyakunichikan/",
    "https://komikcast.me/komik/hyakuren-no-haou-seiyaku-no-valkyria/",
    "https://komikcast.me/komik/hyottoshite-gyaru-wa-orera-ni-yasashii-no-dewa-anthology-comic/",
    "https://komikcast.me/komik/hyoudou-san-wa-otoshitai/",
    "https://komikcast.me/komik/hyoujou-ga-issai-wakaranai-shirogane-san/",
    "https://komikcast.me/komik/hyouka/",
    "https://komikcast.me/komik/hyouken-no-majutsushi-ga-sekai-wo-suberu-sekai-saikyou-no-majutsushi-dearu-shounen-wa-majutsu-gakuin-ni-nyuugaku-suru/",
    "https://komikcast.me/komik/hyouryuu-net-cafe/",
    "https://komikcast.me/komik/hyper-luck/",
    "https://komikcast.me/komik/hypnosis-school/",
    "https://komikcast.me/komik/hyullas-race/",
    "https://komikcast.me/komik/i-am-a-big-brother/",
    "https://komikcast.me/komik/i-am-a-god-alone/",
    "https://komikcast.me/komik/i-am-a-great-god/",
    "https://komikcast.me/komik/i-am-a-hero/",
    "https://komikcast.me/komik/i-am-a-humanoid-cultivation-pill/",
    "https://komikcast.me/komik/i-am-alone-genius-dna/",
    "https://komikcast.me/komik/i-am-an-invincible-genius/",
    "https://komikcast.me/komik/i-am-crazy-upgrade/",
    "https://komikcast.me/komik/i-am-daxianzun/",
    "https://komikcast.me/komik/i-am-gao-fu-shuai/",
    "https://komikcast.me/komik/i-am-han-sanqian/",
    "https://komikcast.me/komik/i-am-immortal/",
    "https://komikcast.me/komik/i-am-in-china-to-repairing-spiritual-veins/",
    "https://komikcast.me/komik/i-am-my-wife/",
    "https://komikcast.me/komik/i-am-not-a-goddess/",
    "https://komikcast.me/komik/i-am-not-a-son-of-doom/",
    "https://komikcast.me/komik/i-am-not-the-leader/",
    "https://komikcast.me/komik/i-am-picking-up-pieces-in-the-jedi/",
    "https://komikcast.me/komik/i-am-player-who-suck-alone/",
    "https://komikcast.me/komik/i-am-supreme/",
    "https://komikcast.me/komik/i-am-the-firmament/",
    "https://komikcast.me/komik/i-am-the-god-of-medicine/",
    "https://komikcast.me/komik/i-am-the-invincible-god-of-war/",
    "https://komikcast.me/komik/i-am-the-jade-emperor-king/",
    "https://komikcast.me/komik/i-am-the-king/",
    "https://komikcast.me/komik/i-am-the-lord-of-sage/",
    "https://komikcast.me/komik/i-am-the-older-sister-of-the-possessed-female-lead/",
    "https://komikcast.me/komik/i-am-the-owner-of-the-hot-spring-villa/",
    "https://komikcast.me/komik/i-am-the-sorcerer-king/",
    "https://komikcast.me/komik/i-am-worried-that-my-childhood-friend-is-too-cute/",
    "https://komikcast.me/komik/i-became-a-girl-so-i-had-to-break-up-with-my-girlfriend/",
    "https://komikcast.me/komik/i-became-a-maid-in-a-tl-novel/",
    "https://komikcast.me/komik/i-became-invincible-after-descending/",
    "https://komikcast.me/komik/i-became-the-chef-of-the-dragon-king/",
    "https://komikcast.me/komik/i-became-the-emperors-daughter-one-day/",
    "https://komikcast.me/komik/i-became-the-sacrificial-princess/",
    "https://komikcast.me/komik/i-became-the-wife-of-the-monstrous-crown-prince/",
    "https://komikcast.me/komik/i-began-a-new-game/",
    "https://komikcast.me/komik/i-brought-home-a-succubus-who-failed-to-find-a-job/",
    "https://komikcast.me/komik/i-came-from-the-abyss-to-save-mankind/",
    "https://komikcast.me/komik/i-can-see-the-success-rate/",
    "https://komikcast.me/komik/i-can-snatch-999-types-of-abilities/",
    "https://komikcast.me/komik/i-cant-die-today-because-you-are-too-weak/",
    "https://komikcast.me/komik/i-cant-accompany-the-second-generation-of-immortal/",
    "https://komikcast.me/komik/i-cant-be-a-sword-god/",
    "https://komikcast.me/komik/i-confessed-to-a-girl-and-she-made-me-a-girl-too/",
    "https://komikcast.me/komik/i-conquered-a-religion-and-with-it-came-a-harem/",
    "https://komikcast.me/komik/i-copy-talents/",
    "https://komikcast.me/komik/i-decided-to-cook-because-the-losing-potion-was-soy-sauce/",
    "https://komikcast.me/komik/i-decided-to-offer-myself-to-motivate-senpai/",
    "https://komikcast.me/komik/i-deliver-food-in-doomday/",
    "https://komikcast.me/komik/i-dominate-the-game/",
    "https://komikcast.me/komik/i-dont-know-what-my-little-sisters-friend-is-thinking/",
    "https://komikcast.me/komik/i-dont-blame-you/",
    "https://komikcast.me/komik/i-dont-really-get-it-but-it-looks-like-i-was-reincarnated-in-another-world/",
    "https://komikcast.me/komik/i-got-my-hands-on-a-hypnosis-app/",
    "https://komikcast.me/komik/i-grinding-levels-inside-the-mirror/",
    "https://komikcast.me/komik/i-grow-stronger-by-eating/",
    "https://komikcast.me/komik/i-hate-these-calm-days/",
    "https://komikcast.me/komik/i-have-a-chaos-sutra/",
    "https://komikcast.me/komik/i-have-a-double-identity/",
    "https://komikcast.me/komik/i-have-a-dragon-on-my-body/",
    "https://komikcast.me/komik/i-have-a-happy-dream/",
    "https://komikcast.me/komik/i-have-a-mansion-in-the-post-apocalyptic-world/",
    "https://komikcast.me/komik/i-have-an-apocalyptic-dungeon/",
    "https://komikcast.me/komik/i-have-an-sss-rank-trait-but-i-want-a-normal-life/",
    "https://komikcast.me/komik/i-have-been-stuck-on-the-same-day-for-3000-years/",
    "https://komikcast.me/komik/i-have-countless-legendary-swords/",
    "https://komikcast.me/komik/i-have-five-big-boss-daddies/",
    "https://komikcast.me/komik/i-have-metaphysical-nb-syndrome/",
    "https://komikcast.me/komik/i-have-million-skill-points/",
    "https://komikcast.me/komik/i-have-nine-female-disciples/",
    "https://komikcast.me/komik/i-have-regret-medicine/",
    "https://komikcast.me/komik/i-have-survived-999-calamities/",
    "https://komikcast.me/komik/i-have-twin-girlfriends/",
    "https://komikcast.me/komik/i-havent-been-an-immortal-emperor-for-many-years/",
    "https://komikcast.me/komik/i-hope-its-sunny-tomorrow/",
    "https://komikcast.me/komik/i-just-dont-play-the-card-according-to-the-routine/",
    "https://komikcast.me/komik/i-just-had-to-pick-up-a-female-disciple/",
    "https://komikcast.me/komik/i-just-want-to-be-beaten-to-death-by-everyone/",
    "https://komikcast.me/komik/i-killed-him/",
    "https://komikcast.me/komik/i-killed-the-immortal/",
    "https://komikcast.me/komik/i-know-shes-a-girl-who-cannot-die-but/",
    "https://komikcast.me/komik/i-learn-to-cultivate-in-the-world-of-superpower/",
    "https://komikcast.me/komik/i-live-in-another-world/",
    "https://komikcast.me/komik/i-live-with-a-demon-king/",
    "https://komikcast.me/komik/i-made-a-harem-in-the-underworld/",
    "https://komikcast.me/komik/i-might-be-a-fake-cultivator/",
    "https://komikcast.me/komik/i-moved-the-brics-in-the-last-days/",
    "https://komikcast.me/komik/i-must-be-hero/",
    "https://komikcast.me/komik/i-need-you/",
    "https://komikcast.me/komik/i-obtained-a-mythic-item/",
    "https://komikcast.me/komik/i-only-want-to-beat-you/",
    "https://komikcast.me/komik/i-picked-a-mobile-from-another-world/",
    "https://komikcast.me/komik/i-picked-up-a-demon-lord-as-a-maid/",
    "https://komikcast.me/komik/i-picked-up-an-attributes/",
    "https://komikcast.me/komik/i-raised-a-beast/",
    "https://komikcast.me/komik/i-raised-a-black-dragon-pre-serialization/",
    "https://komikcast.me/komik/i-randomly-have-a-new-career-every-week/",
    "https://komikcast.me/komik/i-really-dont-want-to-be-the-first/",
    "https://komikcast.me/komik/i-really-dont-want-to-be-a-school-master/",
    "https://komikcast.me/komik/i-really-like-you-so-i-wont-kiss-you/",
    "https://komikcast.me/komik/i-received-half-of-the-world-from-the-demon-king/",
    "https://komikcast.me/komik/i-regressed-as-the-duke/",
    "https://komikcast.me/komik/i-reincarnated-as-a-legendary-surgeon/",
    "https://komikcast.me/komik/i-reincarnated-as-the-crazed-heir/",
    "https://komikcast.me/komik/i-rely-on-bug-to11be-the-king/",
    "https://komikcast.me/komik/i-rely-on-ocd-to-become-the-king/",
    "https://komikcast.me/komik/i-return-from-the-heavens/",
    "https://komikcast.me/komik/i-shall-become-the-queen/",
    "https://komikcast.me/komik/shall-seal-heavens/",
    "https://komikcast.me/komik/i-signed-killing-god-in-the-wasteland/",
    "https://komikcast.me/komik/i-stack-experience-through-writing-books/",
    "https://komikcast.me/komik/i-stand-beyond-the-heavens/",
    "https://komikcast.me/komik/i-suggested-the-doctor-who-works-for-a-secret-evil-organization-to-take-a-vacation/",
    "https://komikcast.me/komik/i-tamed-the-crazy-marquis/",
    "https://komikcast.me/komik/i-took-attributes-in-the-last-days/",
    "https://komikcast.me/komik/i-use-a-free-book-to-become-a-saint/",
    "https://komikcast.me/komik/i-used-a-novel-posting-site-and-the-most-beautiful-girl-in-my-class-turned-out-to-be-a-reader/",
    "https://komikcast.me/komik/i-used-to-be-a-disqualified-daughter-of-the-duke/",
    "https://komikcast.me/komik/i-wanna-spoil-yoroizuka-san/",
    "https://komikcast.me/komik/i-want-to-be-you-just-for-a-day/",
    "https://komikcast.me/komik/i-want-to-become-better-acquainted-with-the-kuudere-convenience-store-manager/",
    "https://komikcast.me/komik/i-want-to-catch-up-with-you/",
    "https://komikcast.me/komik/i-want-to-drink-your-tears/",
    "https://komikcast.me/komik/i-want-to-know-your-real-face/",
    "https://komikcast.me/komik/i-want-to-listen-to-xx/",
    "https://komikcast.me/komik/i-want-to-live-a-relaxing-life-as-a-semi-retired-adventure/",
    "https://komikcast.me/komik/i-want-to-see-a-naked-girl-in-real-life/",
    "https://komikcast.me/komik/i-want-you-to-say-you-love-me/",
    "https://komikcast.me/komik/i-was-asked-wanna-have-sex-on-sunday-and-was-horny-for-an-entire-week/",
    "https://komikcast.me/komik/i-was-dismissed-from-the-heros-party-because-they-dont-need-my-training-skills-so-i-strengthened-my-fief-which-i-got-as-a-replacement-for-my-retirement-money/",
    "https://komikcast.me/komik/i-was-fired-as-an-adventurer-so-i-became-an-alchemist-frontier-development-alright-leave-it-to-me/",
    "https://komikcast.me/komik/i-was-forced-to-become-the-princess-of-a-strange-world/",
    "https://komikcast.me/komik/i-was-possessed-by-the-devil/",
    "https://komikcast.me/komik/i-was-raised-by-the-boss/",
    "https://komikcast.me/komik/i-was-sealed-900-million-times/",
    "https://komikcast.me/komik/i-was-summoned-by-the-demon-lord-but-i-cant-understand-her-language/",
    "https://komikcast.me/komik/i-was-told-to-relinquish-my-fiance-to-my-little-sister-and-the-greatest-dragon-took-a-liking-to-me-and-unbelievably-took-over-the-kingdom/",
    "https://komikcast.me/komik/i-was-trapped-on-the-same-day-for-100000-years/",
    "https://komikcast.me/komik/i-was-trash/",
    "https://komikcast.me/komik/i-was-wrong/",
    "https://komikcast.me/komik/i-went-back-and-my-family-was-ruined/",
    "https://komikcast.me/komik/i-will-become-an-immortal/",
    "https://komikcast.me/komik/i-will-die-soon/",
    "https://komikcast.me/komik/i-will-grant-you-one-wish/",
    "https://komikcast.me/komik/i-will-live-freely-in-another-world-with-equipment-manufacturing-cheat/",
    "https://komikcast.me/komik/i-will-save-the-world-by-eating/",
    "https://komikcast.me/komik/i-wont-get-bullied-by-girls/",
    "https://komikcast.me/komik/i-wont-marry-the-enemy-prince/",
    "https://komikcast.me/komik/i-wouldnt-date-a-prince-even-if-you-asked-the-banished-villainess-will-start-over-with-the-power-of-magic/",
    "https://komikcast.me/komik/i-the-invincible-villain-master-with-my-apprentices/",
    "https://komikcast.me/komik/i-the-strongest-demon-have-regained-my-youth/",
    "https://komikcast.me/komik/i-who-blocked-the-demon-kings-ultimate-attack-ended-up-as-the-little-heros-nanny/",
    "https://komikcast.me/komik/i-abnormal-bones/",
    "https://komikcast.me/komik/ill-cheer-on-my-yuri-onee-chan/",
    "https://komikcast.me/komik/im-a-loser/",
    "https://komikcast.me/komik/im-not-jealous/",
    "https://komikcast.me/komik/im-sandwiched-between-sweet-and-spicy-sister-in-law/",
    "https://komikcast.me/komik/im-the-future-king/",
    "https://komikcast.me/komik/im-working-at-the-church-as-a-priest-but-i-want-to-be-cut-some-slack-from-the-mutilated-bodies-of-the-heroes-that-keep-getting-sent-to-me/",
    "https://komikcast.me/komik/ill-become-a-villainess-that-will-go-down-in-history/",
    "https://komikcast.me/komik/ill-get-married-soon/",
    "https://komikcast.me/komik/ill-make-you-shout-i-love-you/",
    "https://komikcast.me/komik/ill-save-the-world-by-only-taking-pills/",
    "https://komikcast.me/komik/im-a-fake-npc/",
    "https://komikcast.me/komik/im-a-house-agent/",
    "https://komikcast.me/komik/im-a-middle-schooler-becoming-the-demon-lord/",
    "https://komikcast.me/komik/im-a-monster/",
    "https://komikcast.me/komik/im-a-prisoner-in-the-demon-world/",
    "https://komikcast.me/komik/im-a-tycoon-in-the-other-world/",
    "https://komikcast.me/komik/im-a-villain-in-harem-comics/",
    "https://komikcast.me/komik/im-a-villainous-daughter-so-im-going-to-keep-the-last-boss/",
    "https://komikcast.me/komik/im-actually-a-cultivation-bigshot/",
    "https://komikcast.me/komik/im-alone-in-the-novel/",
    "https://komikcast.me/komik/im-an-evil-god/",
    "https://komikcast.me/komik/im-an-overlord/",
    "https://komikcast.me/komik/im-da-best/",
    "https://komikcast.me/komik/im-going-to-die-tomorrow/",
    "https://komikcast.me/komik/im-my-household-girlfriend/",
    "https://komikcast.me/komik/im-not-tang-sanzang/",
    "https://komikcast.me/komik/im-not-the-overlord/",
    "https://komikcast.me/komik/im-picking-fairy-sister-on-the-westward-journey/",
    "https://komikcast.me/komik/im-really-not-the-demon-gods-lackey/",
    "https://komikcast.me/komik/im-so-god-damn-cute/",
    "https://komikcast.me/komik/im-the-bugs-pendant/",
    "https://komikcast.me/komik/im-the-great-swordsman/",
    "https://komikcast.me/komik/im-the-one-and-only-god/",
    "https://komikcast.me/komik/im-the-only-one-loved-by-the-constellations/",
    "https://komikcast.me/komik/im-the-princes-consort-candidate-however-i-believe-i-can-certainly-surpass-it/",
    "https://komikcast.me/komik/im-the-villain-in-the-beauties/",
    "https://komikcast.me/komik/im-the-villainess-but-im-being-captured-by-the-heroine/",
    "https://komikcast.me/komik/is/",
    "https://komikcast.me/komik/ib-instant-bullet/",
    "https://komikcast.me/komik/ibitsu/",
    "https://komikcast.me/komik/ice-cream-kanojo/",
    "https://komikcast.me/komik/ice-queen-forced-to-become-villains-son-in-law/",
    "https://komikcast.me/komik/ichi-ichi-urusai-osananajimi/",
    "https://komikcast.me/komik/ichido-dake-demo-koukai-shitemasu/",
    "https://komikcast.me/komik/ichigo-100/",
    "https://komikcast.me/komik/ichigo-100-east-side-story/",
    "https://komikcast.me/komik/ichigo-aji/",
    "https://komikcast.me/komik/ichigo-syndrome/",
    "https://komikcast.me/komik/ichijou-karen-wa-yuuwakusuru/",
    "https://komikcast.me/komik/ichijou-san-wa-kao-ni-deyasui/",
    "https://komikcast.me/komik/ichinensei-ni-nacchattara/",
    "https://komikcast.me/komik/ichioku-nen-button-o-renda-shita-ore-wa-kizuitara-saikyou-ni-natteita/",
    "https://komikcast.me/komik/ichizu-de-bitch-na-kouhai/",
    "https://komikcast.me/komik/id-the-greatest-fusion-fantasy/",
    "https://komikcast.me/komik/ideologue/",
    "https://komikcast.me/komik/idol/",
    "https://komikcast.me/komik/idol-pretender/",
    "https://komikcast.me/komik/idol-to-otaku-no-risou-no-kankei/",
    "https://komikcast.me/komik/idoling/",
    "https://komikcast.me/komik/idolish7-wish-upon-a-shooting-star/",
    "https://komikcast.me/komik/ie-ga-moete-jinsei-dou-demo-yoku-natta-kara-nokotta-nakenashi-no-kin-de-dark-elf-no-dorei-o-katta/",
    "https://komikcast.me/komik/ienai-himitsu-no-aishikata/",
    "https://komikcast.me/komik/if-ai-rules-the-world/",
    "https://komikcast.me/komik/if-elves-existed-in-the-present-day-erufu-ga-gendai-ni-itara/",
    "https://komikcast.me/komik/if-i-have-super-power/",
    "https://komikcast.me/komik/if-it-rains-next-week/",
    "https://komikcast.me/komik/if-you-are-a-good-disciple-you-can-be-a-teacher/",
    "https://komikcast.me/komik/igarashi-kun-to-nakahara-kun/",
    "https://komikcast.me/komik/ihoujin-dungeon-ni-moguru/",
    "https://komikcast.me/komik/ii-fuufu-ni-naru-dearou-futari/",
    "https://komikcast.me/komik/iinazuke-kyoutei/",
    "https://komikcast.me/komik/ijimeru-aitsu-ga-waruinoka-ijimerareta-boku-ga-waruinoka/",
    "https://komikcast.me/komik/ijimeru-yabai-yatsu/",
    "https://komikcast.me/komik/ijiranaide-nagatoro-san/",
    "https://komikcast.me/komik/ikemen-ni-tensei-shita-kedo-cheat-wa-dekimasen-shita/",
    "https://komikcast.me/komik/ikemen-sengoku-tenkabito-no-onna-ni-naru-ki-wa-nai-ka/",
    "https://komikcast.me/komik/ikemen-sugidesu-shiki-senpai/",
    "https://komikcast.me/komik/ikenai-kanojo-no-otetsudai/",
    "https://komikcast.me/komik/ikenie-ni-natta-ore-ga-nazeka-jashin-wo-horoboshite-shimatta-ken/",
    "https://komikcast.me/komik/ikinokore-shachiku-chan/",
    "https://komikcast.me/komik/ikiri-yuusha-wa-sukuenai/",
    "https://komikcast.me/komik/ikusa-x-koi/",
    "https://komikcast.me/komik/illegal-rare/",
    "https://komikcast.me/komik/ilya/",
    "https://komikcast.me/komik/im-really-not-the-son-of-luck/",
    "https://komikcast.me/komik/ima-made-ichido-mo-onna-atsukaisareta-koto-ga-nai-onna-kishi-wo-onna-atsukai-suru-manga/",
    "https://komikcast.me/komik/ima-wa-mada-osananajimi-no-imouto-desu-kedo/",
    "https://komikcast.me/komik/imaizumin-chi-wa-douyara-gal-no-tamariba-ni-natteru-rashii-deep/",
    "https://komikcast.me/komik/imasara-fantasy/",
    "https://komikcast.me/komik/imawa-no-kuni-no-alice/",
    "https://komikcast.me/komik/immortal-daddy-xianzun/",
    "https://komikcast.me/komik/immortal-merchant/",
    "https://komikcast.me/komik/immortal-mortal/",
    "https://komikcast.me/komik/immortal-regis/",
    "https://komikcast.me/komik/immortal-swordsman-in-the-reverse-world/",
    "https://komikcast.me/komik/immortal-technical-college/",
    "https://komikcast.me/komik/imouto-ga-brocon-de-nani-ga-warui/",
    "https://komikcast.me/komik/imouto-ga-ichi-nichi-ikka-shika-me-wo-awasete-kurenai/",
    "https://komikcast.me/komik/imouto-loveru/",
    "https://komikcast.me/komik/imouto-no-tomodachi-ga-nani-kangaeteru-no-ka-wakaranai/",
    "https://komikcast.me/komik/imouto-sae-ireba-ii-comic/",
    "https://komikcast.me/komik/in-bura-end/",
    "https://komikcast.me/komik/inaka-no-home-center-otoko-no-jiyuu-na-isekai-seikatsu/",
    "https://komikcast.me/komik/inari-konkon-koi-iroha/",
    "https://komikcast.me/komik/incomparable-demon-king/",
    "https://komikcast.me/komik/incompetent-villain/",
    "https://komikcast.me/komik/incredible-june/",
    "https://komikcast.me/komik/indirect-kiss/",
    "https://komikcast.me/komik/infection/",
    "https://komikcast.me/komik/infinite-competitive-dungeon-society/",
    "https://komikcast.me/komik/infinite-dendrogram/",
    "https://komikcast.me/komik/infinite-gold-god/",
    "https://komikcast.me/komik/infinite-jailbreaker/",
    "https://komikcast.me/komik/infinite-level-up-in-murim/",
    "https://komikcast.me/komik/infinite-viral-infection/",
    "https://komikcast.me/komik/infinity/",
    "https://komikcast.me/komik/infinity-mailman/",
    "https://komikcast.me/komik/ingoku-danchi/",
    "https://komikcast.me/komik/inkya-no-boku-ni-batsu-game-ni-kokuhaku-shitekita-hazu-no-gyaru-ga-doumitemo-boku-ni-betahore-desu/",
    "https://komikcast.me/komik/innocent/",
    "https://komikcast.me/komik/innocent%e2%98%86angel-yotsuba-masumis-otoko-no-ko-collection/",
    "https://komikcast.me/komik/insomniacs-after-school/",
    "https://komikcast.me/komik/instant-bullet/",
    "https://komikcast.me/komik/instant-regret/",
    "https://komikcast.me/komik/intentionally/",
    "https://komikcast.me/komik/internet-explorer/",
    "https://komikcast.me/komik/into-the-net/",
    "https://komikcast.me/komik/inu-ni-nattara-suki-na-hito-ni-hirowareta/",
    "https://komikcast.me/komik/inu-to-kuzu-dog-and-scum/",
    "https://komikcast.me/komik/inu-x-boku-ss/",
    "https://komikcast.me/komik/inugamihime-no-shimobe/",
    "https://komikcast.me/komik/inukai-x-tribe/",
    "https://komikcast.me/komik/inverse-scale/",
    "https://komikcast.me/komik/invicinble-xueba-system/",
    "https://komikcast.me/komik/invincible/",
    "https://komikcast.me/komik/invincible-at-the-start/",
    "https://komikcast.me/komik/invincible-lords-assistant/",
    "https://komikcast.me/komik/invincible-saint/",
    "https://komikcast.me/komik/invincible-sword-domain/",
    "https://komikcast.me/komik/invincible-sword-god/",
    "https://komikcast.me/komik/ippanjin-enpou-yori-kaeru/",
    "https://komikcast.me/komik/iris-zero/",
    "https://komikcast.me/komik/iroiro-to-ookii-onnanoko/",
    "https://komikcast.me/komik/iron-knight/",
    "https://komikcast.me/komik/iron-ladies/",
    "https://komikcast.me/komik/irregular-empress/",
    "https://komikcast.me/komik/irregular-of-1-in-7-billion/",
    "https://komikcast.me/komik/iryuu-team-medical-dragon/",
    "https://komikcast.me/komik/is-it-odd-that-i-became-an-adventurer-even-if-i-graduated-from-the-witchcraft-institute/",
    "https://komikcast.me/komik/is-it-tough-being-a-friend/",
    "https://komikcast.me/komik/is-it-wrong-for-the-hero-to-like-the-demon-lord-nijisanji-dj/",
    "https://komikcast.me/komik/is-not-easy-to-provoke-the-second-master/",
    "https://komikcast.me/komik/is-the-demon-king-a-healer/",
    "https://komikcast.me/komik/is-there-a-demand-for-a-harem-manga-with-only-xxx-appearing/",
    "https://komikcast.me/komik/is-there-a-problem-if-the-demon-king-is-a-goblin/",
    "https://komikcast.me/komik/true-hero/",
    "https://komikcast.me/komik/is-this-hunter-for-real/",
    "https://komikcast.me/komik/iseikai-tensei/",
    "https://komikcast.me/komik/isekai-apocalypse-mynoghra-the-conquest-of-the-world-starts-with-the-civilization-of-ruin/",
    "https://komikcast.me/komik/isekai-cheat-kaitakuki/",
    "https://komikcast.me/komik/isekai-cheat-magic-swordsman/",
    "https://komikcast.me/komik/isekai-cheat-majutsushi/",
    "https://komikcast.me/komik/isekai-cheat-survival-meshi/",
    "https://komikcast.me/komik/isekai-chef-to-saikyou-boushoku-hime/",
    "https://komikcast.me/komik/isekai-craft-gurashi-jiyu-kimamana-seisan-shoku-no-honobono-slow-life/",
    "https://komikcast.me/komik/isekai-de-kuro-no-iyashi-te-tte-yobareteimasu/",
    "https://komikcast.me/komik/isekai-de-cafe-wo-kaiten-shimashita/",
    "https://komikcast.me/komik/isekai-de-cheat-skill-wo-te-ni-shita-ore-wa-genjitsu-sekai-wo-mo-musou-suru-level-up-wa-jinsei-wo-kaeta/",
    "https://komikcast.me/komik/isekai-de-item-collector/",
    "https://komikcast.me/komik/isekai-de-kojiin-wo-hiraita-kedo-naze-ka-darehitori-sudatou-to-shinai-ken/",
    "https://komikcast.me/komik/isekai-de-mofumofu-nadenade-suru-tame-ni-ganbattemasu/",
    "https://komikcast.me/komik/isekai-de-saikyo-mao-no-kodomotachi-no-mama-ni-natchaimashita/",
    "https://komikcast.me/komik/isekai-de-saikyou-no-tsue-ni-tensei-shita-ore-ga-iyagaru-shoujo-wo-muriyari-mahou-shoujo-ni-p-suru/",
    "https://komikcast.me/komik/isekai-de-skill-wo-kaitai-shitara-cheat-na-yome-ga-zoushoku-shimashita-gainen-kousa-no-structure/",
    "https://komikcast.me/komik/isekai-de-slow-life-wo-ganbou/",
    "https://komikcast.me/komik/isekai-de-tadahitori-no-mamono-tsukai-tenshoku-shitara-maou-ni-machigawa-remashita/",
    "https://komikcast.me/komik/isekai-de-te-ni-ireta-seisan-skill-wa-saikyou-datta-you-desu/",
    "https://komikcast.me/komik/isekai-de-tochi-o-katte-noujou-o-tsukurou/",
    "https://komikcast.me/komik/isekai-death-game-ni-tensou-sarete-tsurai/",
    "https://komikcast.me/komik/isekai-demo-bunan-ni-ikitai-shoukougun/",
    "https://komikcast.me/komik/isekai-desu-ga-mamono-saibai-shiteimasu/",
    "https://komikcast.me/komik/isekai-dungeon-no-renai-jijou/",
    "https://komikcast.me/komik/isekai-elf-no-dorei-chan/",
    "https://komikcast.me/komik/isekai-goumon-hime/",
    "https://komikcast.me/komik/isekai-hitokko-doubutsuen/",
    "https://komikcast.me/komik/isekai-houtei-rebuttal-barrister/",
    "https://komikcast.me/komik/isekai-izakaya-nobu/",
    "https://komikcast.me/komik/isekai-kaeri-no-daikenja-sama-wa-sore-demo-kossori-kurashite-iru-tsumori-desu/",
    "https://komikcast.me/komik/isekai-kaeri-no-eiyuu-iwaku/",
    "https://komikcast.me/komik/isekai-kaeri-no-moto-yuusha-desu-ga-death-game-ni-makikomaremashita/",
    "https://komikcast.me/komik/isekai-kaeri-no-ossan-wa-shuumatsu-de-sekai-de-musou-suru/",
    "https://komikcast.me/komik/isekai-kaeri-no-ossan-wa-fusei-sukiru-de-fathercon-musume-tachi-o-tororori-ni/",
    "https://komikcast.me/komik/isekai-kakusei-chouzetsu-create-skill-seisan-kakou-ni-mezameta-chou-yuunouna-boku-wo-sekai-wa-hanatte-oite-kurenai-you-desu/",
    "https://komikcast.me/komik/isekai-kangoshi-wa-shugyo-chuu/",
    "https://komikcast.me/komik/isekai-kara-no-kigyou-shinshutsu/",
    "https://komikcast.me/komik/isekai-kenja-no-mazoku-hanzai-chousa/",
    "https://komikcast.me/komik/isekai-kenja-no-tensei-musou-geemu-no-chishiki-de-isekai-saikyou/",
    "https://komikcast.me/komik/isekai-kenkokuki/",
    "https://komikcast.me/komik/isekai-kokka-arukimaira-saijaku-no-o-to-muso-no-gunzei/",
    "https://komikcast.me/komik/isekai-kuimetsu-no-same/",
    "https://komikcast.me/komik/isekai-mahou-wa-okureteru/",
    "https://komikcast.me/komik/isekai-majutsushi-wa-mahou-wo-tonaenai/",
    "https://komikcast.me/komik/isekai-man-chikin-hp-1-no-mama-de-saikyou-saisoku-danjon-kouryaku/",
    "https://komikcast.me/komik/isekai-maou-to-shoukan-shoujo-dorei-majutsu/",
    "https://komikcast.me/komik/isekai-meikyuu-de-harem-wo/",
    "https://komikcast.me/komik/isekai-meikyuu-no-saishinbu-o-mezasou/",
    "https://komikcast.me/komik/isekai-monster-breeder/",
    "https://komikcast.me/komik/isekai-nanpa/",
    "https://komikcast.me/komik/isekai-ni-kita-boku-wa-kiyoubinbode-subaya-sa-tayorina-tabi-o-suru/",
    "https://komikcast.me/komik/isekai-ni-kita-mitai-dakedo-ikan-sureba-yoi-no-darou/",
    "https://komikcast.me/komik/sekai-ni-teni-shitara-yama-no-naka-datta-handou-de-tsuyo-sayor/",
    "https://komikcast.me/komik/isekai-ni-tensei-shitara-zenra-ni-sareta/",
    "https://komikcast.me/komik/isekai-ni-tobasareta-ossan-wa-doko-e-iku/",
    "https://komikcast.me/komik/isekai-no-binbou-nouka-ni-tensei-shitanode-renga-o-tsukutte-shiro-o-tateru-koto-ni-shimashita/",
    "https://komikcast.me/komik/isekai-no-hime-to-no-koi-bakuchi-ni-jinrui-no-sonbo-ga-kakattemasu/",
    "https://komikcast.me/komik/isekai-no-meikyuu-toshi-de-chiyu-mahoutsukai-yattemasu/",
    "https://komikcast.me/komik/isekai-no-senshi-toshite-kuni-ni-manekareta-kedo-kotowatte-heishi-kara-hajimeru-koto-ni-shita/",
    "https://komikcast.me/komik/isekai-no-yakusho-de-arubaito-hajimemashita/",
    "https://komikcast.me/komik/isekai-nonbiri-nouka/",
    "https://komikcast.me/komik/isekai-ntr/",
    "https://komikcast.me/komik/isekai-ojisan/",
    "https://komikcast.me/komik/isekai-omotenashi-gohan/",
    "https://komikcast.me/komik/isekai-one-turn-kill-nee-san/",
    "https://komikcast.me/komik/isekai-onsen-ni-tensei-shita-ore-no-kounou-ga-tondemosugiru/",
    "https://komikcast.me/komik/isekai-putin/",
    "https://komikcast.me/komik/isekai-rakugo/",
    "https://komikcast.me/komik/isekai-ryouridou/",
    "https://komikcast.me/komik/isekai-saikyou-no-daimaou-tensei-shi-boukensha-ni-naru/",
    "https://komikcast.me/komik/isekai-sakaba-no-sextet/",
    "https://komikcast.me/komik/isekai-senpai-tejina-senpai-wa-kono-sekai-demo-ponkotsuna-youdesu/",
    "https://komikcast.me/komik/isekai-shihai-no-skill-taker-zero-kara-hajimeru-dorei-harem/",
    "https://komikcast.me/komik/isekai-shikkaku/",
    "https://komikcast.me/komik/isekai-shokan-saretekita-seijo-sama-ga/",
    "https://komikcast.me/komik/isekai-shoukan-sareta-ga-kyousei-soukan-sareta-ore-wa-shikata-naku-yaseru-koto-ni-shita/",
    "https://komikcast.me/komik/isekai-shoukan-wa-nidome-desu/",
    "https://komikcast.me/komik/isekai-shoukan-sareta-ga-kyousei-soukan-sareta-ore-ha-shikatanaku-yaseru-koto-ni-shita/",
    "https://komikcast.me/komik/isekai-shuppan-no-henshuu-san/",
    "https://komikcast.me/komik/isekai-teni-jirai-tsuki/",
    "https://komikcast.me/komik/isekai-tensei-de-kenja-ni-natte-boukensha-seikatsu/",
    "https://komikcast.me/komik/isekai-tensei-ni-kansha-o/",
    "https://komikcast.me/komik/isekai-tensei-no-boukensya/",
    "https://komikcast.me/komik/isekai-tensei-shitara-aiken-ga-saikyou-ni-narimashita-silver-fenrir-to-ore-ga-isekai-kurashi-wo-hajimetara/",
    "https://komikcast.me/komik/isekai-tensei-soudouki/",
    "https://komikcast.me/komik/isekai-tensei-ore-ga-otome-ge-de-kyuuseishu/",
    "https://komikcast.me/komik/isekai-tensei-saretenee/",
    "https://komikcast.me/komik/isekai-tenseisha-koroshi-cheat-slayer/",
    "https://komikcast.me/komik/isekai-truck/",
    "https://komikcast.me/komik/isekai-wa-smartphone-tomo-ni/",
    "https://komikcast.me/komik/isekai-wa-template-ni-michiafurete/",
    "https://komikcast.me/komik/isekai-wo-seigyo-mahou-de-kirihirake/",
    "https://komikcast.me/komik/isekai-yakkyoku/",
    "https://komikcast.me/komik/isekai-yururi-kikou-kosodateshinagara-boukensha-shimasu/",
    "https://komikcast.me/komik/isekai-yurutto-survival-seikatsu-gakkou-no-minna-to-isekai-no-mujintou-ni-tenishitakedo-ore-dake-rakushou-desu/",
    "https://komikcast.me/komik/isekai-yuusha-mizuki/",
    "https://komikcast.me/komik/ishi-ni-usubeni-tetsu-ni-hoshi/",
    "https://komikcast.me/komik/ispy/",
    "https://komikcast.me/komik/issak/",
    "https://komikcast.me/komik/isshiki-san-wa-koi-wo-shiritai/",
    "https://komikcast.me/komik/issho-ni-ken-no-shugyou-wo-shita-osananajimi-ga-dorei-ni-natteita-no-de-s-rank-boukensha-no-boku-wa-kanojo-wo-katte-mamoru-koto-ni-shita/",
    "https://komikcast.me/komik/isuca/",
    "https://komikcast.me/komik/it-all-started-when-i-became-a-furnace-tripod/",
    "https://komikcast.me/komik/it-all-starts-with-playing-game-seriously/",
    "https://komikcast.me/komik/it-starts-with-a-mountain/",
    "https://komikcast.me/komik/it-was-soo-hot-after-all/",
    "https://komikcast.me/komik/its-fun-having-a-300000-yen-a-month-job-welcoming-home-an-onee-san-who-doesnt-find-meaning-in-a-job-that-pays-her-500000-yen-a-month/",
    "https://komikcast.me/komik/its-my-life/",
    "https://komikcast.me/komik/its-not-fun-being-the-empress-of-the-empire/",
    "https://komikcast.me/komik/its-not-meguro-sans-first-time/",
    "https://komikcast.me/komik/its-time-for-interrogation-princess/",
    "https://komikcast.me/komik/its-too-hard-to-chase-the-tsundere-prince/",
    "https://komikcast.me/komik/itai-no-wa-iya-nanode-bougyo-ryoku-ni-kyokufuri-shitai-to-omoimasu/",
    "https://komikcast.me/komik/itai-onee-san-wa-suki-desu-ka/",
    "https://komikcast.me/komik/itoshi-no-karin/",
    "https://komikcast.me/komik/itoyan-goto-naki/",
    "https://komikcast.me/komik/its-not-easy-to-be-a-man-after-traveling-to-the-future/",
    "https://komikcast.me/komik/itsu-demo-jitaku-ni-kaereru-ore-wa-isekai-de-gyoushoujin-o-hajimemashita/",
    "https://komikcast.me/komik/itsuka-hataraku-onii-san/",
    "https://komikcast.me/komik/itsuka-kamen-wo-nugu-tame-ni-warau-kishin-to-yumemiru-dorei/",
    "https://komikcast.me/komik/itsuka-onii-chan-no-oyomesan-ni/",
    "https://komikcast.me/komik/itsuka-tanshoku-no-sora-no-shita/",
    "https://komikcast.me/komik/itsumo-hitori-de-iru-anoko/",
    "https://komikcast.me/komik/itsumo-karakatte-kuru-kurasumeito-no-gekitai-houhou/",
    "https://komikcast.me/komik/itsuwaribito%e2%97%86utsuho%e2%97%86/",
    "https://komikcast.me/komik/ittsumo-shiotaiou-na-osananajimi-dakedo-ore-ni-kataomoi-shiteiru-no-ga-barebare-de-kawaii/",
    "https://komikcast.me/komik/iwakutsuki-bukken-no-yakuro-san/",
    "https://komikcast.me/komik/iya-na-kao-sare-nagara-kozukuri-sasete-moraitai/",
    "https://komikcast.me/komik/iya-na-kao-sarenagara-opantsu-misete-moraitai-yo-wa-pantsu-ga-mitai-zo/",
    "https://komikcast.me/komik/izure-saikyou-no-renkinjutsu-shi/",
    "https://komikcast.me/komik/izure-shinwa-no-houkago-sensou/",
    "https://komikcast.me/komik/jackals/",
    "https://komikcast.me/komik/jagaaaaaan/",
    "https://komikcast.me/komik/jahy-sama-wa-kujikenai/",
    "https://komikcast.me/komik/jaku-chara-tomozaki-kun/",
    "https://komikcast.me/komik/jaryuu-tensei/",
    "https://komikcast.me/komik/jashin-chan-dropkick/",
    "https://komikcast.me/komik/jc-no-life/",
    "https://komikcast.me/komik/jiandao-lingtian/",
    "https://komikcast.me/komik/jiang-ye/",
    "https://komikcast.me/komik/jianren/",
    "https://komikcast.me/komik/jibaku-shounen-hanako-kun/",
    "https://komikcast.me/komik/jibun-wo-seidorei-da-to-omoikonde-iru-dorei-chan/",
    "https://komikcast.me/komik/jichou-shinai-motoyuusha-no-tsuyokute-tanoshii-new-game/",
    "https://komikcast.me/komik/jigoku-ni-ochiru-onna-no-hanashi/",
    "https://komikcast.me/komik/jigoku-no-gouka-de-yaka-re-tsuzuketa-shounen-saikyou-no-honou-tsukai-to-natte-fukkatsu-suru/",
    "https://komikcast.me/komik/jigokuraku/",
    "https://komikcast.me/komik/jigokuren-death-life/",
    "https://komikcast.me/komik/jiisama-ga-iku/",
    "https://komikcast.me/komik/jijyou-wo-shiranai-tenkousei-ga-guigui-kuru/",
    "https://komikcast.me/komik/jikan-teishi-yuusha/",
    "https://komikcast.me/komik/jiken-jaken/",
    "https://komikcast.me/komik/jimi-hime-to-kuro-neko-no-emmanna-konyaku-haki/",
    "https://komikcast.me/komik/jimi-joshi-x-osekkai-danshi/",
    "https://komikcast.me/komik/jimina-ken-sei-wa-sore-demo-saikyoudesu/",
    "https://komikcast.me/komik/jingai-hime-sama-hajimemashita-free-life-fantasy/",
    "https://komikcast.me/komik/jingai-no-yome-to-icha-icha-suru/",
    "https://komikcast.me/komik/jinja-yell/",
    "https://komikcast.me/komik/jinjori-barai/",
    "https://komikcast.me/komik/jinmen/",
    "https://komikcast.me/komik/jinrou-e-no-tensei-maou-no-fukukan-shidou-hen/",
    "https://komikcast.me/komik/jinrou-game/",
    "https://komikcast.me/komik/jinrouki-winvurga/",
    "https://komikcast.me/komik/jinsei-wo-yarinaoshite-betsu-no-aite-to-kekkon-shitai-to-omotta-otoko/",
    "https://komikcast.me/komik/jipin-yaonie/",
    "https://komikcast.me/komik/jishou-akuyaku-reijou-na-konyakusha-no-kansatsu-kiroku/",
    "https://komikcast.me/komik/jishou-f-rank-no-oniisama-ga-game-de-hyouka-sareru-gakuen-no-chouten-ni-kunrin-suru-sou-desu-yo/",
    "https://komikcast.me/komik/jishou-heibon-mazoku-no-eiyuu-life-b-kyuu-mazoku-nano-ni-cheat-dungeon-wo-tsukutteshimatta-kekka/",
    "https://komikcast.me/komik/jitsu-wa-imouto-deshita-saikin-de-kita-giri-no-otouto-no-kyorikan-ga-yatara-chikai-wake/",
    "https://komikcast.me/komik/jitsu-wa-ore-saikyou-deshita/",
    "https://komikcast.me/komik/jitsu-wa-ryouomoi-kamo-shirenai-onee-san-to-chuusan-danshi-no-hanashi/",
    "https://komikcast.me/komik/jiuxing-tianchen/",
    "https://komikcast.me/komik/jiuyang-emperor/",
    "https://komikcast.me/komik/jiuyang-shenwang/",
    "https://komikcast.me/komik/jk-ga-machigatte-erohon-o-kariru-hanashi/",
    "https://komikcast.me/komik/jk-goddess-and-yuruyuru-ts-life/",
    "https://komikcast.me/komik/jk-haru-wa-isekai-de-shoufu-ni-natta/",
    "https://komikcast.me/komik/jk-shachiku-wo-kau/",
    "https://komikcast.me/komik/jk-to-sutego-no-akachan/",
    "https://komikcast.me/komik/jk-chan-and-her-classmates-mom/",
    "https://komikcast.me/komik/joou-heika-no-isekai-senryaku/",
    "https://komikcast.me/komik/josee-to-tora-to-sakana-tachi/",
    "https://komikcast.me/komik/joshi-kouishitsu/",
    "https://komikcast.me/komik/joshi-kousei-ha-muzukashii/",
    "https://komikcast.me/komik/joshi-shogakusei-no-oujo-sama/",
    "https://komikcast.me/komik/joshi-shougakusei-hajimemashita/",
    "https://komikcast.me/komik/joshikausei/",
    "https://komikcast.me/komik/joshikousei-no-mudadzukai/",
    "https://komikcast.me/komik/joshikousei-to-ouji-chan/",
    "https://komikcast.me/komik/joshikousei-to-seishokusha-san/",
    "https://komikcast.me/komik/joshiryoku-takamena-shishihara-kun/",
    "https://komikcast.me/komik/josou-shite-machi-ni-detara-ikemen-ni-nanpa-sareta/",
    "https://komikcast.me/komik/journey-of-the-hidden-blade/",
    "https://komikcast.me/komik/journey-to-heavens/",
    "https://komikcast.me/komik/journey-to-the-west-zheng-jian-he/",
    "https://komikcast.me/komik/js-ga-kiss-suru/",
    "https://komikcast.me/komik/jubunnoichi-no-hanayome/",
    "https://komikcast.me/komik/judge-lee-han-young/",
    "https://komikcast.me/komik/judo-club-president-and-newcomer-yuri/",
    "https://komikcast.me/komik/jueshi-guzun/",
    "https://komikcast.me/komik/jui-san-no-oshigoto-isekai/",
    "https://komikcast.me/komik/jujutsu-kaisen/",
    "https://komikcast.me/komik/jukokuin-no-tensei-boukensha/",
    "https://komikcast.me/komik/july-found-by-chance/",
    "https://komikcast.me/komik/jump-romcom-festival/",
    "https://komikcast.me/komik/jumyou-wo-kaitotte-moratta-ichinen-ni-tsuki-ichimanen-de/",
    "https://komikcast.me/komik/jun-and-kaoru-pure-and-fragrant/",
    "https://komikcast.me/komik/jungle-juice/",
    "https://komikcast.me/komik/junior-brother-demon-emperor-is-really-too-dedicated/",
    "https://komikcast.me/komik/junk-rank-family/",
    "https://komikcast.me/komik/junk-the-black-shadow/",
    "https://komikcast.me/komik/junket-bank/",
    "https://komikcast.me/komik/just-a-story-about-miyamoto-sakura-being-cute/",
    "https://komikcast.me/komik/just-one-smile-is-very-alluring/",
    "https://komikcast.me/komik/justice-never-die/",
    "https://komikcast.me/komik/juujika-no-rokunin/",
    "https://komikcast.me/komik/jyoshikou-dakara-safe/",
    "https://komikcast.me/komik/k-on/",
    "https://komikcast.me/komik/k-on-college/",
    "https://komikcast.me/komik/k-on-shuffle/",
    "https://komikcast.me/komik/kabe-ni-mary-com/",
    "https://komikcast.me/komik/kabukicho-no-joou-aina-kyuukyoku-no-sekkyaku-skill-de-isekai-no-ou-ni-naru/",
    "https://komikcast.me/komik/kabushiki-gaisha-magilumiere/",
    "https://komikcast.me/komik/kaeri-no-densha-onaji-onnanoko/",
    "https://komikcast.me/komik/kaettekita-motoyuusha/",
    "https://komikcast.me/komik/kagaku-chop/",
    "https://komikcast.me/komik/kagami-no-kuni-no-harisugawa/",
    "https://komikcast.me/komik/kagami-no-mukou-no-saihate-toshokan-kou-no-yuusha-to-itsuwari-no-maou/",
    "https://komikcast.me/komik/kagamigami/",
    "https://komikcast.me/komik/kage-no-eiyuu-no-nichijou-tan/",
    "https://komikcast.me/komik/kage-no-jitsuryokusha-ni-naritakute/",
    "https://komikcast.me/komik/kage-no-jitsuryokusha-ni-naritakute-2/",
    "https://komikcast.me/komik/kage-no-kyuuteimajutsushi/",
    "https://komikcast.me/komik/kagekuri-kitan/",
    "https://komikcast.me/komik/kagerou-daze/",
    "https://komikcast.me/komik/kaguya-sama-wa-kokurasetai-official-dj/",
    "https://komikcast.me/komik/kaguya-sama-wa-kokurasetai-tensai-tachi-no-renai-zunousen/",
    "https://komikcast.me/komik/kahara-san-no-fetish-note/",
    "https://komikcast.me/komik/kaibutsu-maid-no-kareinaru-oshigoto/",
    "https://komikcast.me/komik/kaichou-wa-maid-sama/",
    "https://komikcast.me/komik/kaichou-wa-maid-sama-marriage/",
    "https://komikcast.me/komik/kaifuku-jutsushi-yarinaoshi-sokushi-mahou-skill-copy-no-chouetsu-heal/",
    "https://komikcast.me/komik/kaigeki-no-pantser/",
    "https://komikcast.me/komik/kaijuu-no-buki-shokunin/",
    "https://komikcast.me/komik/kaiko-sareta-ankoku-heishi-30-dai-no-slow-na-second-life/",
    "https://komikcast.me/komik/kaimetsuou-12-nin-no-hoshi-no-miko/",
    "https://komikcast.me/komik/kainushi-san-ni-koi-shita-usagi-san-ga-gijinka-shite-shimau-yuri-sousaku-manga-desu/",
    "https://komikcast.me/komik/kaisar-shenwu/",
    "https://komikcast.me/komik/kaisei-no-caricature/",
    "https://komikcast.me/komik/kaishin-no-ichi-geki/",
    "https://komikcast.me/komik/kajiki-no-ryourinin/",
    "https://komikcast.me/komik/kajiya-de-hajimeru-isekai-slow-life/",
    "https://komikcast.me/komik/kakao-79/",
    "https://komikcast.me/komik/kakegurui/",
    "https://komikcast.me/komik/kako-to-nise-tantei/",
    "https://komikcast.me/komik/kakumeiki-valvrave-ryuusei-no-valkyrie/",
    "https://komikcast.me/komik/kakusansei-million-arthur-gunjou-no-sorcery-road/",
    "https://komikcast.me/komik/kakusenai-sena-san/",
    "https://komikcast.me/komik/kakushigoto-secrets/",
    "https://komikcast.me/komik/kalsarin/",
    "https://komikcast.me/komik/kamen-rider-buster/",
    "https://komikcast.me/komik/kamen-rider-spirits/",
    "https://komikcast.me/komik/kamen-rider-w-fuuto-tantei/",
    "https://komikcast.me/komik/kami-ni-aisareta-ko/",
    "https://komikcast.me/komik/kami-no-techigai-de-shindara-zumi-de-isekai-ni-hourikomare-mashita/",
    "https://komikcast.me/komik/kami-skill-kokyou-suru-dake-de-level-up-suru-boku-wa-kamigami-no-dungeon-e-idomu/",
    "https://komikcast.me/komik/kami-sama-no-iru-keshiki/",
    "https://komikcast.me/komik/kamibukuro-kun-wa-koishiteru/",
    "https://komikcast.me/komik/kamichama-karin-chu/",
    "https://komikcast.me/komik/kamieshi-to-tukia-itai/",
    "https://komikcast.me/komik/kamigami-ni-sodaterare-shimo-no-saikyou-to-naru/",
    "https://komikcast.me/komik/kamigoroshi-no-maou-saijyaku-shuzoku-ni-tensei-shi-shijyou-saikyou-ni-naru/",
    "https://komikcast.me/komik/kaminaki-sekai-no-kamisama-katsudou/",
    "https://komikcast.me/komik/kaminari-mikado-to-yobareta-saikyou-boukensha-majutsu-gakuin-ni-nyuugaku-shite-issai-no-enryo-naku-musou-suru/",
    "https://komikcast.me/komik/kamisama-drop/",
    "https://komikcast.me/komik/kamisama-ga-machigaeru/",
    "https://komikcast.me/komik/kamisama-kisama-wo-koroshitai/",
    "https://komikcast.me/komik/kamisama-ni-kago-2-nin-bun-moraimashita/",
    "https://komikcast.me/komik/kamisama-no-enmusubi/",
    "https://komikcast.me/komik/kamisama-no-koibito/",
    "https://komikcast.me/komik/kamisama-no-lutoori-ni/",
    "https://komikcast.me/komik/kamitachi-ni-hirowareta-otoko/",
    "https://komikcast.me/komik/kamiyama-san-no-kami-bukuro-no-naka-ni-wa/",
    "https://komikcast.me/komik/kamonohashi-ron-no-kindan-suiri/",
    "https://komikcast.me/komik/kampfer/",
    "https://komikcast.me/komik/kanan-sama-wa-akumade-choroi/",
    "https://komikcast.me/komik/kanchigai-no-atelier-master/",
    "https://komikcast.me/komik/kanda-kun-to-serizawa-san/",
    "https://komikcast.me/komik/kang-jin-lee/",
    "https://komikcast.me/komik/kangtawoo/",
    "https://komikcast.me/komik/kanjou-no-rairai/",
    "https://komikcast.me/komik/kannou-sensei/",
    "https://komikcast.me/komik/kanojo-ga-senpai-ni-ntr-reta-no-de-senpai-no-kanojo-wo-ntr-masu/",
    "https://komikcast.me/komik/kanojo-mo-kanojo/",
    "https://komikcast.me/komik/kanojo-ni-awaseru-kao-ga-nai/",
    "https://komikcast.me/komik/kanojo-ni-naru-hi/",
    "https://komikcast.me/komik/kanojo-ni-uwaki-sareteita-ore-ga-koakuma-na-kouhai-ni-natsukarete-imasu/",
    "https://komikcast.me/komik/kanojo-no-imouto-to-kisu-wo-shita/",
    "https://komikcast.me/komik/kanojo-no-kagi-wo-akeru-houhou/",
    "https://komikcast.me/komik/kanojo-no-tomodachi/",
    "https://komikcast.me/komik/kanojo-shoukan-shimashita/",
    "https://komikcast.me/komik/kanojo-to-boku-no-endroll/",
    "https://komikcast.me/komik/kanojo-wa-itsumo-kagayaiteita/",
    "https://komikcast.me/komik/kanojo-wa-mizumizushii/",
    "https://komikcast.me/komik/kanojo-wa-otou-san/",
    "https://komikcast.me/komik/kanojo-wa-rokurokubi/",
    "https://komikcast.me/komik/kanojo-hitomishirimasu/",
    "https://komikcast.me/komik/kanojo-okarishimasu/",
    "https://komikcast.me/komik/kantai-collection-gift-and-promise/",
    "https://komikcast.me/komik/kanzen-kaihi-healer-no-kiseki/",
    "https://komikcast.me/komik/kao-ni-denai-kashiwada-san-to-kao-ni-deru-ota-kun/",
    "https://komikcast.me/komik/kaodake-ja-suki-ni-narimasen/",
    "https://komikcast.me/komik/kaoru-hana-wa-rin-to-saku/",
    "https://komikcast.me/komik/kara-no-kioku/",
    "https://komikcast.me/komik/karakai-heta-no-najimi-chan/",
    "https://komikcast.me/komik/karakai-jouzu-no-moto-takagi-san/",
    "https://komikcast.me/komik/karakai-jouzu-no-takagi-san/",
    "https://komikcast.me/komik/karami-zakari-boku-no-honto-to-kimi-no-uso/",
    "https://komikcast.me/komik/karate-baka-isekai/",
    "https://komikcast.me/komik/karate-shoukoushi-kohinata-minoru/",
    "https://komikcast.me/komik/kare-to-karetto/",
    "https://komikcast.me/komik/karesen-joshikousei-to-tokikake-ojisan/",
    "https://komikcast.me/komik/kareshi-ga-onna-ni-nattemo-aisemasu-ka/",
    "https://komikcast.me/komik/kareshi-ni-donhiki-saretai-minamoto-san/",
    "https://komikcast.me/komik/kareshi-no-koto-ga-suki-sugite-kyou-mo-zenryoku-de-ikiru/",
    "https://komikcast.me/komik/karuna/",
    "https://komikcast.me/komik/kasshoku-henshuu-san-to-shota-mangaka/",
    "https://komikcast.me/komik/katainaka-no-ossan-kensei-ni-naru-tada-no-inaka-no-kenjutsu-shihan-datta-no-ni-taisei-shita-deshi-tachi-ga-ore-wo-hottekurenai-ken/",
    "https://komikcast.me/komik/katori-kun-to-nanahoshi-san-no-koi-shuukan/",
    "https://komikcast.me/komik/katsute-kami-datta-kemonotachi-e/",
    "https://komikcast.me/komik/kawaii-hito-saitou-ken/",
    "https://komikcast.me/komik/kawaii-joushi-wo-komarasetai/",
    "https://komikcast.me/komik/kawaikereba-hentai-demo-suki-ni-natte-kuremasu-ka/",
    "https://komikcast.me/komik/kawaisugiru-danshi-ga-ouchi-de-matteimasu/",
    "https://komikcast.me/komik/kawarimonono-kanojo-ni-mousukoshi-dake-tsukiau-hanashi/",
    "https://komikcast.me/komik/keep-a-low-profile-sect-leader/",
    "https://komikcast.me/komik/keijo/",
    "https://komikcast.me/komik/keiken-zumi-na-kimi-to-keikein-zero-na-ore-ga-otsukiai-suru-hanashi/",
    "https://komikcast.me/komik/keiken-chi-chochiku-de-donbiri-shoshin-ryoko/",
    "https://komikcast.me/komik/keiyaku-shimai/",
    "https://komikcast.me/komik/keizoku-wa-maryoku-nari/",
    "https://komikcast.me/komik/kekkaishi/",
    "https://komikcast.me/komik/kekkaishi-e-no-tensei/",
    "https://komikcast.me/komik/kekkon-ga-zentei-no-love-comedy/",
    "https://komikcast.me/komik/kekkon-shitemo-koishiteru/",
    "https://komikcast.me/komik/kekkon-surutte-hontou-desu-ka/",
    "https://komikcast.me/komik/kekkon-yubiwa-monogatari/",
    "https://komikcast.me/komik/kemonaa-yuusha-wo-otoshitai/",
    "https://komikcast.me/komik/kemono-giga/",
    "https://komikcast.me/komik/kemono-jihen/",
    "https://komikcast.me/komik/kemono-michi/",
    "https://komikcast.me/komik/kemono-mimi-loli-yuusha-wa-echina-shuusei-ni-komatteiru/",
    "https://komikcast.me/komik/kemunimaku/",
    "https://komikcast.me/komik/ken-to-mahou-no-zeikin-taisaku/",
    "https://komikcast.me/komik/kengan-asura/",
    "https://komikcast.me/komik/kengan-omega/",
    "https://komikcast.me/komik/kenja-chan-wa-satottenai/",
    "https://komikcast.me/komik/kenja-no-deshi-wo-nanoru-kenja-comic/",
    "https://komikcast.me/komik/kenja-no-mago/",
    "https://komikcast.me/komik/kenkyu-gurupu/",
    "https://komikcast.me/komik/kenshi-o-mezashite-nyugaku-shitanoni-maho-tekisei-9999-nandesukedo/",
    "https://komikcast.me/komik/kenshin-no-succeed/",
    "https://komikcast.me/komik/kenshin-to-matai-no-musuko-wa-date-ja-nai/",
    "https://komikcast.me/komik/kiba-no-tabishounin-the-arms-peddler/",
    "https://komikcast.me/komik/kiben-gakuha-yotsuya-senpai-no-kaidan/",
    "https://komikcast.me/komik/kidou-senshi-gundam-tekketsu-no-orphans-gekkou/",
    "https://komikcast.me/komik/kiite-kuremasu-yo-ne-senpai/",
    "https://komikcast.me/komik/kijima-san-to-yamada-san/",
    "https://komikcast.me/komik/kijin-gentoushou/",
    "https://komikcast.me/komik/kikai-jikake-no-marie/",
    "https://komikcast.me/komik/kikaku-hazure-no-eiyuu-ni-sodaterareta-joushiki-hazure-no-mahou-kenshi/",
    "https://komikcast.me/komik/kikanshita-yuusha-no-gojitsudan/",
    "https://komikcast.me/komik/kill-me-baby/",
    "https://komikcast.me/komik/kill-the-body/",
    "https://komikcast.me/komik/kill-the-dragon/",
    "https://komikcast.me/komik/kill-the-hero/",
    "https://komikcast.me/komik/killer-stall/",
    "https://komikcast.me/komik/killing-den/",
    "https://komikcast.me/komik/killing-ghosts/",
    "https://komikcast.me/komik/killing-me/",
    "https://komikcast.me/komik/killing-me-killing-you/",
    "https://komikcast.me/komik/killing-my-love/",
    "https://komikcast.me/komik/killing-vamp/",
    "https://komikcast.me/komik/kimetsu-no-yaiba/",
    "https://komikcast.me/komik/kimetsu-no-yaiba-heres-another-possibility/",
    "https://komikcast.me/komik/kimetsu-no-yaiba-x-years-later-tanjiro-proposes/",
    "https://komikcast.me/komik/kimetsu-no-yaiba-the-kochou-tomioka-family-dj/",
    "https://komikcast.me/komik/kimetsu-no-yaiba-zenitsu-and-nezukos-afterstory/",
    "https://komikcast.me/komik/kimetsu-no-yaiba-chibi-butterfly/",
    "https://komikcast.me/komik/kimetsu-no-yaiba-rengoku-kyoujurou-gaiden/",
    "https://komikcast.me/komik/kimetsu-no-yaiba-tomioka-giyuu-gaiden/",
    "https://komikcast.me/komik/kimetsu-no-yaiba-yushirou-epilogue/",
    "https://komikcast.me/komik/kimi-dake-wa-shinde-mo-gomen/",
    "https://komikcast.me/komik/kimi-ga-futte-kita-hi/",
    "https://komikcast.me/komik/kimi-ga-megami-nara-ii-no-ni/",
    "https://komikcast.me/komik/kimi-ga-radio-wo-suki-dakara/",
    "https://komikcast.me/komik/kimi-ga-shinanai-hi-no-gohan/",
    "https://komikcast.me/komik/kimi-ga-shinda-ato-no-watashi-no-monogatari/",
    "https://komikcast.me/komik/kimi-ga-shinu-made-ato-100-nichi/",
    "https://komikcast.me/komik/kimi-ga-shinu-natsu-ni/",
    "https://komikcast.me/komik/kimi-janakya-dame-na-dorei-shoujo/",
    "https://komikcast.me/komik/kimi-ni-koisuru-satsujinki/",
    "https://komikcast.me/komik/kimi-ni-todoke/",
    "https://komikcast.me/komik/kimi-ni-tsumugu-bouhaku/",
    "https://komikcast.me/komik/kimi-no-iru-machi/",
    "https://komikcast.me/komik/kimi-no-koe/",
    "https://komikcast.me/komik/kimi-no-koto-ga-dai-dai-dai-dai-daisuki-na-100-ri-no-kanojo/",
    "https://komikcast.me/komik/kimi-no-na-wa-your-name/",
    "https://komikcast.me/komik/kimi-no-okasan-o-boku-ni-kudasai/",
    "https://komikcast.me/komik/kimi-no-suizou-wo-tabetai/",
    "https://komikcast.me/komik/kimi-no-wasurekata-wo-oshiete/",
    "https://komikcast.me/komik/kimi-no-yokogao-shika-mirenai/",
    "https://komikcast.me/komik/kimi-to-boku-no-saigo-no-senjou-aruiwa-sekai-ga-hajimaru-seisen/",
    "https://komikcast.me/komik/kimi-to-picopico/",
    "https://komikcast.me/komik/kimi-to-tsuzuru-utakata/",
    "https://komikcast.me/komik/kimi-wa-008/",
    "https://komikcast.me/komik/kimi-wa-ai/",
    "https://komikcast.me/komik/kimi-wa-meido-sama/",
    "https://komikcast.me/komik/kimi-wa-midara-na-boku-no-joou/",
    "https://komikcast.me/komik/kimi-wa-seiya-ni-uso-o-tsuku/",
    "https://komikcast.me/komik/kimi-wa-shinenai-hai-kaburi-no-majo/",
    "https://komikcast.me/komik/kimi-wa-tsukiyo-ni-hikari-kagayaku/",
    "https://komikcast.me/komik/kimi-wa-nina-janai/",
    "https://komikcast.me/komik/kimiiro-shoujo/",
    "https://komikcast.me/komik/kin-no-kanojo-gin-no-kanojo/",
    "https://komikcast.me/komik/kindaichi-shounen-no-jikenbo-r/",
    "https://komikcast.me/komik/king-account-at-the-start/",
    "https://komikcast.me/komik/king-killer-reborn/",
    "https://komikcast.me/komik/king-mma/",
    "https://komikcast.me/komik/king-of-apocalypse/",
    "https://komikcast.me/komik/king-of-battlefield/",
    "https://komikcast.me/komik/king-of-drama/",
    "https://komikcast.me/komik/king-of-esports-dota-2/",
    "https://komikcast.me/komik/king-of-glory-great-mage-advisior/",
    "https://komikcast.me/komik/king-of-gold/",
    "https://komikcast.me/komik/king-of-hell/",
    "https://komikcast.me/komik/king-of-league-of-legend/",
    "https://komikcast.me/komik/king-of-runes/",
    "https://komikcast.me/komik/king-of-the-gods/",
    "https://komikcast.me/komik/king-of-the-labyrinth/",
    "https://komikcast.me/komik/king-of-the-soldiers/",
    "https://komikcast.me/komik/king-started/",
    "https://komikcast.me/komik/kingdom/",
    "https://komikcast.me/komik/kingdom-of-the-z/",
    "https://komikcast.me/komik/kininaru-mori-san/",
    "https://komikcast.me/komik/kininatteru-hito-ga-otoko-jyanakatta/",
    "https://komikcast.me/komik/kinjo-no-nanako-san/",
    "https://komikcast.me/komik/kinka-1-mai-de-kawaru-boukensha-seikatsu/",
    "https://komikcast.me/komik/kino-no-tabi-beautiful-world/",
    "https://komikcast.me/komik/kinsou-no-vermeil-gakeppuchi-majutshi-wa-saikyou-no-yakusai-to-mahou-sekai-o-tsukisusumu/",
    "https://komikcast.me/komik/kiotsukenayo-onee-san/",
    "https://komikcast.me/komik/kira-kira/",
    "https://komikcast.me/komik/kiraware-yuusha-o-enjita-ore-wa-naze-ka-last-boss-ni-sukarete-issho-ni-seikatsu-shitemasu/",
    "https://komikcast.me/komik/kirei-na-kurokami-no-takashina-san-mushoku-to-tsukiau-koto-ni-natta/",
    "https://komikcast.me/komik/kirei-ni-shitemoraemasu-ka/",
    "https://komikcast.me/komik/kiryuin-kaya-chi-o-suwareru-dake-no-kantan-na-oshigoto/",
    "https://komikcast.me/komik/kisaragi-san-has-a-piercing-gaze/",
    "https://komikcast.me/komik/kisei-kanojo-sana/",
    "https://komikcast.me/komik/kishuku-gakkou-no-juliet/",
    "https://komikcast.me/komik/kishuku-gakkou-no-juliet-the-official-anthology/",
    "https://komikcast.me/komik/kiss-me-or-ill-die/",
    "https://komikcast.me/komik/kiss-x-death/",
    "https://komikcast.me/komik/kiss-x-sis/",
    "https://komikcast.me/komik/kissing-lilies/",
    "https://komikcast.me/komik/kisu-mo-madana-watashi-desu/",
    "https://komikcast.me/komik/kitaku-tochuu-de-yome-to-musume-ga-dekita-n-dakedo-dragon-datta/",
    "https://komikcast.me/komik/kitakubu-katsudou-kiroku/",
    "https://komikcast.me/komik/kitanai-kimi-ga-ichiban-kawaii/",
    "https://komikcast.me/komik/kitchen-soldier/",
    "https://komikcast.me/komik/kitsune-no-akuma-kuroi-grimoire/",
    "https://komikcast.me/komik/kitsune-no-oyome-chan/",
    "https://komikcast.me/komik/kitty-bells/",
    "https://komikcast.me/komik/kiwameta-heel-ga-subete-wo-iyasu-mura-de-muyou-ni-natta-boku-wa-hirotta-gomi-wo-geki-rare-item-ni-shuuzen-shite-nariagaru/",
    "https://komikcast.me/komik/kiyomizu-iroha-wa-koi-o-shiranai/",
    "https://komikcast.me/komik/kizoku-tensei-megumareta-umare-kara-saikyou-no-chikara-wo-eru/",
    "https://komikcast.me/komik/knife-lady/",
    "https://komikcast.me/komik/knight-in-rain/",
    "https://komikcast.me/komik/knight-of-benevolence/",
    "https://komikcast.me/komik/knight-under-heart/",
    "https://komikcast.me/komik/knights-magic/",
    "https://komikcast.me/komik/kobayashi-ga-kawai-sugite-tsurai/",
    "https://komikcast.me/komik/kobayashi-san-chi-no-maid-dragon/",
    "https://komikcast.me/komik/kobayashi-san-chi-no-maid-dragon-elma-ol-nikki/",
    "https://komikcast.me/komik/kobayashi-san-chi-no-maid-dragon-lucoa-wa-boku-no-xx-desu/",
    "https://komikcast.me/komik/kobitono-tsumamigui/",
    "https://komikcast.me/komik/kodomo-no-kamisama/",
    "https://komikcast.me/komik/koe-ga-dasenai-shoujo-wa-kanojo-ga-yasashisugiru-to-omotte-iru/",
    "https://komikcast.me/komik/koe-no-chiisai-komori-san-to-kuso-deka-oogoe-no-oobayashi-kun/",
    "https://komikcast.me/komik/koe-no-katachi/",
    "https://komikcast.me/komik/koharu-no-hibi/",
    "https://komikcast.me/komik/koi-desu-ga-koi-janai/",
    "https://komikcast.me/komik/koi-goku-no-toshi/",
    "https://komikcast.me/komik/koi-ka-mahou-ka-wakaranai/",
    "https://komikcast.me/komik/koi-ni-utsutsu-wo-nukasube-karazu/",
    "https://komikcast.me/komik/koi-shita-no-de-haishin-shite-mita/",
    "https://komikcast.me/komik/koi-to-shinzou/",
    "https://komikcast.me/komik/koi-to-uso/",
    "https://komikcast.me/komik/koi-to-utatane/",
    "https://komikcast.me/komik/koi-to-yobu-ni-wa-kimochiwarui/",
    "https://komikcast.me/komik/koi-wa-ameagari-no-you-ni/",
    "https://komikcast.me/komik/koi-wa-futago-de-warikirenai/",
    "https://komikcast.me/komik/koi-wa-iikara-nemuritai/",
    "https://komikcast.me/komik/koi-wo-shiranai-boku-tachi-wa/",
    "https://komikcast.me/komik/koibito-ga-jibun-ni-dake-misete-kureru-sugao-ga-toutoi/",
    "https://komikcast.me/komik/koibito-wa-oni-no-hime/",
    "https://komikcast.me/komik/koimoku/",
    "https://komikcast.me/komik/koisome-momiji-end/",
    "https://komikcast.me/komik/koisuru-bukimi-chan/",
    "https://komikcast.me/komik/koisuru-hetareha-itsumo-bukiyou/",
    "https://komikcast.me/komik/koisuru-otome-wa-eromanga-ni-yume-wo-miru/",
    "https://komikcast.me/komik/koisuru-tenshi-chan/",
    "https://komikcast.me/komik/koisuru-yankee-girl/",
    "https://komikcast.me/komik/koitsu-ore-no-koto-suki-nanoka/",
    "https://komikcast.me/komik/kojiin-tamer/",
    "https://komikcast.me/komik/koki-tsukawarete-tsuihou-sareta-moto-s-rank-party-no-onimotsu-majutsushi-no-nariagari/",
    "https://komikcast.me/komik/koko-wa-ore-ni-makasete-saki-ni-ike-to-itte-kara-10-nen-ga-tattara-densetsu-ni-natteita/",
    "https://komikcast.me/komik/koko-wo-isekai-to-suru/",
    "https://komikcast.me/komik/kokoro-irozuku-koi-ga-shitai/",
    "https://komikcast.me/komik/kokoro-no-koe-ga-moreyasui-maid-san/",
    "https://komikcast.me/komik/kokoro-no-mama-de/",
    "https://komikcast.me/komik/kokoro-no-program/",
    "https://komikcast.me/komik/komi-san-wa-komyushou-desu/",
    "https://komikcast.me/komik/kondo-koso-shiawase-ni-narimasu/",
    "https://komikcast.me/komik/kondo-wa-korosaretakunai-azarashi-san/",
    "https://komikcast.me/komik/kondo-wa-zettai-ni-jama-shimasen/",
    "https://komikcast.me/komik/koneko-ga-matterunode-kaerimasu/",
    "https://komikcast.me/komik/koneko-hiroimashita/",
    "https://komikcast.me/komik/koneko-mata-hiroimashita/",
    "https://komikcast.me/komik/kong-suxing/",
    "https://komikcast.me/komik/konjiki-no-moji-tsukai/",
    "https://komikcast.me/komik/konna-boku-demo-maid-ni-naremasu-ka/",
    "https://komikcast.me/komik/konna-elf-ni-you-wa-nai/",
    "https://komikcast.me/komik/konna-joshi-wo-gyutte-shitai-short-stories/",
    "https://komikcast.me/komik/konna-watashi-ni-kitaishinai-de/",
    "https://komikcast.me/komik/kono-ato-mechakucha-rabukome-shita/",
    "https://komikcast.me/komik/kono-bijutsubu-ni-wa-mondai-ga-aru/",
    "https://komikcast.me/komik/kono-kaisha-ni-suki-na-hito-ga-imasu/",
    "https://komikcast.me/komik/kono-koi-wa-fukami-kun-no-plan-ni-wa-nai/",
    "https://komikcast.me/komik/kono-oneesan-wa-fiction-desu/",
    "https://komikcast.me/komik/kono-oto-tomare/",
    "https://komikcast.me/komik/kono-sekai-de-ore-dake-ga-level-up-wo-shitteiru/",
    "https://komikcast.me/komik/kono-sekai-ga-game-da-to-ore-dake-ga-shitteiru/",
    "https://komikcast.me/komik/kono-sekai-wa-tsuite-iru/",
    "https://komikcast.me/komik/kono-shima-ni-wa-midara-de-jaaku-na-mono-ga-sumu/",
    "https://komikcast.me/komik/kono-subarashii-sekai-ni-bakuen-wo/",
    "https://komikcast.me/komik/kono-subarashii-sekai-ni-nichijou-wo/",
    "https://komikcast.me/komik/kono-subarashii-sekai-ni-shukufuku-wo/",
    "https://komikcast.me/komik/kono-subarashii-sekai-ni-shukufuku-wo-kazumegu-will-get-married-in-100-days/",
    "https://komikcast.me/komik/kono-yuusha-ga-ore-tueee-kuse-ni-shinchou-sugiru/",
    "https://komikcast.me/komik/kono-yuusha-moto-maou-ni-tsuki/",
    "https://komikcast.me/komik/kononaka-ni-hitori-ore-no-yome-ga-iru/",
    "https://komikcast.me/komik/konya-wa-tsuki-ga-kirei-desu-ga-toriaezu-shi-ne/",
    "https://komikcast.me/komik/konya-wa-tsuki-ga-kirei-desu-ga-toriaezu-shine-last/",
    "https://komikcast.me/komik/konyaku-haki-sareta-reijo-wo-hirotta-ore-ga-ikenai-koto-wo-oshiekomu-oishi-mono-wo-tabesasete-oshare-wo-sasete-sekaichi-shiawasena-shojo-ni-produce/",
    "https://komikcast.me/komik/konyaku-kaihi-no-tame-koe-wo-dasanai-to-kimemashita/",
    "https://komikcast.me/komik/konyakusha-wa-watashi-no-imouto-ni-koi-o-suru/",
    "https://komikcast.me/komik/koori-zokusei-danshi-to-cool-na-douryo-joshi/",
    "https://komikcast.me/komik/koroshi-ai/",
    "https://komikcast.me/komik/koroshiya-datte-mimamoritai/",
    "https://komikcast.me/komik/koroshiya-chan-to-shinanai-target/",
    "https://komikcast.me/komik/koryuu-nara-sude-de-taosemasu-kedo-kore-tte-joushiki-janain-desu-ka/",
    "https://komikcast.me/komik/kotoba-to-honshin-ga-gyaku-ni-naru-kusuri/",
    "https://komikcast.me/komik/kotori-to-brassiere/",
    "https://komikcast.me/komik/kou-1-desu-ga-isekai-de-joushu-hajimemashita/",
    "https://komikcast.me/komik/kou-2-ni-time-leaped-shita-ore-ga-touji-suki-datta-sensei-ni-kokutta-kekka/",
    "https://komikcast.me/komik/koudouryou-no-seizana-hibi/",
    "https://komikcast.me/komik/kouga-san-no-kamiguse/",
    "https://komikcast.me/komik/koujo-denka-no-kateikyoushi/",
    "https://komikcast.me/komik/koukando-ga-mieru-you-ni-natta-n-da-ga-heroine-ga-count-stop-shite-iru-ken/",
    "https://komikcast.me/komik/koukou-debut-shita-juumai-ga-mount-tottekuru/",
    "https://komikcast.me/komik/kouritsuchuu-madoushi-daini-no-jinsei-de-madou-wo-kiwameru/",
    "https://komikcast.me/komik/kouryakuhon-o-kushi-suru-saikyou-no-mahoutsukai-meirei-sa-sero-to-wa-iwa-senai-oreryuu-mao-tobatsu-saizen-ruuto/",
    "https://komikcast.me/komik/koushaku-reijou-no-shakkin-shitsuji/",
    "https://komikcast.me/komik/koushaku-reijou-no-tashinami/",
    "https://komikcast.me/komik/koushin-koinu-ni-koibumi-wo/",
    "https://komikcast.me/komik/kousoku-play/",
    "https://komikcast.me/komik/kowamote-kokosei-to-jimikosan/",
    "https://komikcast.me/komik/koyoi-lorenzi-ke-de-kanbi-naru-chuusei-wo/",
    "https://komikcast.me/komik/kuang-shen/",
    "https://komikcast.me/komik/kubo-san-wa-boku-mobu-wo-yurusanai/",
    "https://komikcast.me/komik/kuchi-ga-saketemo-kimi-ni-wa-2019/",
    "https://komikcast.me/komik/kuchi-ga-saketemo-kimi-ni-wa/",
    "https://komikcast.me/komik/kuchidome-no-gohoubi-wa-dansou-otome-to-ichaero-desu/",
    "https://komikcast.me/komik/kuhime/",
    "https://komikcast.me/komik/kuitsume-youhei-no-gensou-kitan/",
    "https://komikcast.me/komik/kujibiki-tokushou-musou-harem-ken/",
    "https://komikcast.me/komik/kuki-ga-yomeru-shunnyushain-to-buaiso-na-sempai-no-hanashi/",
    "https://komikcast.me/komik/kuma-kuma-kuma-bear/",
    "https://komikcast.me/komik/kumo-desu-ga-nani-ka/",
    "https://komikcast.me/komik/kumo-desu-ga-nani-ka-daily-life-of-the-four-spider-sisters/",
    "https://komikcast.me/komik/kungfu-boy/",
    "https://komikcast.me/komik/kungfu-boy-legends/",
    "https://komikcast.me/komik/kuno-chiyo-the-precog/",
    "https://komikcast.me/komik/kunoichi-gakuen-ninpouchou-yogakure/",
    "https://komikcast.me/komik/kunoichi-no-ichi/",
    "https://komikcast.me/komik/kunoichi-tsubaki-no-mune-no-uchi/",
    "https://komikcast.me/komik/kurai-anoko-to-shitai-koto/",
    "https://komikcast.me/komik/kurasu-no-daikirai-na-joshi-to-kekkon-suru-koto-ni-natta/",
    "https://komikcast.me/komik/kurasu-no-inkya-busu-jitsu-wa-chou-bijin-cosplayer-datta-minna-shirazu-ni-baka-ni-shiterukedo/",
    "https://komikcast.me/komik/kuro-elf-ni-kawareta-ore-no-danjon-seikatsu-sanshoku-furo-to-jigoku-tsuki/",
    "https://komikcast.me/komik/kuro-gyaru-san-ga-kuru/",
    "https://komikcast.me/komik/kuro-homura-no-sen-otome/",
    "https://komikcast.me/komik/kuro-no-kenja-ha-kage-wo-oru/",
    "https://komikcast.me/komik/kuro-no-maou/",
    "https://komikcast.me/komik/kuro-no-senki/",
    "https://komikcast.me/komik/kuro-no-shoukanshi/",
    "https://komikcast.me/komik/kuro-no-souzou-shoukanshi/",
    "https://komikcast.me/komik/kuro-chan-chi-no-oshiire-ga-tsukaenai-riyuu/",
    "https://komikcast.me/komik/kurogane/",
    "https://komikcast.me/komik/kurogane-no-ido/",
    "https://komikcast.me/komik/kurogane-no-mahoutsukai/",
    "https://komikcast.me/komik/kuroha-to-nijisuke/",
    "https://komikcast.me/komik/kuroi-san-after-school/",
    "https://komikcast.me/komik/kuroiwa-medaka-ni-watashi-no-kawaii-ga-tsuujinai/",
    "https://komikcast.me/komik/kuroko-no-basket-extra-game-end/",
    "https://komikcast.me/komik/kuromori-san-wa-smartphone-ga-tsukaenai/",
    "https://komikcast.me/komik/kuroneko-to-majo-no-kyoushitsu/",
    "https://komikcast.me/komik/kuroorihime-to-kawaki-no-ou/",
    "https://komikcast.me/komik/kurosaki-san-no-ichizuna-ai-ga-tomaranai/",
    "https://komikcast.me/komik/kuroshiro-no-torikago/",
    "https://komikcast.me/komik/kuroshitsuji/",
    "https://komikcast.me/komik/kusattetemo-kimi-ga-suki/",
    "https://komikcast.me/komik/kuso-zako-fuuki-iinchou-kaeri-chan/",
    "https://komikcast.me/komik/kusozako-mesugaki-fuuki-iinchou/",
    "https://komikcast.me/komik/kusuriya-no-hitorigoto/",
    "https://komikcast.me/komik/kuuki-ga-yomeru-shinnyushain-to-buaiso-na-senpai-no-hanashi-serialization/",
    "https://komikcast.me/komik/kuutei-dragons/",
    "https://komikcast.me/komik/kuzu-inou%e3%80%90ondo-wo-kaeru-mono%e3%80%91no-ore-ga-musou-suru-made/",
    "https://komikcast.me/komik/kuzu-no-honkai/",
    "https://komikcast.me/komik/kuzu-no-honkai-decor/",
    "https://komikcast.me/komik/kuzu-to-megane-to-bungaku-shoujo/",
    "https://komikcast.me/komik/kuzumi-kun-kuuki-yometemasu-ka/",
    "https://komikcast.me/komik/kyokou-suiri-invented-inference/",
    "https://komikcast.me/komik/kyokuten-no-hono-majutsushi-fire-ball-shika-tsukaenai-kedo-motetai-isshin-de-saikyo-ni-narimashita/",
    "https://komikcast.me/komik/kyosei-tensei/",
    "https://komikcast.me/komik/kyou-kara-hajimeru-osananajimi/",
    "https://komikcast.me/komik/kyou-kara-mirai/",
    "https://komikcast.me/komik/kyou-kara-ore-wa-loli-no-himo/",
    "https://komikcast.me/komik/kyou-kara-tsukaeru-yakugakuteki-osewa/",
    "https://komikcast.me/komik/kyou-mo-hitotsu-yane-no-shita/",
    "https://komikcast.me/komik/kyou-mo-onnanoko-wo-kouryaku-shita/",
    "https://komikcast.me/komik/kyou-no-cerberus/",
    "https://komikcast.me/komik/kyou-no-sanponta/",
    "https://komikcast.me/komik/kyou-no-yuiko-san/",
    "https://komikcast.me/komik/kyoudai-hodo-chikaku-tooimono-wa-nai/",
    "https://komikcast.me/komik/kyougaku-koukou-no-genjitsu/",
    "https://komikcast.me/komik/kyouhan/",
    "https://komikcast.me/komik/kyoukai-meikyuu-to-ikai-no-majutsushi/",
    "https://komikcast.me/komik/kyoukai-no-nai-sekai/",
    "https://komikcast.me/komik/kyouryu-chan-to-kaseki-kun/",
    "https://komikcast.me/komik/kyoushitsu-jibaku-club/",
    "https://komikcast.me/komik/kyuketsuki-san-konyanokazu-wa-nandesu-ka/",
    "https://komikcast.me/komik/kyuu-ni-ane-ga-dekimashite/",
    "https://komikcast.me/komik/kyuubo-suterareteta-dragon-hirotta/",
    "https://komikcast.me/komik/kyuuketsuki-maruguritto-to-kuenai-gokinjo/",
    "https://komikcast.me/komik/kyuuketsuki-no-sumu-machi/",
    "https://komikcast.me/komik/kyuuketsuki-sugu-shinu/",
    "https://komikcast.me/komik/kyuuketsuki-to-yobaretai/",
    "https://komikcast.me/komik/kyuuketsuki-chan-x-kouhai-chan/",
    "https://komikcast.me/komik/kyuuki-no-adabana/",
    "https://komikcast.me/komik/kyutei-kajishi-no-shiawase-na-nichijou/",
    "https://komikcast.me/komik/kyuutei-mahou-shi-kubi-ni-nattande-inaka-ni-kaette-mahou-ka-no-sensei-ni-narimasu/",
    "https://komikcast.me/komik/l-dk/",
    "https://komikcast.me/komik/l-a-g/",
    "https://komikcast.me/komik/l-o-r-d-legend-of-ravaging-dynasties/",
    "https://komikcast.me/komik/lab-mice-game/",
    "https://komikcast.me/komik/lady-gladiator/",
    "https://komikcast.me/komik/lady-rose-heimin-ni-naritai/",
    "https://komikcast.me/komik/lalins-curse/",
    "https://komikcast.me/komik/landladyankee-my-apartment-life-with-a-yankee-landlord/",
    "https://komikcast.me/komik/lang-huan-library/",
    "https://komikcast.me/komik/lanke-special-destiny/",
    "https://komikcast.me/komik/lasboss-x-hero/",
    "https://komikcast.me/komik/last-boss-yamete-mita-shujinkou-ni-taosareta-furi-shite-jiyuu-ni-ikite-mita/",
    "https://komikcast.me/komik/last-game/",
    "https://komikcast.me/komik/last-ranker-last-one/",
    "https://komikcast.me/komik/last-round-arthurs/",
    "https://komikcast.me/komik/last-word-of-the-world/",
    "https://komikcast.me/komik/late-winter/",
    "https://komikcast.me/komik/lawless-zone/",
    "https://komikcast.me/komik/lazy-prince-becomes-a-genius/",
    "https://komikcast.me/komik/leadale-no-daichi-nite/",
    "https://komikcast.me/komik/league-of-g-o-w-god-of-war/",
    "https://komikcast.me/komik/learning-magic-in-another-world/",
    "https://komikcast.me/komik/led-along-by-the-jirai-kei-nursery-teacher/",
    "https://komikcast.me/komik/lee-doona/",
    "https://komikcast.me/komik/legacy/",
    "https://komikcast.me/komik/legend/",
    "https://komikcast.me/komik/legend-of-asura-the-venom-dragon-poison-dragon/",
    "https://komikcast.me/komik/legend-of-cyber-heroes/",
    "https://komikcast.me/komik/legend-of-emperor-star/",
    "https://komikcast.me/komik/legend-of-phoenix/",
    "https://komikcast.me/komik/legend-of-seven-leaves/",
    "https://komikcast.me/komik/legend-of-star-general/",
    "https://komikcast.me/komik/legend-of-the-four-beast/",
    "https://komikcast.me/komik/legend-of-the-northern-blade/",
    "https://komikcast.me/komik/legend-of-the-tyrant-empress/",
    "https://komikcast.me/komik/legend-of-wuquan/",
    "https://komikcast.me/komik/legend-the-beginning/",
    "https://komikcast.me/komik/legendary-fish-take-the-world/",
    "https://komikcast.me/komik/legendary-youngest-son-of-the-marquis-house/",
    "https://komikcast.me/komik/lemonade-girl/",
    "https://komikcast.me/komik/lengxie-hadess-apex-pet/",
    "https://komikcast.me/komik/lessa-servant-of-cosmos/",
    "https://komikcast.me/komik/let-me-game-in-peace/",
    "https://komikcast.me/komik/lets-love-each-other-female-assassin/",
    "https://komikcast.me/komik/level-0-evil-king-become-the-adventurer-in-the-new-world/",
    "https://komikcast.me/komik/level-1-dakedo-yuniiku-sukiru-de-saikyou-desu/",
    "https://komikcast.me/komik/level-1-kara-hajimaru-shoukan-musou/",
    "https://komikcast.me/komik/level-1-no-saikyou-kenja-noroi-de-saikakyuu-mahou-shika-tsukaenai-kedo-kami-no-kanchigai-de-mugen/",
    "https://komikcast.me/komik/level-1-player/",
    "https://komikcast.me/komik/level-berserker/",
    "https://komikcast.me/komik/level-up/",
    "https://komikcast.me/komik/level-up-doctor/",
    "https://komikcast.me/komik/leveling-again-the-story-of-agaya/",
    "https://komikcast.me/komik/leveling-my-husband-to-the-max/",
    "https://komikcast.me/komik/leveling-up-with-likes/",
    "https://komikcast.me/komik/leveling-up-by-only-eating/",
    "https://komikcast.me/komik/leveling-with-the-gods/",
    "https://komikcast.me/komik/leviathan/",
    "https://komikcast.me/komik/lian-fei-wei-bao/",
    "https://komikcast.me/komik/liar-liar/",
    "https://komikcast.me/komik/libashanhe-xi-zitang/",
    "https://komikcast.me/komik/liberta/",
    "https://komikcast.me/komik/libidors/",
    "https://komikcast.me/komik/library-tiandao/",
    "https://komikcast.me/komik/life-death-song-night/",
    "https://komikcast.me/komik/life-and-death-the-awakening/",
    "https://komikcast.me/komik/life-cry/",
    "https://komikcast.me/komik/life-in-the-end-times-from-scratch/",
    "https://komikcast.me/komik/life-of-a-former-senpai-wife-and-a-former-kouhai-husband/",
    "https://komikcast.me/komik/lifeafter/",
    "https://komikcast.me/komik/light-again/",
    "https://komikcast.me/komik/light-vs-shadow/",
    "https://komikcast.me/komik/lightning-degree/",
    "https://komikcast.me/komik/lilium-terrarium/",
    "https://komikcast.me/komik/lily/",
    "https://komikcast.me/komik/lily-lily-la-la-land/",
    "https://komikcast.me/komik/limbless-schira/",
    "https://komikcast.me/komik/limin-diguo/",
    "https://komikcast.me/komik/limit-breaker/",
    "https://komikcast.me/komik/limitless-abyss/",
    "https://komikcast.me/komik/lin-fei-chronicles/",
    "https://komikcast.me/komik/ling-tian-shendi/",
    "https://komikcast.me/komik/ling-tong-cang-zong/",
    "https://komikcast.me/komik/lion-coeur-senki/",
    "https://komikcast.me/komik/list-of-big-villians/",
    "https://komikcast.me/komik/little-13/",
    "https://komikcast.me/komik/little-girl-x-scoop-x-evil-eye/",
    "https://komikcast.me/komik/little-hands/",
    "https://komikcast.me/komik/little-sister-my-older-onee-chan-is-cute/",
    "https://komikcast.me/komik/little-tyrant-doesnt-want-to-meet-with-a-bad-end/",
    "https://komikcast.me/komik/liv/",
    "https://komikcast.me/komik/live-dungeon/",
    "https://komikcast.me/komik/live-stream-the-husky-of-the-goddess/",
    "https://komikcast.me/komik/living-alone-got-fever-fall-in-love/",
    "https://komikcast.me/komik/living-in-another-world-by-taking-commissions-a-relaxing-and-comfy-life-of-the-restoration-magicians-staffing-agency/",
    "https://komikcast.me/komik/living-in-this-world-with-cut-paste/",
    "https://komikcast.me/komik/living-no-matsunaga-san/",
    "https://komikcast.me/komik/living-with-a-villainous-boss/",
    "https://komikcast.me/komik/living-with-my-pupil-is-even-more-stressful-than-the-battlefield/",
    "https://komikcast.me/komik/living-with-one-leg/",
    "https://komikcast.me/komik/lock-on/",
    "https://komikcast.me/komik/lockdown-no-escape/",
    "https://komikcast.me/komik/locker-opener/",
    "https://komikcast.me/komik/locker-room/",
    "https://komikcast.me/komik/log-horizon-nishikaze-no-ryodan/",
    "https://komikcast.me/komik/log-horizon-nyanta-hanchou-shiawase-no-recipe/",
    "https://komikcast.me/komik/logres-swords-sorcery-goddess-disaster/",
    "https://komikcast.me/komik/lonely-for-christmas-senpai-and-santa-kouhai/",
    "https://komikcast.me/komik/long-live-summons/",
    "https://komikcast.me/komik/long-live-the-king/",
    "https://komikcast.me/komik/look-back-fujimoto-tatsuki/",
    "https://komikcast.me/komik/looking-for-a-father/",
    "https://komikcast.me/komik/looks-dont-really-matter-much-at-the-job/",
    "https://komikcast.me/komik/loooser-loser-loser-loser-sensei/",
    "https://komikcast.me/komik/loop/",
    "https://komikcast.me/komik/loop-8-shu-me-ha-shiawasena-jinsei-wo-7-shu-bun-no-keiken-chi-to-daisan-ojo-no-kantei-de-kakusei-shita-ore-ha-aibo-no-behemoth-totomoni-muso-suru/",
    "https://komikcast.me/komik/lord-el-melloi-ii-sei-no-jikenbo/",
    "https://komikcast.me/komik/lord-futian/",
    "https://komikcast.me/komik/lord-of-goblins/",
    "https://komikcast.me/komik/lord-of-nine-arts/",
    "https://komikcast.me/komik/lord-of-the-abyss/",
    "https://komikcast.me/komik/lord-of-the-mysteries/",
    "https://komikcast.me/komik/lord-of-the-universe/",
    "https://komikcast.me/komik/lord-xue-ying/",
    "https://komikcast.me/komik/lost-man-kuji-shinnosuke/",
    "https://komikcast.me/komik/love-cute-short-stories/",
    "https://komikcast.me/komik/love-after-world-domination/",
    "https://komikcast.me/komik/love-cant-be-the-same/",
    "https://komikcast.me/komik/love-death/",
    "https://komikcast.me/komik/love-donor/",
    "https://komikcast.me/komik/love-is-a-cherry-color/",
    "https://komikcast.me/komik/love-is-blind-fujimoto-tatsuki/",
    "https://komikcast.me/komik/love-is-heavy/",
    "https://komikcast.me/komik/love-letter/",
    "https://komikcast.me/komik/love-live-sunshine/",
    "https://komikcast.me/komik/love-plus-rinko-days/",
    "https://komikcast.me/komik/love-rush/",
    "https://komikcast.me/komik/love-song-wa-todokanai/",
    "https://komikcast.me/komik/love-wars-victory/",
    "https://komikcast.me/komik/love-kyo-kateikyoushi-ga-xx-sugite-benkyou-dokoro-janai/",
    "https://komikcast.me/komik/love-x/",
    "https://komikcast.me/komik/love-probability-and-the-winning-formula/",
    "https://komikcast.me/komik/lovecome-like-a-demon/",
    "https://komikcast.me/komik/luan-quan/",
    "https://komikcast.me/komik/luck-control/",
    "https://komikcast.me/komik/lucky-bad-man/",
    "https://komikcast.me/komik/lumiamber-and-aether-vs-g-kun/",
    "https://komikcast.me/komik/lv1-maou-to-one-room/",
    "https://komikcast.me/komik/lv2-kara-cheat-datta-moto-yuusha-kouho-no-mattari-isekai-life/",
    "https://komikcast.me/komik/lv999-no-murabito/",
    "https://komikcast.me/komik/mabarai-san-hunt-me-down/",
    "https://komikcast.me/komik/mabaram-the-school-conqueror/",
    "https://komikcast.me/komik/machida-kun-no-sekai/",
    "https://komikcast.me/komik/machigai-shoukan-oidasareta-kedo-joui-gokan-skill-de-rakuraku-seikatsu/",
    "https://komikcast.me/komik/machigatta-ko-wo-mahou-shoujo-ni-shite-shimatta/",
    "https://komikcast.me/komik/machine-doll-wa-kizutsukanai/",
    "https://komikcast.me/komik/madan-no-ou-to-michelia/",
    "https://komikcast.me/komik/madan-no-ou-to-vanadis/",
    "https://komikcast.me/komik/made-in-abyss/",
    "https://komikcast.me/komik/made-in-hikkomuse/",
    "https://komikcast.me/komik/madoromi-barmaid/",
    "https://komikcast.me/komik/madoromi-chan-ga-iku/",
    "https://komikcast.me/komik/mafias-daughter-operation-makeover/",
    "https://komikcast.me/komik/maga-tsuki/",
    "https://komikcast.me/komik/magan-to-dangan-o-tsukatte-isekai-o-buchinuku/",
    "https://komikcast.me/komik/magatsu-wanashi-no-yuusha-kari/",
    "https://komikcast.me/komik/magdala-de-nemure/",
    "https://komikcast.me/komik/mage-demon-queen/",
    "https://komikcast.me/komik/mage-again/",
    "https://komikcast.me/komik/magi-labyrinth-of-magic/",
    "https://komikcast.me/komik/magi-sinbad-no-bouken/",
    "https://komikcast.me/komik/magi-craft-meister/",
    "https://komikcast.me/komik/magia-record-mahou-shoujo-madoka-magica-gaiden/",
    "https://komikcast.me/komik/magic-destroyer/",
    "https://komikcast.me/komik/magic-domain-mercenary/",
    "https://komikcast.me/komik/magic-emperor/",
    "https://komikcast.me/komik/magic-fairy/",
    "https://komikcast.me/komik/magic-immortal-qi/",
    "https://komikcast.me/komik/magic-kaito/",
    "https://komikcast.me/komik/magic-maker-isekai-mahou-no-tsukurikata/",
    "https://komikcast.me/komik/magic-scroll-merchant-zio/",
    "https://komikcast.me/komik/magica-technica-sword-demon-rakshasas-vrmmo-battle-record/",
    "https://komikcast.me/komik/magical-girl-fran-and-tio/",
    "https://komikcast.me/komik/magical-girl-kakeru/",
    "https://komikcast.me/komik/magical-patissier-kosaki-chan/",
    "https://komikcast.me/komik/magical-shooting-sniper-of-steel/",
    "https://komikcast.me/komik/magical-trans/",
    "https://komikcast.me/komik/magical-x-miracle/",
    "https://komikcast.me/komik/magical%e2%98%85explorer-eroge-no-yuujin-kyara-ni-tensei-shitakedo-game-chishiki-tsukatte-jiyuu-ni-ikiru/",
    "https://komikcast.me/komik/magician-of-memories/",
    "https://komikcast.me/komik/magician-of-the-depths/",
    "https://komikcast.me/komik/magico/",
    "https://komikcast.me/komik/magika-no-kenshi-to-basileus/",
    "https://komikcast.me/komik/mahou-gakuen-no-daizai-majutsushi/",
    "https://komikcast.me/komik/mahou-sensou/",
    "https://komikcast.me/komik/mahou-shoujo-ni-akogarete/",
    "https://komikcast.me/komik/mahou-shoujo-end/",
    "https://komikcast.me/komik/mahou-shoujo-ore/",
    "https://komikcast.me/komik/mahou-shoujo-pretty%e2%98%86bell/",
    "https://komikcast.me/komik/mahou-shoujo-site/",
    "https://komikcast.me/komik/mahou-shoujo-site-sept/",
    "https://komikcast.me/komik/mahou-shoujo-site-nanoka-hen/",
    "https://komikcast.me/komik/mahou-shoujou-site-2/",
    "https://komikcast.me/komik/mahou-tsukai-no-yome/",
    "https://komikcast.me/komik/mahou-sonna-koto-yori-kinniku-da/",
    "https://komikcast.me/komik/mahouka-koukou-no-rettousei/",
    "https://komikcast.me/komik/mahouka-koukou-no-rettousei-kaichou-senkyo-hen/",
    "https://komikcast.me/komik/mahouka-koukou-no-rettousei-koto-nairan-hen/",
    "https://komikcast.me/komik/mahouka-koukou-no-rettousei-kyuukousenhen/",
    "https://komikcast.me/komik/mahouka-koukou-no-rettousei-raihousha-hen/",
    "https://komikcast.me/komik/mahouka-koukou-no-rettousei-steeplechase-hen/",
    "https://komikcast.me/komik/mahouka-koukou-no-rettousei-tsuioku-hen/",
    "https://komikcast.me/komik/mahouka-koukou-no-rettousei-natsuyasumi-hen/",
    "https://komikcast.me/komik/mahouka-koukou-no-rettousei-double-seven-hen/",
    "https://komikcast.me/komik/mahoutsukai-no-insatsujo/",
    "https://komikcast.me/komik/mahoutsukai-no-konyakusha/",
    "https://komikcast.me/komik/mahoutsukai-reimeiki/",
    "https://komikcast.me/komik/mai-ball/",
    "https://komikcast.me/komik/maid-no-kishi-san/",
    "https://komikcast.me/komik/maid-san-to-obocchama/",
    "https://komikcast.me/komik/maiko-san-chi-no-makanai-san/",
    "https://komikcast.me/komik/mainichi-shine-shine-itte-kuru-gimai-ga-ore-ga-nete-iru-suki-ni-saimin-jutsu-de-hore-saseyou-to-shite-kurundakedo/",
    "https://komikcast.me/komik/mairimashita-iruma-kun/",
    "https://komikcast.me/komik/mairimashita-iruma-kun-kalego-gaiden/",
    "https://komikcast.me/komik/maji-de-tsukiau-15-pun-mae/",
    "https://komikcast.me/komik/majime-succubus-hiiragi-san/",
    "https://komikcast.me/komik/majo-no-kaigashuu/",
    "https://komikcast.me/komik/majo-shuukai-de-aimashou/",
    "https://komikcast.me/komik/majo-taisen/",
    "https://komikcast.me/komik/majo-senpai-nichijou/",
    "https://komikcast.me/komik/majokari-no-gendai-kyoten/",
    "https://komikcast.me/komik/majutsushi-kunon-wa-miete-iru/",
    "https://komikcast.me/komik/makai-kaeri-no-rettou-nouryokusha/",
    "https://komikcast.me/komik/make-heroine-ga-oosugiru/",
    "https://komikcast.me/komik/make-heroine-wo-katasetai/",
    "https://komikcast.me/komik/maken-no-daydreamer/",
    "https://komikcast.me/komik/maken-tsukai-no-moto-shounen-hei-wa-moto-teki-kanbu-no-onee-san-to-issho-ni-ikitai/",
    "https://komikcast.me/komik/makenshi-no-maken-niyoru-maken-no-tame-no-harem-life/",
    "https://komikcast.me/komik/maker-hikoshiki-hatsune-mix/",
    "https://komikcast.me/komik/makeshift-maid/",
    "https://komikcast.me/komik/makikomarete-isekai-teni-suru-yatsu-wa-taitei-cheat/",
    "https://komikcast.me/komik/making-my-zombie-childhood-friend-feel-alive/",
    "https://komikcast.me/komik/makka-na-tulip-wo-kimi-ni/",
    "https://komikcast.me/komik/malaise-creature-awaken/",
    "https://komikcast.me/komik/mama-jalter/",
    "https://komikcast.me/komik/mama-wa-doukyuusei/",
    "https://komikcast.me/komik/mamahaha-no-tsurego-ga-moto-kanodatta/",
    "https://komikcast.me/komik/mamono-wo-shitagaeru-teiin-wo-motsu-tensei-kenjya-katsute-no-maho-to-jyuma-de-hissori-saikyo-no-bokensha-ninaru/",
    "https://komikcast.me/komik/mamori-mama-wa-o-yobi-janai-no-isekai-musuko-hankoki/",
    "https://komikcast.me/komik/man-from-hell/",
    "https://komikcast.me/komik/manadeshi-ni-uragirarete-shinda-ossan-yuusha-shijou-saikyou-no-maou-toshite-ikikaeru/",
    "https://komikcast.me/komik/manager-kim/",
    "https://komikcast.me/komik/manatsu-no-intro/",
    "https://komikcast.me/komik/mang-huang-ji/",
    "https://komikcast.me/komik/manga-wo-yomeru-ore-ga-sekai-saikyou/",
    "https://komikcast.me/komik/mangaka-san-to-assistant-san-to-2/",
    "https://komikcast.me/komik/mannen-d-rank-no-chuunen-boukensha-yotta-ikioi-de-densetsu-no-ken-wo-hikkonuku/",
    "https://komikcast.me/komik/manshuu-ahen-squad/",
    "https://komikcast.me/komik/manuke-na-fps-player-ga-isekai-e-ochita-baai/",
    "https://komikcast.me/komik/maohritsu-chu-boss-yousei-academia/",
    "https://komikcast.me/komik/maou-desu-onna-yuusha-no-hahaoya-to-saikon-shita-no-de-onna-yuusha-ga-giri-no-musume-ni-narimashita/",
    "https://komikcast.me/komik/maou-gakuen-no-hangyakusha/",
    "https://komikcast.me/komik/maou-gakuin-no-futekigousha-shijou-saikyou-no-maou-no-shiso-tensei-shite-shison-tachi-no-gakkou-e-kayou/",
    "https://komikcast.me/komik/maou-gun-no-kyuuseishu/",
    "https://komikcast.me/komik/maou-gun-saikyou-no-majutsushi-wa-ningen-datta/",
    "https://komikcast.me/komik/maou-jou-de-oyasumi/",
    "https://komikcast.me/komik/maou-na-anoko-murabito/",
    "https://komikcast.me/komik/maou-na-ore-to-ghoul-no-yubiwa/",
    "https://komikcast.me/komik/maou-ni-natte-node-dungeon-tsukutte-jingai-musume-to-honobono-suru/",
    "https://komikcast.me/komik/maou-no-hisho/",
    "https://komikcast.me/komik/maou-no-jinji/",
    "https://komikcast.me/komik/maou-no-kawaii-yamada-wa-yoiko/",
    "https://komikcast.me/komik/maou-no-koi-mamanaranu/",
    "https://komikcast.me/komik/maou-no-mama-ni-narundayo/",
    "https://komikcast.me/komik/maou-no-migiude-ni-nattanode-gensaku-kaiaku-shimasu/",
    "https://komikcast.me/komik/maou-no-musume-wa-yasashi-sugiru/",
    "https://komikcast.me/komik/maou-no-musume-tachi-yo-ma-guwa-eba-tsuyoku-narerutte-hontou-desu-ka/",
    "https://komikcast.me/komik/maou-no-musume-sugoku-choroi/",
    "https://komikcast.me/komik/maou-no-ore-ga-dorei-elf-wo-yome-ni-shitanda-ga-dou-medereba-ii/",
    "https://komikcast.me/komik/maou-o-taoshita-ore-ni-matteita-no-wa-sewazuki-na-yome-to-no-ichaicha-renkin-seikatsu-datta/",
    "https://komikcast.me/komik/maou-reijou-no-kyouiku-gakari/",
    "https://komikcast.me/komik/maou-to-ore-no-hanggyakuki/",
    "https://komikcast.me/komik/maou-toubatsu-shita-ato-medachitakunai-node-guild-master-ni-natta/",
    "https://komikcast.me/komik/maou-tsukai-no-saikyou-shihai/",
    "https://komikcast.me/komik/maou-sama-chotto-sore-totte/",
    "https://komikcast.me/komik/maou-sama-no-machizukuri-saikyou-no-danjon-wa-kindai-toshi/",
    "https://komikcast.me/komik/maou-sama-to-kekkonshitai/",
    "https://komikcast.me/komik/maou-sama-retry/",
    "https://komikcast.me/komik/maou-sama-retry-r/",
    "https://komikcast.me/komik/marchen-the-embodiment-of-tales/",
    "https://komikcast.me/komik/maria-children/",
    "https://komikcast.me/komik/maria-sensei-wa-imouto-gachizei/",
    "https://komikcast.me/komik/marriage-gray/",
    "https://komikcast.me/komik/marriagetoxin/",
    "https://komikcast.me/komik/marry-grave/",
    "https://komikcast.me/komik/marry-yuuki-miku/",
    "https://komikcast.me/komik/marry-to-find-love/",
    "https://komikcast.me/komik/martial-art-successor/",
    "https://komikcast.me/komik/martial-artist-lee-gwak/",
    "https://komikcast.me/komik/martial-arts-master-in-the-city/",
    "https://komikcast.me/komik/martial-arts-reigns/",
    "https://komikcast.me/komik/martial-god-asura/",
    "https://komikcast.me/komik/martial-god-chat-group/",
    "https://komikcast.me/komik/martial-gods-space/",
    "https://komikcast.me/komik/martial-inverse/",
    "https://komikcast.me/komik/martial-kings-retired-life/",
    "https://komikcast.me/komik/martial-legacy/",
    "https://komikcast.me/komik/martial-master/",
    "https://komikcast.me/komik/martial-peak/",
    "https://komikcast.me/komik/marvelous-hero-of-the-sword/",
    "https://komikcast.me/komik/maryoku-zero-no-saikyou-majutsushi-yahari-omaera-no-majutsu-riron-wa-machigatte-iru-nda-ga/",
    "https://komikcast.me/komik/masamune-kun-no-revenge/",
    "https://komikcast.me/komik/masamune-kun-no-revenge-after-school/",
    "https://komikcast.me/komik/masamune-kun-no-revenge-rental-boyfriend/",
    "https://komikcast.me/komik/maseki-gurume-mamono-no-chikara-o-tabete-ore-wa-saikyou/",
    "https://komikcast.me/komik/mashle-magic-and-muscles/",
    "https://komikcast.me/komik/master-castle/",
    "https://komikcast.me/komik/master-of-fortune/",
    "https://komikcast.me/komik/master-of-gu/",
    "https://komikcast.me/komik/master-university/",
    "https://komikcast.me/komik/masters-of-endurance/",
    "https://komikcast.me/komik/mata-onaji-yume-wo-mite-ita/",
    "https://komikcast.me/komik/mata-kataomou/",
    "https://komikcast.me/komik/matano-okoshiwo/",
    "https://komikcast.me/komik/match-made-in-heaven-by-chance/",
    "https://komikcast.me/komik/matching/",
    "https://komikcast.me/komik/matchless-dynasty/",
    "https://komikcast.me/komik/matchless-emperor/",
    "https://komikcast.me/komik/mato-seihei-no-slave/",
    "https://komikcast.me/komik/mattaku-ero-kunai-succubus-no-hanashi/",
    "https://komikcast.me/komik/mattaku-saikin-no-tantei-kitara/",
    "https://komikcast.me/komik/max-level-knight/",
    "https://komikcast.me/komik/maxed-out-leveling/",
    "https://komikcast.me/komik/may-i-ask-for-one-final-thing/",
    "https://komikcast.me/komik/may-no-maiden/",
    "https://komikcast.me/komik/mayabi/",
    "https://komikcast.me/komik/maydare-tensei-monogatari-kono-sekai-de-ichiban-warui-majo/",
    "https://komikcast.me/komik/mayonaka-no-gakkou-ni-osananajimi-to-shinobikomu-yuri-manga/",
    "https://komikcast.me/komik/mayonaka-no-x-giten/",
    "https://komikcast.me/komik/mayuri-chan-who-quickly-gives-up/",
    "https://komikcast.me/komik/mazumeshi-elf-to-yuubokugurashi/",
    "https://komikcast.me/komik/me-and-my-26-year-old-beautiful-tenant/",
    "https://komikcast.me/komik/me-and-senpai-lab/",
    "https://komikcast.me/komik/me-super-rich/",
    "https://komikcast.me/komik/meccha-shoukan-sareta-ken/",
    "https://komikcast.me/komik/media-mix-maiden/",
    "https://komikcast.me/komik/medical-martial-arts/",
    "https://komikcast.me/komik/medical-return/",
    "https://komikcast.me/komik/medical-soldiers/",
    "https://komikcast.me/komik/medicine/",
    "https://komikcast.me/komik/medusa-chan-realised-she-has-a-bad-case-of-communication-disorder/",
    "https://komikcast.me/komik/medusa-san-mitsumenaide/",
    "https://komikcast.me/komik/megami-no-kafeterasu-goddess-cafe-terrace/",
    "https://komikcast.me/komik/megami-no-libra/",
    "https://komikcast.me/komik/megane-tokidoki-yankee-kun/",
    "https://komikcast.me/komik/meika-san-cant-conceal-her-emotions/",
    "https://komikcast.me/komik/meikyuu-black-company/",
    "https://komikcast.me/komik/meikyuu-kingdom-damu-tokushu-butai-sas-no-ossan-no-isekai-dungeon-survival-manual/",
    "https://komikcast.me/komik/meikyuu-metro-mezametara-saikyoushoku-datta-node-shima-risu-o-tsurete-shinsekai-o-aruku/",
    "https://komikcast.me/komik/meitantei-conan-zero-no-tea-time/",
    "https://komikcast.me/komik/mejaz-regulus-in-the-world/",
    "https://komikcast.me/komik/mekakure-danshi-ga-ki-ni-naru/",
    "https://komikcast.me/komik/melee-mad-soldier/",
    "https://komikcast.me/komik/mememori-kun-ni-wa-kanawanai-serialization/",
    "https://komikcast.me/komik/memento-memori/",
    "https://komikcast.me/komik/memesis-yagyuu-takuya/",
    "https://komikcast.me/komik/memoir-of-the-king-of-war/",
    "https://komikcast.me/komik/memories-of-emanon/",
    "https://komikcast.me/komik/memorize/",
    "https://komikcast.me/komik/mendokusagari-danshi-koukousei-ga-asa-okitara-onnanoko-ni-natteita-hanashi/",
    "https://komikcast.me/komik/meng-bao-fairy-wife/",
    "https://komikcast.me/komik/meng-shi-zai-shang/",
    "https://komikcast.me/komik/menhera-shoujo-kurumi-chan/",
    "https://komikcast.me/komik/mercenary-enrollment/",
    "https://komikcast.me/komik/meshinuma/",
    "https://komikcast.me/komik/metalial-story/",
    "https://komikcast.me/komik/meteor-san-strike-desu/",
    "https://komikcast.me/komik/metro-hunter/",
    "https://komikcast.me/komik/metropolitan-citys-ying-yang-miracle-doctor/",
    "https://komikcast.me/komik/metropolitan-killing-arrogant-immortal/",
    "https://komikcast.me/komik/metropolitan-prodigal/",
    "https://komikcast.me/komik/metropolitan-supremacy-system/",
    "https://komikcast.me/komik/metropolitan-system/",
    "https://komikcast.me/komik/metsuki-warui-ko-kawaii-ko/",
    "https://komikcast.me/komik/mezametara-saikyou-soubi-to-uchuusen-mochi-datta-no-de-ikkodate-mezashite-youhei-toshite-jiyuu-ni-ikitai/",
    "https://komikcast.me/komik/miageru-to-kimi-wa/",
    "https://komikcast.me/komik/miao-shou-xian-dan/",
    "https://komikcast.me/komik/micah-the-blade/",
    "https://komikcast.me/komik/mida-love%e2%99%aa/",
    "https://komikcast.me/komik/midara-na-ao-chan-wa-benkyou-ga-dekinai/",
    "https://komikcast.me/komik/midara-na-seijo-sama-no-keikenchi/",
    "https://komikcast.me/komik/midashitai-giya-san-to-midarenai-tadamichi/",
    "https://komikcast.me/komik/midori-no-hibi/",
    "https://komikcast.me/komik/midori-no-ou/",
    "https://komikcast.me/komik/mienai-hito-tachi/",
    "https://komikcast.me/komik/miharashi-sou-no-5-nin-no-hanayome/",
    "https://komikcast.me/komik/mijuku-na-futari-de-gozaimasu-ga/",
    "https://komikcast.me/komik/mikako-san/",
    "https://komikcast.me/komik/mikakunin-de-shinkoukei/",
    "https://komikcast.me/komik/mikami-san-wo-furimukasetai/",
    "https://komikcast.me/komik/miki-no-houkago/",
    "https://komikcast.me/komik/miki-san-daisuki-desu/",
    "https://komikcast.me/komik/miku-will-get-her-heart-broken-in-7-days/",
    "https://komikcast.me/komik/miku-4/",
    "https://komikcast.me/komik/milady-just-wants-to-relax/",
    "https://komikcast.me/komik/military-phoenix/",
    "https://komikcast.me/komik/milk-cake-in-the-reflection/",
    "https://komikcast.me/komik/millennium-spinning/",
    "https://komikcast.me/komik/mimitani-san-the-tallest-in-the-class/",
    "https://komikcast.me/komik/minarai-witch/",
    "https://komikcast.me/komik/minecraft-waifu/",
    "https://komikcast.me/komik/minecraft-sekai-no-hate-no-tabi/",
    "https://komikcast.me/komik/ming-dynastys-failure/",
    "https://komikcast.me/komik/miniamaru-kareshi/",
    "https://komikcast.me/komik/minimum/",
    "https://komikcast.me/komik/mino-san-no-sore-sawattemo-ii/",
    "https://komikcast.me/komik/minus-skill-mochi-yonin-ga-atsumattara-nanka-synergy-hakki-shite-saikyou-party-ga-dekita-ken/",
    "https://komikcast.me/komik/miracle-app-store/",
    "https://komikcast.me/komik/miracle-doctor-abandoned-girl/",
    "https://komikcast.me/komik/miracle-hero/",
    "https://komikcast.me/komik/mirage/",
    "https://komikcast.me/komik/mirai-no-fu-fu-desu-kedo/",
    "https://komikcast.me/komik/mirai-no-ore-ga-time-slip-de-kako-no-ore-wo-sukui-ni-kita/",
    "https://komikcast.me/komik/misaki/",
    "https://komikcast.me/komik/miseru-mitsumeru-futari-dake/",
    "https://komikcast.me/komik/misetagari-no-tsuyuno-chan/",
    "https://komikcast.me/komik/mishiranu-joshikousei-ni-isourousareta-mangaka-no-hanashi/",
    "https://komikcast.me/komik/mishiranu-joshikousei-ni-kankensareta-mangaka-no-hanashi/",
    "https://komikcast.me/komik/misiryeong/",
    "https://komikcast.me/komik/miss-maid-simply-loves-to-eat/",
    "https://komikcast.me/komik/miss-nine-doctor/",
    "https://komikcast.me/komik/miss-sister-dont-mess-with-me/",
    "https://komikcast.me/komik/miss-dont-livestream-it/",
    "https://komikcast.me/komik/miss-somethings-wrong-with-you/",
    "https://komikcast.me/komik/mission-in-harem/",
    "https://komikcast.me/komik/mission-yozakura-family/",
    "https://komikcast.me/komik/mission-school/",
    "https://komikcast.me/komik/missys-geek-residing-plan/",
    "https://komikcast.me/komik/misumi-san-wa-misukasenai/",
    "https://komikcast.me/komik/mitama-secureity/",
    "https://komikcast.me/komik/mitsuboshi-colors/",
    "https://komikcast.me/komik/mitsuishi-san-is-being-weird-this-year/",
    "https://komikcast.me/komik/mitsuru-bocchan-wa-bocchi/",
    "https://komikcast.me/komik/miyori-no-nai-onnanoko/",
    "https://komikcast.me/komik/mizuki-senpai-no-koi-uranai/",
    "https://komikcast.me/komik/mizutamari-ni-ukabu-shima/",
    "https://komikcast.me/komik/mo-shou-jian-sheng/",
    "https://komikcast.me/komik/mob-kara-hajimaru-tansaku-eiyuutan/",
    "https://komikcast.me/komik/mob-psycho-100/",
    "https://komikcast.me/komik/mobile-magical-girl/",
    "https://komikcast.me/komik/mobuko-no-koi/",
    "https://komikcast.me/komik/mochiron-isharyouseikyuu-itashimasu/",
    "https://komikcast.me/komik/modern-day-god/",
    "https://komikcast.me/komik/moe-buta-tensei-akutoku-shounin-da-kedo-yuusha-o-sashioite-isekai-musou-shitemita/",
    "https://komikcast.me/komik/moee-chan-wa-kinishinai/",
    "https://komikcast.me/komik/mofu-o-neesan-no-atatame-kata/",
    "https://komikcast.me/komik/mofumofu-o-shirana-kattara-jinsei-no-hanbun-wa-muda-ni-shiteita/",
    "https://komikcast.me/komik/mofumofu-to-isekai-slow-life-o-mezashimasu/",
    "https://komikcast.me/komik/mokushiroku-no-yonkishi/",
    "https://komikcast.me/komik/mom-please-dont-come-adventuring-with-me-the-boy-who-was-raised-by-the-ultimate-overprotective-dragon-becomes-an-adventurer-with-his-mother/",
    "https://komikcast.me/komik/mommy-strikes-daddy-please-take-the-move/",
    "https://komikcast.me/komik/momo-the-blood-taker/",
    "https://komikcast.me/komik/momoiro-trance/",
    "https://komikcast.me/komik/monarch/",
    "https://komikcast.me/komik/mondaiji-ni-katenai-onna-no-ko-no-hanashi/",
    "https://komikcast.me/komik/mone-san-no-majime-sugiru-tsukiaikata/",
    "https://komikcast.me/komik/money-is-justice/",
    "https://komikcast.me/komik/monk-from-the-future/",
    "https://komikcast.me/komik/monku-no-tsukeyou-ga-nai-love-comedy/",
    "https://komikcast.me/komik/mono-no-kemonogurashi/",
    "https://komikcast.me/komik/monochrome-lovers/",
    "https://komikcast.me/komik/monogatari-no-naka-no-hito/",
    "https://komikcast.me/komik/mononogatari/",
    "https://komikcast.me/komik/mononote-edo-shinobi-kagyou/",
    "https://komikcast.me/komik/monster-lee-eun-jae/",
    "https://komikcast.me/komik/monster-w-p/",
    "https://komikcast.me/komik/monster-arms-dealer/",
    "https://komikcast.me/komik/monster-child/",
    "https://komikcast.me/komik/monster-dukes-daughter/",
    "https://komikcast.me/komik/monster-ga-afureru-sekai-ni-natta-node-suki-ni-ikitai-to-omoimasu/",
    "https://komikcast.me/komik/monster-hunter/",
    "https://komikcast.me/komik/monster-hunter-orage/",
    "https://komikcast.me/komik/monster-kingdom/",
    "https://komikcast.me/komik/monster-login/",
    "https://komikcast.me/komik/monster-musume-no-iru-nichijou/",
    "https://komikcast.me/komik/monster-musume-no-oishasan/",
    "https://komikcast.me/komik/monster-no-goshujin-sama/",
    "https://komikcast.me/komik/monster-of-the-sea/",
    "https://komikcast.me/komik/monster-paradise/",
    "https://komikcast.me/komik/monster-partner-of-the-vast-sea-of-trees/",
    "https://komikcast.me/komik/monster-pet-evolution/",
    "https://komikcast.me/komik/monster-x-monster/",
    "https://komikcast.me/komik/montage/",
    "https://komikcast.me/komik/moonlight-sculptor-chibi/",
    "https://komikcast.me/komik/more-puzzling-than-a-riddle/",
    "https://komikcast.me/komik/more-than-lovers-less-than-friends/",
    "https://komikcast.me/komik/moriking/",
    "https://komikcast.me/komik/morishita-san-wa-neteru-toki-dake-yasashii/",
    "https://komikcast.me/komik/morning-routine-of-couples-in-action/",
    "https://komikcast.me/komik/mortal-cultivation-fairy-world/",
    "https://komikcast.me/komik/moshi-koi-ga-mieta-nara/",
    "https://komikcast.me/komik/moshin-hunter/",
    "https://komikcast.me/komik/mosspaca-advertising-department/",
    "https://komikcast.me/komik/most-arrogant-son-in-law/",
    "https://komikcast.me/komik/mother-keeper/",
    "https://komikcast.me/komik/mother-goddess-dormitory/",
    "https://komikcast.me/komik/moto-isekai-tenisha-datta-kachou-no-ojisan-jinsei-ni-dome-no-isekai-wo-kake-meguru/",
    "https://komikcast.me/komik/moto-kizoku-reijou-de-mikon-no-haha-desuga-musumetachi-ga-kawaii-sugite-boukenshagyo-mo-ku-ni-narimasen/",
    "https://komikcast.me/komik/moto-saikyou-no-kenshi-wa-isekai-mahou-ni-akogareru/",
    "https://komikcast.me/komik/moto-sekai-ichii-subchara-ikusei-nikki-hai-player-isekai-wo-kouryakuchuu/",
    "https://komikcast.me/komik/moto-sh%d0%begun-no-undead-knight/",
    "https://komikcast.me/komik/moto-yan-kanojo-to-majime-kun/",
    "https://komikcast.me/komik/moto-yuusha-wa-shizuka-ni-kurashitai/",
    "https://komikcast.me/komik/motokano-to-no-jirettai-gisou-kekkon/",
    "https://komikcast.me/komik/moujuusei-shounen-shoujo/",
    "https://komikcast.me/komik/moukin-chan/",
    "https://komikcast.me/komik/mousou-meets-girl/",
    "https://komikcast.me/komik/mousou-telepathy/",
    "https://komikcast.me/komik/movement-ai/",
    "https://komikcast.me/komik/movies-are-real/",
    "https://komikcast.me/komik/mowang-yu-yongzhe-yu-sheng-jian-shendian/",
    "https://komikcast.me/komik/mr-mallow-blue/",
    "https://komikcast.me/komik/mudameshi-kurai-nintei-sareta-node-aiso-o-tsukashi-teikoku-ni-utsutte-shusse-suru/",
    "https://komikcast.me/komik/mudang-association/",
    "https://komikcast.me/komik/mugen-sekai-no-amadeus/",
    "https://komikcast.me/komik/mugiwara-boushi-to-koi/",
    "https://komikcast.me/komik/muhyoujou-joshi-wo-karakaitai-joshi-yuri-manga/",
    "https://komikcast.me/komik/mujang/",
    "https://komikcast.me/komik/mujintou-de-elf-to-kyoudou-seikatsu/",
    "https://komikcast.me/komik/mukasete-ryugasaki-san/",
    "https://komikcast.me/komik/mukurozumi-no-volte/",
    "https://komikcast.me/komik/mumbling-barber/",
    "https://komikcast.me/komik/munchkin-quest/",
    "https://komikcast.me/komik/muno-to-yobareta-seirei-tarashi-jitsu-wa-ino-de-seirei-kai-de-wa-densetsu-teki-herodeshita/",
    "https://komikcast.me/komik/murabito-desu-ga-nani-ka/",
    "https://komikcast.me/komik/murabito-tensei-saikyou-no-slow-life/",
    "https://komikcast.me/komik/murder-lock-school-of-the-killing/",
    "https://komikcast.me/komik/murderer/",
    "https://komikcast.me/komik/murenase-shiiton-gakuen/",
    "https://komikcast.me/komik/murim-login/",
    "https://komikcast.me/komik/murim-possesses-the-youngest-son/",
    "https://komikcast.me/komik/mushen-ji/",
    "https://komikcast.me/komik/mushikago-no-cagaster/",
    "https://komikcast.me/komik/mushoku-no-eiyuu-betsu-ni-skill-nanka-iranakattan-daga/",
    "https://komikcast.me/komik/mushoku-tensei-depressed-magician-arc/",
    "https://komikcast.me/komik/mushoku-tensei-isekai-ittara-honki-dasu/",
    "https://komikcast.me/komik/mushoku-tensei-roxy-is-serious/",
    "https://komikcast.me/komik/musuko-ga-kawaikute-shikataganai-mazoku-no-hahaoya/",
    "https://komikcast.me/komik/musume-janakute-watashi-mama-ga-suki-nano/",
    "https://komikcast.me/komik/musume-no-tomodachi/",
    "https://komikcast.me/komik/mutant-wa-ningen-no-kanojo-to-kisu-ga-shitai/",
    "https://komikcast.me/komik/muteki-shonin-no-isekai-nariagari-monogatari/",
    "https://komikcast.me/komik/mutou-and-satou/",
    "https://komikcast.me/komik/mutou-black/",
    "https://komikcast.me/komik/mutual-affection/",
    "https://komikcast.me/komik/mutually-unrequited-twin-sisters/",
    "https://komikcast.me/komik/mxzero/",
    "https://komikcast.me/komik/my-slightly-debauched-student-life-after-turning-into-a-girl/",
    "https://komikcast.me/komik/my-7-wives-are-forcing-me-to-die/",
    "https://komikcast.me/komik/my-apocalypse/",
    "https://komikcast.me/komik/my-apocalyptic-miss/",
    "https://komikcast.me/komik/my-apprentice-is-the-strongest-and-is-the-prettiest/",
    "https://komikcast.me/komik/my-apprentice-game-over-again/",
    "https://komikcast.me/komik/my-apprentices-want-to-monopolize-me/",
    "https://komikcast.me/komik/my-attributes-have-added-strength/",
    "https://komikcast.me/komik/my-beautiful-time-with-you/",
    "https://komikcast.me/komik/my-beautiful-world/",
    "https://komikcast.me/komik/my-beauty-agent-wife/",
    "https://komikcast.me/komik/my-best-friend-who-i-love-fell-completely-in-love-with-my-vtuber-self/",
    "https://komikcast.me/komik/my-bestfriend-girlfriend/",
    "https://komikcast.me/komik/my-blissful-marriage-watashi-no-shiawase-na-kekkon/",
    "https://komikcast.me/komik/my-bodyguard-is-13-meters/",
    "https://komikcast.me/komik/my-boyfriend-is-a-vampire/",
    "https://komikcast.me/komik/my-broken-mariko/",
    "https://komikcast.me/komik/my-brother-absolutely-spoils-me/",
    "https://komikcast.me/komik/my-childhood-friend-gave-me-a-charm/",
    "https://komikcast.me/komik/my-childhood-friend-is-a-crybaby/",
    "https://komikcast.me/komik/my-childhood-friend-is-expressionless/",
    "https://komikcast.me/komik/my-childhood-friend-is-popular/",
    "https://komikcast.me/komik/my-childhood-friend-the-vampire/",
    "https://komikcast.me/komik/my-chubby-princess/",
    "https://komikcast.me/komik/my-civil-servant-life-reborn-in-the-strange-world/",
    "https://komikcast.me/komik/my-classmate-became-my-maid/",
    "https://komikcast.me/komik/my-classmate-is-annoying/",
    "https://komikcast.me/komik/my-classmate-tanaka-san-is-super-scary/",
    "https://komikcast.me/komik/my-companys-small-senpai/",
    "https://komikcast.me/komik/my-companys-small-senpai-serialization/",
    "https://komikcast.me/komik/my-crazy-journalist-wife/",
    "https://komikcast.me/komik/my-crossdressing-senpai/",
    "https://komikcast.me/komik/my-cute-deskmate/",
    "https://komikcast.me/komik/my-cute-junior-turned-into-a-guy/",
    "https://komikcast.me/komik/my-dad-is-too-strong/",
    "https://komikcast.me/komik/my-daughter-is-the-final-boss/",
    "https://komikcast.me/komik/my-death-flags-show-no-sign-of-ending/",
    "https://komikcast.me/komik/my-disciple-has-become-the-strongest-human-before-i-knew-it-and-i-a-master-with-no-talent-was-mistakenly-recognized-as-the-strongest-in-the-universe-beyond-that/",
    "https://komikcast.me/komik/my-disciples-all-over-the-world/",
    "https://komikcast.me/komik/my-disciples-are-all-immortals/",
    "https://komikcast.me/komik/my-divorced-crybaby-neighbour/",
    "https://komikcast.me/komik/my-end-of-the-world-legion-of-women/",
    "https://komikcast.me/komik/my-endless-inventory/",
    "https://komikcast.me/komik/my-eschatology-lady/",
    "https://komikcast.me/komik/my-exclusive-dream-world-adventures/",
    "https://komikcast.me/komik/my-fair-neighbor/",
    "https://komikcast.me/komik/my-fake-girlfriends-are-using-me-as-a-shield/",
    "https://komikcast.me/komik/my-favourite-type-of-heroine/",
    "https://komikcast.me/komik/my-female-apprentices-are-all-big-shots-from-the-future/",
    "https://komikcast.me/komik/my-first-kiss-with-senpai/",
    "https://komikcast.me/komik/my-forgetful-wife/",
    "https://komikcast.me/komik/my-friend/",
    "https://komikcast.me/komik/my-friend-was-actually-a-girl/",
    "https://komikcast.me/komik/my-gift-lvl-9999-unlimited-gacha/",
    "https://komikcast.me/komik/my-girlfriend-is-a-dragon/",
    "https://komikcast.me/komik/my-girlfriend-is-a-futon-girl/",
    "https://komikcast.me/komik/my-girlfriend-is-a-villain/",
    "https://komikcast.me/komik/my-girlfriend-is-very-weird/",
    "https://komikcast.me/komik/my-girlfriend-will-be-a-mangaka/",
    "https://komikcast.me/komik/my-god-level-super-watch/",
    "https://komikcast.me/komik/my-great-sword/",
    "https://komikcast.me/komik/my-great-sword-remake/",
    "https://komikcast.me/komik/my-harem-depend-on-drawing/",
    "https://komikcast.me/komik/my-harem-grew-so-large-i-was-forced-to-ascend/",
    "https://komikcast.me/komik/my-harem-in-the-day-of-apocalypse/",
    "https://komikcast.me/komik/my-harem-is-entirely-female-demon-villains/",
    "https://komikcast.me/komik/my-home-hero/",
    "https://komikcast.me/komik/my-horse-is-a-female-fox/",
    "https://komikcast.me/komik/my-junior-was-my-mom-in-her-past-life/",
    "https://komikcast.me/komik/my-lady-is-actually-the-empress/",
    "https://komikcast.me/komik/my-levels-the-best/",
    "https://komikcast.me/komik/my-little-brother-is-the-demon-king/",
    "https://komikcast.me/komik/my-lolita-brother/",
    "https://komikcast.me/komik/my-lord-of-the-sea-please-do-your-work/",
    "https://komikcast.me/komik/my-lord-pay-attention-to-your-reputation/",
    "https://komikcast.me/komik/my-love-tiger/",
    "https://komikcast.me/komik/my-lover-was-stolen-and-i-was-kicked-out-of-the-heros-party-but-i-awakened-to-the-ex-skill-fixed-damage-and-became-invincible-now-lets-begin-some-revenge/",
    "https://komikcast.me/komik/my-magician-enior/",
    "https://komikcast.me/komik/my-maid-is-a-demon/",
    "https://komikcast.me/komik/my-master-is-a-god/",
    "https://komikcast.me/komik/my-mom-is-my-constellation/",
    "https://komikcast.me/komik/my-mutant-childhood-friend/",
    "https://komikcast.me/komik/my-new-wife-is-forcing-herself-to-smile/",
    "https://komikcast.me/komik/my-nightly-breath/",
    "https://komikcast.me/komik/my-office-noonas-story/",
    "https://komikcast.me/komik/my-older-stepsister-social-media/",
    "https://komikcast.me/komik/my-path-to-killing-god-in-otherworld/",
    "https://komikcast.me/komik/my-pet-lost-her-memories/",
    "https://komikcast.me/komik/my-phoenixs-on-top/",
    "https://komikcast.me/komik/my-plug-in-spirit-ring/",
    "https://komikcast.me/komik/my-recently-hired-maid-is-suspicious-serialization/",
    "https://komikcast.me/komik/my-recently-hired-maid-is-suspicious-webcomic/",
    "https://komikcast.me/komik/my-rival-is-behind-you/",
    "https://komikcast.me/komik/my-roommate-isnt-from-this-world/",
    "https://komikcast.me/komik/my-secret-brother/",
    "https://komikcast.me/komik/my-senior-brother-is-too-steady/",
    "https://komikcast.me/komik/my-shadow-hangs-up/",
    "https://komikcast.me/komik/my-sister-from-japan/",
    "https://komikcast.me/komik/my-sister-is-a-superstar/",
    "https://komikcast.me/komik/my-sisters-funeral/",
    "https://komikcast.me/komik/my-sisters-best-friend-my-lover/",
    "https://komikcast.me/komik/my-son-in-brother/",
    "https://komikcast.me/komik/my-son-in-law/",
    "https://komikcast.me/komik/my-story-of-becoming-a-master-fishermen/",
    "https://komikcast.me/komik/my-succubus-girlfriend/",
    "https://komikcast.me/komik/my-succubus-girlfriend-new/",
    "https://komikcast.me/komik/my-super-cute-childhood-friend-is-too-clingy/",
    "https://komikcast.me/komik/my-vampire-system/",
    "https://komikcast.me/komik/my-vision-becomes-stronger/",
    "https://komikcast.me/komik/my-wife-is-a-demon-queen/",
    "https://komikcast.me/komik/my-wife-is-a-fox-spirit/",
    "https://komikcast.me/komik/my-wife-is-a-ghost/",
    "https://komikcast.me/komik/my-wife-is-a-little-scary/",
    "https://komikcast.me/komik/my-wife-is-a-martial-art-master/",
    "https://komikcast.me/komik/my-wife-is-cold-hearted/",
    "https://komikcast.me/komik/my-wife-is-from-a-thousand-years-ago/",
    "https://komikcast.me/komik/wife-wagatsuma-san/",
    "https://komikcast.me/komik/my-wife-whom-i-loved-dearly/",
    "https://komikcast.me/komik/my-yandere-girlfriend-wont-let-me-rest-in-peace/",
    "https://komikcast.me/komik/my-years-as-a-taoist/",
    "https://komikcast.me/komik/mysteries-maidens-and-mysterious-disappearances-kaii-to-otome-to-kamikakushi/",
    "https://komikcast.me/komik/mysterious-weapon-soul/",
    "https://komikcast.me/komik/mystic-messenger/",
    "https://komikcast.me/komik/myth-font/",
    "https://komikcast.me/komik/mz/",
    "https://komikcast.me/komik/nadeshiko-doremisora/",
    "https://komikcast.me/komik/nageki-no-bourei-wa-intai-shitai-saijiyaku-hanta-ni-yoru-saikiyou-patei-ikusei-jutsu/",
    "https://komikcast.me/komik/naguri-tamer-no-isekai-seikatsu-koeinanoni-zenei-de-tatakau-mamono-tsukai/",
    "https://komikcast.me/komik/naka-no-warui-iinazuke-no-hanashi/",
    "https://komikcast.me/komik/nakamura-koedo-daizu-keisuke-wa-umakuikanai/",
    "https://komikcast.me/komik/nakanohito-genome-jikkyouchuu/",
    "https://komikcast.me/komik/nakayoshi-fuufu-no-memorial/",
    "https://komikcast.me/komik/nakushita-mono-wa-nandesuka/",
    "https://komikcast.me/komik/namae-no-nai-kaibutsu/",
    "https://komikcast.me/komik/namaikizakari/",
    "https://komikcast.me/komik/nan-hao-shang-feng/",
    "https://komikcast.me/komik/nana-seiken-to-maken-no-hime/",
    "https://komikcast.me/komik/nana-shimazaki-looking-for-work-2/",
    "https://komikcast.me/komik/nana-shimazaki-looking-for-work/",
    "https://komikcast.me/komik/nanairo-raijyutsushi-no-eiyutan/",
    "https://komikcast.me/komik/nanase-kun-no-tenshoku/",
    "https://komikcast.me/komik/nanase-san-no-koi-ga-ijou/",
    "https://komikcast.me/komik/nanatsu-no-maken-ga-shihai-suru/",
    "https://komikcast.me/komik/nanatsu-no-taizai/",
    "https://komikcast.me/komik/nanatsu-no-taizai-seven-days/",
    "https://komikcast.me/komik/nanba-mg5/",
    "https://komikcast.me/komik/nanda-kore/",
    "https://komikcast.me/komik/nande-koko-ni-sensei-ga/",
    "https://komikcast.me/komik/nani-made-nara-koroseru/",
    "https://komikcast.me/komik/nanikato-mujikakuna-jyoshi/",
    "https://komikcast.me/komik/nankoufuraku-no-maoujou-e-youkoso/",
    "https://komikcast.me/komik/nano-list/",
    "https://komikcast.me/komik/nano-machine/",
    "https://komikcast.me/komik/nanoka-no-kare/",
    "https://komikcast.me/komik/nantonaku-wakaru-yo/",
    "https://komikcast.me/komik/naraku-no-futari/",
    "https://komikcast.me/komik/naraku-no-kou/",
    "https://komikcast.me/komik/narikawari/",
    "https://komikcast.me/komik/naruse-kun-is-bad-at-smiling/",
    "https://komikcast.me/komik/national-tax-service-thug/",
    "https://komikcast.me/komik/natsu-koi/",
    "https://komikcast.me/komik/natsuki-kun-wa-kyou-mo-kirei/",
    "https://komikcast.me/komik/naze-boku-no-sekai-wo-daremo-oboeteinai-no-ka/",
    "https://komikcast.me/komik/nazo-no-kanojo-x/",
    "https://komikcast.me/komik/ne0lation/",
    "https://komikcast.me/komik/necromance/",
    "https://komikcast.me/komik/nee-mou-isso-tsukiacchau-osananajimi-no-bishoujo-ni-tanomarete-camo-kareshi-hajimemashita/",
    "https://komikcast.me/komik/need-for-almighty-master/",
    "https://komikcast.me/komik/neeko-wa-tsurai-yo/",
    "https://komikcast.me/komik/neet-dakedo-hello-work-ni-ittara-isekai-ni-tsuretekareta/",
    "https://komikcast.me/komik/neet-de-otaku-na-kunoichi-to-naze-ka-dousei-hajimemashita/",
    "https://komikcast.me/komik/nega-kun-and-posi-chan/",
    "https://komikcast.me/komik/negai-o-kanaete-moraou-to-akuma-o-shoukan-shitakedo-kawaikattanode-kekkonshimashita-akuma-no-niidzuma/",
    "https://komikcast.me/komik/negatibu-yuusha-to-maougun-kanbu/",
    "https://komikcast.me/komik/negawakuba-no-konote-ni-koufuku-o/",
    "https://komikcast.me/komik/nejimage-factor/",
    "https://komikcast.me/komik/nejimaki-kagyuu/",
    "https://komikcast.me/komik/neko-ga-ol-ni-miete-komarimasu/",
    "https://komikcast.me/komik/neko-ni-kae-rareta-shounen-no-hanashi/",
    "https://komikcast.me/komik/neko-no-otera-no-chion-san/",
    "https://komikcast.me/komik/neko-no-youna-nanika/",
    "https://komikcast.me/komik/neko-to-kiss/",
    "https://komikcast.me/komik/nekomata/",
    "https://komikcast.me/komik/nenene/",
    "https://komikcast.me/komik/neon-genesis-evangelion-a-lovey-dovey-fanfic-about-evangelions-asuka-and-a-slightly-grown-up-shinji-kun-doujinshi/",
    "https://komikcast.me/komik/neru-way-of-the-martial-artist/",
    "https://komikcast.me/komik/nerve-martial-arts-unparalleled/",
    "https://komikcast.me/komik/neta-chara-tensei-toka-anmarida/",
    "https://komikcast.me/komik/netoge-no-yome-wa-onnanoko-ja-nai-to-omotta/",
    "https://komikcast.me/komik/netsuai-prince-onii-chan-wa-kimi-ga-suki/",
    "https://komikcast.me/komik/never-dead/",
    "https://komikcast.me/komik/neverdie-extra/",
    "https://komikcast.me/komik/new-game/",
    "https://komikcast.me/komik/new-life-savior-from-another-world/",
    "https://komikcast.me/komik/new-normal/",
    "https://komikcast.me/komik/newbie-management/",
    "https://komikcast.me/komik/newton-no-tsubomi/",
    "https://komikcast.me/komik/next-life/",
    "https://komikcast.me/komik/next-month-ill-become-a-hero/",
    "https://komikcast.me/komik/nezou-warusugi-yo/",
    "https://komikcast.me/komik/ni-xi-ba-mo-wang/",
    "https://komikcast.me/komik/ni-yu-god-is-a-girl/",
    "https://komikcast.me/komik/nichijou-de-wa-saenai-tada-no-ossan-hontou-wa-chijou-saikyo-no-senshin/",
    "https://komikcast.me/komik/nido-tensei-shita-shounen-wa-s-rank-boukensha-toshite-heion-ni-sugosu/",
    "https://komikcast.me/komik/nido-to-ie-ni-wa-kaerimasen/",
    "https://komikcast.me/komik/nido-to-jidori-okutte-yannai/",
    "https://komikcast.me/komik/nidome-no-jinsei-wo-isekai-de/",
    "https://komikcast.me/komik/nidome-no-natsu-nidoto-aenai-kimi/",
    "https://komikcast.me/komik/nidome-no-yuusha/",
    "https://komikcast.me/komik/niehime-kemono-no-ou/",
    "https://komikcast.me/komik/night-bookstore/",
    "https://komikcast.me/komik/night-of-shadows/",
    "https://komikcast.me/komik/nightmare-game/",
    "https://komikcast.me/komik/nightmare-palace-of-six-trails/",
    "https://komikcast.me/komik/nightmare-world/",
    "https://komikcast.me/komik/nigoru-hitomi-de-nani-wo-negau-highserk-senki/",
    "https://komikcast.me/komik/nihon-e-youkoso-elf-san/",
    "https://komikcast.me/komik/nihongo-ga-hanasenai-roshiahito-bishojo-tennyusei-ga-tayoreru-no-wa-ta-gengo-masuta-no-ore-im-the-only-multilingual-master-a-russian-transfer-girl-student-who-cant-speak-japanese-c/",
    "https://komikcast.me/komik/nihonkoku-shoukan/",
    "https://komikcast.me/komik/nijuujinkaku-heroine-to-shujinkou-no-honne/",
    "https://komikcast.me/komik/nikukyuu/",
    "https://komikcast.me/komik/nina-wa-papa-o-koroshitai/",
    "https://komikcast.me/komik/nine-fantasy/",
    "https://komikcast.me/komik/nine-star-hegemon-body-arts/",
    "https://komikcast.me/komik/nine-years-obligation-cultivate/",
    "https://komikcast.me/komik/nineteen-twenty-one/",
    "https://komikcast.me/komik/ningen-dakedo-maougun-shitennou-ni-sodaterareta-ore-wa-maou-no-musume-ni-aisare-shihai-zokusei-no-k/",
    "https://komikcast.me/komik/ningen-no-ane-to-era-kokyu-no-imouto/",
    "https://komikcast.me/komik/ninkoi-kakurenbo-hichou/",
    "https://komikcast.me/komik/ninkyou-tensei-isekai-no-yakuzahime/",
    "https://komikcast.me/komik/nise-seiken-monogatari-osananajimi-no-seijo-o-uttara-michizure-ni-sareta/",
    "https://komikcast.me/komik/nisekoi/",
    "https://komikcast.me/komik/nisekyuu/",
    "https://komikcast.me/komik/nishiki-kun-no-nasugamama/",
    "https://komikcast.me/komik/nishimori-san-chi-no-shinobu-kun/",
    "https://komikcast.me/komik/nishino-gakunai-kasuto-saikai-ni-shite-ino-sekai-saikyo-no-shonen/",
    "https://komikcast.me/komik/nishuume-cheat-no-tensei-madoushi-%e3%80%9csaikyou-ga-1000-nengo-ni-tensei-shitara-jinsei-yoyu-sugimashita%e3%80%9c/",
    "https://komikcast.me/komik/nito-no-taidana-isekai-shoukougun/",
    "https://komikcast.me/komik/no-filter-x-no-confidence/",
    "https://komikcast.me/komik/no-game-no-life/",
    "https://komikcast.me/komik/no-game-no-life-desu/",
    "https://komikcast.me/komik/no-guard-wife/",
    "https://komikcast.me/komik/no-guns-life/",
    "https://komikcast.me/komik/no-match-for-aoi-kun/",
    "https://komikcast.me/komik/no-scope/",
    "https://komikcast.me/komik/noah-of-the-blood-sea/",
    "https://komikcast.me/komik/noahs-notes/",
    "https://komikcast.me/komik/nogi-wakaba-wa-yuusha-de-aru/",
    "https://komikcast.me/komik/non-and-su/",
    "https://komikcast.me/komik/non-non-biyori/",
    "https://komikcast.me/komik/non-player-character/",
    "https://komikcast.me/komik/nonbiri-vrmoo-ki/",
    "https://komikcast.me/komik/nonchalant-fuuko-san/",
    "https://komikcast.me/komik/nonscale/",
    "https://komikcast.me/komik/noragami/",
    "https://komikcast.me/komik/north-by-northwest/",
    "https://komikcast.me/komik/northern-train-x47/",
    "https://komikcast.me/komik/not-just-anybody-can-be-an-evil-lady/",
    "https://komikcast.me/komik/not-lives/",
    "https://komikcast.me/komik/noumin-kanren-no-skill-bakka-agetetara-naze-ka-tsuyoku-natta/",
    "https://komikcast.me/komik/now-loading/",
    "https://komikcast.me/komik/now-playing/",
    "https://komikcast.me/komik/nozo-x-kimi/",
    "https://komikcast.me/komik/nozoemon/",
    "https://komikcast.me/komik/nozoki-ana/",
    "https://komikcast.me/komik/nozomanu-fushi-no-boukensha/",
    "https://komikcast.me/komik/nsd-gaming/",
    "https://komikcast.me/komik/ntr-yuri-anthology/",
    "https://komikcast.me/komik/nukenai-seiken-chan/",
    "https://komikcast.me/komik/number-one-star-instructor-master-baek/",
    "https://komikcast.me/komik/nyanta-to-pomeko-imasara-shinjite-iru-to-iwarete-mo-mou-teokureda/",
    "https://komikcast.me/komik/nyatto/",
    "https://komikcast.me/komik/o-chikadzuki-ni-naritai/",
    "https://komikcast.me/komik/obaka-chan-koigatariki/",
    "https://komikcast.me/komik/obokoi-majo-wa-majiwaritai/",
    "https://komikcast.me/komik/observation-diary-on-a-creature-i-picked-up/",
    "https://komikcast.me/komik/occult-maiden-hi-shou-oni-wo-tsugu-shounen/",
    "https://komikcast.me/komik/ochikobore-datta-ani-ga-jitsuha-saikyou-shijou-saikyou-no-yuusha-wa-tensei-shi-gakuen-de-mujikaku-ni-musou-suru/",
    "https://komikcast.me/komik/ochikobore-mahou-tsukai-wa-kyou-mo-muishiki-ni-cheat-wo-tsukau/",
    "https://komikcast.me/komik/ochitekita-ryuuou-horobiyuku-majo-no-kuni/",
    "https://komikcast.me/komik/oda-nobunaga-to-iu-nazo-no-shokugyo-ga-mahou-kenshi-yori-cheat-dattanode-oukoku-wo-tsukuru-koto-ni-shimashita/",
    "https://komikcast.me/komik/oddeye/",
    "https://komikcast.me/komik/odorless/",
    "https://komikcast.me/komik/oh-my-hammer/",
    "https://komikcast.me/komik/oh-our-general-myao/",
    "https://komikcast.me/komik/ohayou-ibarahime/",
    "https://komikcast.me/komik/oji-san-ga-joshisei-ni-warui-koto-wo-oshieru/",
    "https://komikcast.me/komik/oji-san-ga-joshisei-ni-warui-koto-wo-oshieru-hanashi/",
    "https://komikcast.me/komik/ojiichan-shinanai/",
    "https://komikcast.me/komik/ojisan-to-obasan-ga-wakagaetta-hanashi/",
    "https://komikcast.me/komik/ojojojo/",
    "https://komikcast.me/komik/ojousama-no-shimobe/",
    "https://komikcast.me/komik/ojou-sama-wa-love-come-no-shujinkou-ni-naritai/",
    "https://komikcast.me/komik/okaa-san-10-sai-to-boku/",
    "https://komikcast.me/komik/okaeri-alice/",
    "https://komikcast.me/komik/okaeri-kudasai-succubus-san/",
    "https://komikcast.me/komik/okami-chan-no-ohanashi/",
    "https://komikcast.me/komik/okashi-na-tensei/",
    "https://komikcast.me/komik/okashiratsuki/",
    "https://komikcast.me/komik/okinawa-de-suki-ni-natta-ko-ga-hougen-sugite-tsura-sugiru/",
    "https://komikcast.me/komik/okitara-onnanoko-no-karada-ni-natteta-hanashi/",
    "https://komikcast.me/komik/okitenemuru/",
    "https://komikcast.me/komik/okorippoi-onnanoko-to-issho-na-otokonoko/",
    "https://komikcast.me/komik/oku-sama-wa-niizuma-chan/",
    "https://komikcast.me/komik/okuru-kotoba/",
    "https://komikcast.me/komik/okusama-ga-seito-kaichou/",
    "https://komikcast.me/komik/okusan/",
    "https://komikcast.me/komik/okyu-no-trinity/",
    "https://komikcast.me/komik/ol-san-ga-neko-wo-hirou-hanashi/",
    "https://komikcast.me/komik/old-newbie-kim-chunshik/",
    "https://komikcast.me/komik/omae-gotoki-ga-maou-ni-kateru-to-omou-na-to-yuusha-party-wo-tsuihou-sareta-node-outo-de-kimama-ni-kurashitai/",
    "https://komikcast.me/komik/omae-o-otaku-ni-shiteyaru-kara-ore-o-riajuu-ni-shitekure/",
    "https://komikcast.me/komik/omae-tanuki-ni-naranee-ka/",
    "https://komikcast.me/komik/omaera-zenin-mendokusai/",
    "https://komikcast.me/komik/omega-labyrinth-dengeki-comic-anthology/",
    "https://komikcast.me/komik/omiai-shitakunakattanode-muri-nandai-na-jouken-wo-tsuketara-doukyuusei-ga-kita-ken-ni-tsuite/",
    "https://komikcast.me/komik/ominous-liar/",
    "https://komikcast.me/komik/omnipotence/",
    "https://komikcast.me/komik/omniscient-readers-viewpoint/",
    "https://komikcast.me/komik/omoi-ga-omoi-omoi-san/",
    "https://komikcast.me/komik/omoi-omoware-furi-furare/",
    "https://komikcast.me/komik/on-the-6th-playthrough-of-the-otome-game-the-auto-mode-broke/",
    "https://komikcast.me/komik/onanie-master-kurosawa/",
    "https://komikcast.me/komik/once-again-idol/",
    "https://komikcast.me/komik/once-more/",
    "https://komikcast.me/komik/one-day-suddenly-seoul-is/",
    "https://komikcast.me/komik/one-hundred-player-battleground/",
    "https://komikcast.me/komik/one-life-one-reincarnation/",
    "https://komikcast.me/komik/one-night-morning/",
    "https://komikcast.me/komik/one-of-them-is-the-devil/",
    "https://komikcast.me/komik/one-piece/",
    "https://komikcast.me/komik/one-piece-ace-story/",
    "https://komikcast.me/komik/one-piece-log-book-omake/",
    "https://komikcast.me/komik/one-punch-man/",
    "https://komikcast.me/komik/one-room-wanko/",
    "https://komikcast.me/komik/one-step-to-the-demon-king/",
    "https://komikcast.me/komik/one-thousand-live-broadcast-big-local-tyrant/",
    "https://komikcast.me/komik/one-armed-amy/",
    "https://komikcast.me/komik/onee-na-kareshi-to-boyish-kanojo/",
    "https://komikcast.me/komik/onee-chans-sanity-is-in-danger/",
    "https://komikcast.me/komik/onee-san-is-invading/",
    "https://komikcast.me/komik/oneechan-wa-koiyoukai/",
    "https://komikcast.me/komik/oneeloli-hug/",
    "https://komikcast.me/komik/oneesan-wa-joshi-shougakusei-ni-kyoumi-ga-arimasu/",
    "https://komikcast.me/komik/onepunch-man-one/",
    "https://komikcast.me/komik/onepunchman-saitama-vs-god/",
    "https://komikcast.me/komik/oni-futatsu/",
    "https://komikcast.me/komik/oni-deka/",
    "https://komikcast.me/komik/oni-san-no-tokorohe-mairimashita/",
    "https://komikcast.me/komik/onii-chan-wa-oshimai/",
    "https://komikcast.me/komik/oniichan-control/",
    "https://komikcast.me/komik/oniisan-no-hikkoshi-no-katazuke-ga-susumanai/",
    "https://komikcast.me/komik/oninaki-no-kinoutsukai/",
    "https://komikcast.me/komik/oniyome-wo-metotte-shimatta/",
    "https://komikcast.me/komik/onizuka-chan-and-sawarida-kun/",
    "https://komikcast.me/komik/online-the-comic/",
    "https://komikcast.me/komik/only-i-shall-be-immortal/",
    "https://komikcast.me/komik/only-rika/",
    "https://komikcast.me/komik/only-sense-online/",
    "https://komikcast.me/komik/onna-kinshi-to-kemomimi-no-ko/",
    "https://komikcast.me/komik/onna-senshi-tte-motenai-desu-ne/",
    "https://komikcast.me/komik/onna-toshite-no-shin-seikatsu/",
    "https://komikcast.me/komik/onna-yuusha-to-shota-orc/",
    "https://komikcast.me/komik/onnanoko-ga-shinu-hanashi/",
    "https://komikcast.me/komik/onsaemiro/",
    "https://komikcast.me/komik/oogami-san-dadamore-desu/",
    "https://komikcast.me/komik/ookami-kodomo-no-ame-to-yuki/",
    "https://komikcast.me/komik/ookami-shounen-wa-kyou-mo-uso-wo-kasaneru/",
    "https://komikcast.me/komik/ookii-kouhai-wa-suki-desu-ka/",
    "https://komikcast.me/komik/ookiku-nattara-kekkon-suru/",
    "https://komikcast.me/komik/ooparts/",
    "https://komikcast.me/komik/ootani-san-chi-no-tenshi-sama/",
    "https://komikcast.me/komik/op-after-30-days-of-sign-in/",
    "https://komikcast.me/komik/opapagoto/",
    "https://komikcast.me/komik/open-a-clinic-to-cultivate/",
    "https://komikcast.me/komik/opening-day-record/",
    "https://komikcast.me/komik/oppai-momitai-tte-sakendara-imouto-no-tomodachi-to-tsukiau-koto-ni-narimashita/",
    "https://komikcast.me/komik/opposites-in-disguise/",
    "https://komikcast.me/komik/orc-ga-okashite-kurenai/",
    "https://komikcast.me/komik/orc-hero-story-discovery-chronicles/",
    "https://komikcast.me/komik/ordinary-child/",
    "https://komikcast.me/komik/ore-da-mada-honki-o-dashite-inai/",
    "https://komikcast.me/komik/ore-dake-haireru-kakushi-dungeon-kossori-kitaete-sekai-saikyou/",
    "https://komikcast.me/komik/ore-dake-level-ga-agaru-sekai-de-akutoku-ryoushu-ni-natteita/",
    "https://komikcast.me/komik/ore-ga-doutei-o-sutetara-shinu-ken-ni-tsuite/",
    "https://komikcast.me/komik/ore-ga-fujoshi-de-aitsu-ga-yuri-ota-de/",
    "https://komikcast.me/komik/ore-ga-heroine-wo-tasukesugite-sekai-ga-little-apocalypse/",
    "https://komikcast.me/komik/ore-ga-ojousama-gakkou-ni-shomin-sample-toshite-rachirareta-ken/",
    "https://komikcast.me/komik/ore-ga-suki-nano-wa-imouto-dakedo-imouto-ja-nai/",
    "https://komikcast.me/komik/ore-ga-yuri/",
    "https://komikcast.me/komik/ore-no-genjitsu-wa-renai-game-ka-to-omottara-inochigake-no-game-datta/",
    "https://komikcast.me/komik/ore-no-himekutsu-o-haite-kure/",
    "https://komikcast.me/komik/ore-no-ie-ga-maryoku-spot-datta-ken-sundeiru-dake-de-sekai-saikyou/",
    "https://komikcast.me/komik/ore-no-iinazuke-ni-natta-jimiko-ie-de-wa-kawaii-shika-nai/",
    "https://komikcast.me/komik/ore-no-imouto-ga-konna-ni-kawaii-wake-ga-nai-ayase-if/",
    "https://komikcast.me/komik/ore-no-imouto-ga-konna-ni-kawaii-wake-ga-nai-kuroneko-if/",
    "https://komikcast.me/komik/ore-no-imouto-wa-shinonome-san/",
    "https://komikcast.me/komik/ore-no-kanojo-ga-bakemono-datta/",
    "https://komikcast.me/komik/ore-no-kantei-skill-ga-cheat-sugite/",
    "https://komikcast.me/komik/ore-no-pantsu-ga-nerawareteita/",
    "https://komikcast.me/komik/ore-no-saenai-osananajimi-ga-s-rank-yuusha-ni-natte-ita-kudan/",
    "https://komikcast.me/komik/ore-no-zense-no-chishiki-de-teihengyo-tamer-ga-joukyugyo-ni-natte-shimaisou-na-ken-ni-tsuite/",
    "https://komikcast.me/komik/ore-kanojo-no-moeyo-pen/",
    "https://komikcast.me/komik/ore-kawazu-san-no-isekai-hourouki/",
    "https://komikcast.me/komik/ore-wa-inu-dewa-arimasen/",
    "https://komikcast.me/komik/ore-wa-subete-wo-parry-suru/",
    "https://komikcast.me/komik/ore-wa-yuka-de-nemasu-i-will-sleep-on-the-floor/",
    "https://komikcast.me/komik/ore-wo-suki-nano-wa-omae-dake-ka-yo/",
    "https://komikcast.me/komik/ore-yome-ore-no-yome-ni-nare-yo/",
    "https://komikcast.me/komik/oreaku-ore-wa-seikan-kokka-no-akutoku-ryoshu/",
    "https://komikcast.me/komik/orenchi-ni-kita-onna-kishi-to-inakagurashi-suru-koto-ni-natta-ken/",
    "https://komikcast.me/komik/orenchi-no-maid-san/",
    "https://komikcast.me/komik/oretachi-no-party-wa-machigatteiru/",
    "https://komikcast.me/komik/orient/",
    "https://komikcast.me/komik/origin/",
    "https://komikcast.me/komik/original-yuri-manga-by-sinogiasa/",
    "https://komikcast.me/komik/oroka-na-tenshi-wa-akuma-to-odoru/",
    "https://komikcast.me/komik/osake-wa-fuufu-ni-natte-kara/",
    "https://komikcast.me/komik/osanai-san-cant-grow-up/",
    "https://komikcast.me/komik/osananajimi-de-oyome-chan/",
    "https://komikcast.me/komik/osananajimi-ga-hisabisa-ni-saikai-shitara-otagai-kyonyuu-ni-natteta/",
    "https://komikcast.me/komik/osananajimi-ga-mamasugite-tsurai/",
    "https://komikcast.me/komik/osananajimi-ga-zettai-ni-makenai-love-comedy/",
    "https://komikcast.me/komik/osananajimi-ni-koishitara/",
    "https://komikcast.me/komik/osananajimi-ni-modoritai-bokura-i-want-us-to-be-childhood-friends-again/",
    "https://komikcast.me/komik/osananajimi-ni-najimitai/",
    "https://komikcast.me/komik/osananajimi-no-manga/",
    "https://komikcast.me/komik/osananajimi-no-mune-ga-ookiku-natta-no-wa-ore-no-sei-ka-mo-shirenai/",
    "https://komikcast.me/komik/osananajimi-rezu-giwaku-i-suspect-my-childhood-friend-is-a-lesbian/",
    "https://komikcast.me/komik/osananajimi-to-wa-rabukome-ni-naranai/",
    "https://komikcast.me/komik/osananajimi-wo-onnanoko-ni-shiteshimatta-hanashi/",
    "https://komikcast.me/komik/osasete-my-teacher/",
    "https://komikcast.me/komik/oshi-ga-ani-ni-narimashita-bahasa-indonesia/",
    "https://komikcast.me/komik/oshi-ga-kounin-sutouka-ni-narimashita/",
    "https://komikcast.me/komik/oshi-ni-uso-wo-chikadzuite-shimaimashita/",
    "https://komikcast.me/komik/oshi-no-ko/",
    "https://komikcast.me/komik/oshiego-ni-kyouhaku-sareru-no-wa-hanzai-desu/",
    "https://komikcast.me/komik/oshieko-kara-nigerarenai/",
    "https://komikcast.me/komik/oshikake-maid-shirayuki-san/",
    "https://komikcast.me/komik/oshimai/",
    "https://komikcast.me/komik/oshioki-execute/",
    "https://komikcast.me/komik/osoroi/",
    "https://komikcast.me/komik/ossan-teihen-chiyushi-to-mana-musume-no-henkyou-raifu/",
    "https://komikcast.me/komik/ossan-to-shoujo-matome/",
    "https://komikcast.me/komik/ossan-yuusha-to-maou-wo-hirou/",
    "https://komikcast.me/komik/otagai-no-koto-ga-suki-na-onee-san-to-otokonoko-no-hanashi-the-story-of-an-onee-san-and-a-boy-mutually-in-love/",
    "https://komikcast.me/komik/otaku-ni-otaku-na-gal-gurashi/",
    "https://komikcast.me/komik/otaku-no-tonari-wa-erufu-desuka/",
    "https://komikcast.me/komik/otaku-the-loser/",
    "https://komikcast.me/komik/otasaa-crossdressing-boys/",
    "https://komikcast.me/komik/otherworldly-evil-monarch/",
    "https://komikcast.me/komik/oto%e2%98%86koi/",
    "https://komikcast.me/komik/otogi-matsuri/",
    "https://komikcast.me/komik/otogi-taisen-phantasma/",
    "https://komikcast.me/komik/otohime-diver/",
    "https://komikcast.me/komik/otoko-no-ko-tsuma/",
    "https://komikcast.me/komik/otoko-tomodachi-girl/",
    "https://komikcast.me/komik/otokonoko-ga-kouhai-ni-kokuhaku-sareru-hanashi/",
    "https://komikcast.me/komik/otokonoko-ni-toriko/",
    "https://komikcast.me/komik/otokonoko-tenkousei-to-no-tatakai-ga-hajimaru/",
    "https://komikcast.me/komik/otome-bare/",
    "https://komikcast.me/komik/otome-danshi-ni-koisuru-otome/",
    "https://komikcast.me/komik/otome-game-no-hametsu-flag-shika-nai-akuyaku-reijou-ni-tensei-shite-shimatta/",
    "https://komikcast.me/komik/otome-game-no-heroine-de-saikyou-survival/",
    "https://komikcast.me/komik/otome-game-sekai-wa-mob-ni-kibishii-sekai-desu/",
    "https://komikcast.me/komik/otome-kaijuu-caramelize/",
    "https://komikcast.me/komik/otome-monster-caramelize/",
    "https://komikcast.me/komik/otomege-no-mobu-de-sura-nain-da-ga/",
    "https://komikcast.me/komik/otona-no-bouguya-san/",
    "https://komikcast.me/komik/otonari-no-tenshi-sama-ni-itsunomanika-dame-ningen-ni-sareteita-ken/",
    "https://komikcast.me/komik/otonari-voice-chat/",
    "https://komikcast.me/komik/otoyomegatari/",
    "https://komikcast.me/komik/ottoman/",
    "https://komikcast.me/komik/ouji-sama-nanka-janai/",
    "https://komikcast.me/komik/ouji-sama-nante-iranai/",
    "https://komikcast.me/komik/oujo-denka-wa-oikari-no-you-desu/",
    "https://komikcast.me/komik/oujougiwa-no-imi-o-shire/",
    "https://komikcast.me/komik/oukoku-e-tsuzuku-michi/",
    "https://komikcast.me/komik/oukoku-game/",
    "https://komikcast.me/komik/oukoku-no-saishuu-heiki-rettousei-to-shite-kishi-gakuin-e/",
    "https://komikcast.me/komik/oumagadoki-doubutsuen/",
    "https://komikcast.me/komik/our-relationship-is/",
    "https://komikcast.me/komik/our-yuri-started-with-me-getting-rejected-in-a-dream/",
    "https://komikcast.me/komik/ouritsu-mahou-gakuen-no-saikasei-slum-agari-no-saikyou-mahoushi-kizoku-darake-no-gakuen-de-musou-suru/",
    "https://komikcast.me/komik/ousama-ranking/",
    "https://komikcast.me/komik/out-mizuta-makoto/",
    "https://komikcast.me/komik/out-of-batteries/",
    "https://komikcast.me/komik/outaishihi-ni-nante-naritakunai/",
    "https://komikcast.me/komik/outcast/",
    "https://komikcast.me/komik/outlander-tyrant-supplier/",
    "https://komikcast.me/komik/outside-of-the-attribute-i-picked-up-a-girl/",
    "https://komikcast.me/komik/outsider-super-son-in-law/",
    "https://komikcast.me/komik/overbearing-tyrant/",
    "https://komikcast.me/komik/overlord/",
    "https://komikcast.me/komik/overlord-reflect/",
    "https://komikcast.me/komik/overpowered-sword/",
    "https://komikcast.me/komik/owari-no-seraph/",
    "https://komikcast.me/komik/oya-ga-saikon-shite-imouto-ga-dekiru-to-omotte-itara-gakkou-de-furyou-to-uwasa-sarete-iru-gyaru-datta/",
    "https://komikcast.me/komik/oya-ga-urusai-node-kouhai-to-gisou-kekkon-shitemita/",
    "https://komikcast.me/komik/oyaji-ga-bishoujo-ni-natteta-hanashi/",
    "https://komikcast.me/komik/oyasumi-punpun/",
    "https://komikcast.me/komik/pajama-na-kanojo/",
    "https://komikcast.me/komik/pale-throne/",
    "https://komikcast.me/komik/panfia/",
    "https://komikcast.me/komik/panlong/",
    "https://komikcast.me/komik/panlong-2/",
    "https://komikcast.me/komik/papa-to-oyaji-no-uchi-gohan/",
    "https://komikcast.me/komik/paranoia-cage/",
    "https://komikcast.me/komik/parasite-in-love/",
    "https://komikcast.me/komik/parasitic-girl/",
    "https://komikcast.me/komik/parasol-alliance/",
    "https://komikcast.me/komik/parenting-diary-of-the-strongest-dragon-who-suddenly-became-a-dad/",
    "https://komikcast.me/komik/parfait-onee-loli-yuri-anthology/",
    "https://komikcast.me/komik/pariss-choice/",
    "https://komikcast.me/komik/part-time-boyfriends/",
    "https://komikcast.me/komik/part-time-yama/",
    "https://komikcast.me/komik/party-kara-tsuihou-sareta-sono-chiyushi-jitsuha-saikyou-nitsuki/",
    "https://komikcast.me/komik/pashiri-na-boku-koisuru-banchou-san/",
    "https://komikcast.me/komik/past-life-regressor/",
    "https://komikcast.me/komik/pastoral-battle-hymn-record-of-pioneer-in-the-god-realm/",
    "https://komikcast.me/komik/paternal-cousins-cousins/",
    "https://komikcast.me/komik/path-of-the-sword/",
    "https://komikcast.me/komik/path-to-transcendence/",
    "https://komikcast.me/komik/pathfinder/",
    "https://komikcast.me/komik/peaceful-elite-stroke-god-of-war/",
    "https://komikcast.me/komik/peach-boy-riverside/",
    "https://komikcast.me/komik/peak-prophecy/",
    "https://komikcast.me/komik/pearl-weiss/",
    "https://komikcast.me/komik/peerles-sovereign-ling-xiao/",
    "https://komikcast.me/komik/peerless-alchemist/",
    "https://komikcast.me/komik/peerless-dad/",
    "https://komikcast.me/komik/peerless-heavenly-emperor/",
    "https://komikcast.me/komik/peerless-little-doctor/",
    "https://komikcast.me/komik/peerless-martial-art-soul/",
    "https://komikcast.me/komik/peerless-martial-soul/",
    "https://komikcast.me/komik/peerless-medical-saint-trailer/",
    "https://komikcast.me/komik/peerless-saint-emperor/",
    "https://komikcast.me/komik/peerless-soldier-king/",
    "https://komikcast.me/komik/peerless-soul/",
    "https://komikcast.me/komik/peerless-sword-god/",
    "https://komikcast.me/komik/perfect-life-system-activated/",
    "https://komikcast.me/komik/perfect-surgeon/",
    "https://komikcast.me/komik/perfect-world/",
    "https://komikcast.me/komik/perowan-hayashinasai-goshujinsama/",
    "https://komikcast.me/komik/persona-5/",
    "https://komikcast.me/komik/perspective-medical-saint/",
    "https://komikcast.me/komik/perverted-professor-and-android/",
    "https://komikcast.me/komik/peter-grill-kenja-no-jikan/",
    "https://komikcast.me/komik/phantom-seer/",
    "https://komikcast.me/komik/phantom-spirit-king/",
    "https://komikcast.me/komik/pharaohs-concubine/",
    "https://komikcast.me/komik/phoenix-descends-from-above/",
    "https://komikcast.me/komik/phone-goddness/",
    "https://komikcast.me/komik/photo-shoot/",
    "https://komikcast.me/komik/physician-return/",
    "https://komikcast.me/komik/pick-a-school-flower-to-be-a-wife/",
    "https://komikcast.me/komik/picked-up-a-little-fox/",
    "https://komikcast.me/komik/picking-up-a-school-beauty-to-be-wife/",
    "https://komikcast.me/komik/picking-up-beast-girls-in-the-end-times/",
    "https://komikcast.me/komik/piyoko-to-makai-machi-no-hime-sama/",
    "https://komikcast.me/komik/plainwalker-of-the-stigma/",
    "https://komikcast.me/komik/planet-of-the-fools/",
    "https://komikcast.me/komik/plastic-neesan/",
    "https://komikcast.me/komik/platinum-end/",
    "https://komikcast.me/komik/player/",
    "https://komikcast.me/komik/player-from-today-onwards/",
    "https://komikcast.me/komik/player-who-cant-level-up/",
    "https://komikcast.me/komik/plaza/",
    "https://komikcast.me/komik/please-bully-me-miss-villainess/",
    "https://komikcast.me/komik/please-go-home-akutsu-san/",
    "https://komikcast.me/komik/please-have-a-meal/",
    "https://komikcast.me/komik/please-spoil-me-hinamori-san/",
    "https://komikcast.me/komik/please-stop-summoning-me/",
    "https://komikcast.me/komik/plunderer/",
    "https://komikcast.me/komik/plundering-the-heavens/",
    "https://komikcast.me/komik/pluralistic-immortal/",
    "https://komikcast.me/komik/pluto/",
    "https://komikcast.me/komik/pocha-climb/",
    "https://komikcast.me/komik/pochi-gokko/",
    "https://komikcast.me/komik/pochi-kuro/",
    "https://komikcast.me/komik/pochis-walk/",
    "https://komikcast.me/komik/poisonous-witch-doctor/",
    "https://komikcast.me/komik/polarity/",
    "https://komikcast.me/komik/pon-pon-pon/",
    "https://komikcast.me/komik/ponko-tsundere-na-osananajimi/",
    "https://komikcast.me/komik/ponkotsu-ga-tensei-shitara-zongai-saikyou/",
    "https://komikcast.me/komik/ponkotsu-chan-kenshouchuu/",
    "https://komikcast.me/komik/pony-crossing-the-river/",
    "https://komikcast.me/komik/poor-father-and-daughter/",
    "https://komikcast.me/komik/poputepipikku/",
    "https://komikcast.me/komik/poro-no-ryuugakuki/",
    "https://komikcast.me/komik/possession/",
    "https://komikcast.me/komik/post-apocalyptic-dispatch-company/",
    "https://komikcast.me/komik/potion-danomi-de-ikinobimasu/",
    "https://komikcast.me/komik/pounding/",
    "https://komikcast.me/komik/power-master/",
    "https://komikcast.me/komik/power-the-rates/",
    "https://komikcast.me/komik/powerful-teenage-king/",
    "https://komikcast.me/komik/precious-4p-short-stories/",
    "https://komikcast.me/komik/pregnant-wife-one-plus-one/",
    "https://komikcast.me/komik/premarital-relationship/",
    "https://komikcast.me/komik/pretend-kiss/",
    "https://komikcast.me/komik/pretty-face/",
    "https://komikcast.me/komik/pride-complex/",
    "https://komikcast.me/komik/prince-charming-daddy-descended-from-heaven/",
    "https://komikcast.me/komik/prince-dont-do-this/",
    "https://komikcast.me/komik/prince-hero/",
    "https://komikcast.me/komik/princess-lucia/",
    "https://komikcast.me/komik/princess-wars/",
    "https://komikcast.me/komik/princess-is-that-holy-water/",
    "https://komikcast.me/komik/princess-please-distance-yourself-a-little/",
    "https://komikcast.me/komik/prism/",
    "https://komikcast.me/komik/prison-labs/",
    "https://komikcast.me/komik/prison-school/",
    "https://komikcast.me/komik/prison-town-e-youkoso-welcome-to-the-prison-town/",
    "https://komikcast.me/komik/produsaga/",
    "https://komikcast.me/komik/project-ac/",
    "https://komikcast.me/komik/project-sekai-1koma/",
    "https://komikcast.me/komik/propose/",
    "https://komikcast.me/komik/protagonist-x-rival/",
    "https://komikcast.me/komik/protect-me-knight/",
    "https://komikcast.me/komik/protected-by-my-dragon-knight/",
    "https://komikcast.me/komik/prunus-girl/",
    "https://komikcast.me/komik/pseudo-harem/",
    "https://komikcast.me/komik/psyche-matashitemo/",
    "https://komikcast.me/komik/psychic-students-and-a-lazy-teacher/",
    "https://komikcast.me/komik/psycho-revenge/",
    "https://komikcast.me/komik/psyren/",
    "https://komikcast.me/komik/pulseless-girlfriend/",
    "https://komikcast.me/komik/punishing-gray-raven/",
    "https://komikcast.me/komik/punishment/",
    "https://komikcast.me/komik/pupillary-master/",
    "https://komikcast.me/komik/pure-na-kareshi-ga-katteru-inu-ga-yabai/",
    "https://komikcast.me/komik/purgatory-rebirth/",
    "https://komikcast.me/komik/pyramid-game/",
    "https://komikcast.me/komik/qiangshenji/",
    "https://komikcast.me/komik/qin-xia/",
    "https://komikcast.me/komik/qing-dong/",
    "https://komikcast.me/komik/qishi-huanxiang-ye/",
    "https://komikcast.me/komik/qp/",
    "https://komikcast.me/komik/quan-zhi-gao-shou/",
    "https://komikcast.me/komik/quanzhi-gaoshou/",
    "https://komikcast.me/komik/quarantine-forced-us-to-boymode/",
    "https://komikcast.me/komik/queen-of-the-last-days/",
    "https://komikcast.me/komik/quest-supremacy/",
    "https://komikcast.me/komik/rabbit-doubt/",
    "https://komikcast.me/komik/radiant/",
    "https://komikcast.me/komik/radiation-house/",
    "https://komikcast.me/komik/ragna-crimson/",
    "https://komikcast.me/komik/raid/",
    "https://komikcast.me/komik/raid-sf/",
    "https://komikcast.me/komik/raiders-rely-on-login-rewards/",
    "https://komikcast.me/komik/rain/",
    "https://komikcast.me/komik/rain-or-shine/",
    "https://komikcast.me/komik/rairaiden/",
    "https://komikcast.me/komik/raise-kamika/",
    "https://komikcast.me/komik/rakudai-kenja-gakuin-no-musou-nidome-no-tensei-s-rank-cheat-majutsushi-boukenroku/",
    "https://komikcast.me/komik/rakudai-kishi-no-cavalry/",
    "https://komikcast.me/komik/ramia-yana/",
    "https://komikcast.me/komik/ranger-reject/",
    "https://komikcast.me/komik/rankers-return/",
    "https://komikcast.me/komik/rankers-return-remake/",
    "https://komikcast.me/komik/rathard/",
    "https://komikcast.me/komik/rave-master/",
    "https://komikcast.me/komik/raw-hero/",
    "https://komikcast.me/komik/rdb-red-data-book/",
    "https://komikcast.me/komik/re-cervin/",
    "https://komikcast.me/komik/re-evolutioner/",
    "https://komikcast.me/komik/re-zero-alternative/",
    "https://komikcast.me/komik/re-marina/",
    "https://komikcast.me/komik/re-monster/",
    "https://komikcast.me/komik/rezero-kara-hajimeru-isekai-seikatsu-kenki-koiuta/",
    "https://komikcast.me/komik/readymade-heroine/",
    "https://komikcast.me/komik/real/",
    "https://komikcast.me/komik/real-account/",
    "https://komikcast.me/komik/real-account-2/",
    "https://komikcast.me/komik/realist-maou-niyoru-seiiki-naki-isekai-kaikaku/",
    "https://komikcast.me/komik/reality-quest/",
    "https://komikcast.me/komik/realpg/",
    "https://komikcast.me/komik/rebellio-machine/",
    "https://komikcast.me/komik/rebirth-abandoned-less-return/",
    "https://komikcast.me/komik/rebirth-after-80-000-years-passed/",
    "https://komikcast.me/komik/rebirth-become-a-dog/",
    "https://komikcast.me/komik/rebirth-city-deity/",
    "https://komikcast.me/komik/rebirth-extreme/",
    "https://komikcast.me/komik/rebirth-i-am-the-great-god/",
    "https://komikcast.me/komik/rebirth-into-the-strongest-immortal-cultivator/",
    "https://komikcast.me/komik/rebirth-of-god-level-prodigal-son/",
    "https://komikcast.me/komik/rebirth-of-refining-emperor/",
    "https://komikcast.me/komik/8-circle-wizards-reincarnation/",
    "https://komikcast.me/komik/rebirth-of-the-cute-tiger-great-general-wants-to-hug/",
    "https://komikcast.me/komik/rebirth-of-the-demon-reign/",
    "https://komikcast.me/komik/rebirth-of-the-divine-doctor/",
    "https://komikcast.me/komik/rebirth-of-the-dynasty-tang/",
    "https://komikcast.me/komik/rebirth-of-the-earth-immortal-venerable/",
    "https://komikcast.me/komik/rebirth-of-the-majestic-wife/",
    "https://komikcast.me/komik/rebirth-of-the-sea-emperor/",
    "https://komikcast.me/komik/rebirth-of-the-sword-god-returns/",
    "https://komikcast.me/komik/rebirth-of-the-top-villain/",
    "https://komikcast.me/komik/rebirth-of-the-urban-immortal-cultivator/",
    "https://komikcast.me/komik/rebirth-of-the-urban-mad-immortal/",
    "https://komikcast.me/komik/rebirth-of-tian-lun/",
    "https://komikcast.me/komik/rebirth-self-cultivation/",
    "https://komikcast.me/komik/rebirth-super-goddess/",
    "https://komikcast.me/komik/reborn-as-king/",
    "https://komikcast.me/komik/reborn-big-player/",
    "https://komikcast.me/komik/reborn-doctor/",
    "https://komikcast.me/komik/reborn-of-war-god/",
    "https://komikcast.me/komik/rebuild-world/",
    "https://komikcast.me/komik/rec-mizu-asato/",
    "https://komikcast.me/komik/record-of-fighting-god/",
    "https://komikcast.me/komik/record-of-the-mightiest-lord/",
    "https://komikcast.me/komik/record-of-the-war-god/",
    "https://komikcast.me/komik/record-of-yun-hai-celestial-chef/",
    "https://komikcast.me/komik/records-of-the-swordsman-scholar/",
    "https://komikcast.me/komik/red-doll/",
    "https://komikcast.me/komik/red-envelope-fairy-group/",
    "https://komikcast.me/komik/red-night-eve/",
    "https://komikcast.me/komik/red-spirit/",
    "https://komikcast.me/komik/red-sprite/",
    "https://komikcast.me/komik/red-storm/",
    "https://komikcast.me/komik/redline/",
    "https://komikcast.me/komik/regina-rena-to-the-unforgiven/",
    "https://komikcast.me/komik/regnal-trigger/",
    "https://komikcast.me/komik/regressor-instruction-manual/",
    "https://komikcast.me/komik/reigen-reikyuuchi-max-131-no-otoko/",
    "https://komikcast.me/komik/reign/",
    "https://komikcast.me/komik/reincarnate-and-survive-as-a-doctor/",
    "https://komikcast.me/komik/reincarnated-as-an-aristocrat-with-an-appraisal-skill/",
    "https://komikcast.me/komik/reincarnated-as-the-son-of-a-vicious-lord-when-i-was-having-fun-learning/",
    "https://komikcast.me/komik/reincarnated-into-an-otome-game-nah-im-too-busy-mastering-magic/",
    "https://komikcast.me/komik/reincarnated-to-be-the-wicked-maid-at-the-main-leads-side/",
    "https://komikcast.me/komik/reincarnated-war-god/",
    "https://komikcast.me/komik/reincarnation-no-kaben/",
    "https://komikcast.me/komik/reincarnation-of-the-murim-clans-former-ranker/",
    "https://komikcast.me/komik/reincarnation-of-the-suicidal-battle-god/",
    "https://komikcast.me/komik/reincarne/",
    "https://komikcast.me/komik/reiwa-hanamaru-gakuen/",
    "https://komikcast.me/komik/tutorial/",
    "https://komikcast.me/komik/release-that-witch/",
    "https://komikcast.me/komik/relife/",
    "https://komikcast.me/komik/remote-yuri/",
    "https://komikcast.me/komik/remtheta-braves-online/",
    "https://komikcast.me/komik/renai-boukun/",
    "https://komikcast.me/komik/renai-harem-game-shuuryou-no-oshirase-ga-kuru-koro-ni/",
    "https://komikcast.me/komik/renai-kinshi-gakuen/",
    "https://komikcast.me/komik/renai-shikou-seitokai/",
    "https://komikcast.me/komik/renai-shimasen-ka/",
    "https://komikcast.me/komik/renchuu/",
    "https://komikcast.me/komik/rengoku-no-karma/",
    "https://komikcast.me/komik/renkinjutsu-shidesu-jichou-wa-gomibako-ni-sutete/",
    "https://komikcast.me/komik/rental-boyfriend/",
    "https://komikcast.me/komik/rental-girlfriend-tsukita-san/",
    "https://komikcast.me/komik/rental-onii-chan/",
    "https://komikcast.me/komik/renzu-goshi-ni-oni-wa-inai/",
    "https://komikcast.me/komik/rescue-system/",
    "https://komikcast.me/komik/resign/",
    "https://komikcast.me/komik/retire-shita-ningyoushi-no-mmo-kikou-jojishi/",
    "https://komikcast.me/komik/retired-heroes/",
    "https://komikcast.me/komik/retiring-as-the-worlds-strongest-demon/",
    "https://komikcast.me/komik/rettoshoku-no-saikyo-kenja-teihen-no-murabito-kara-yoyuu-de-sekai-saikyo/",
    "https://komikcast.me/komik/rettou-me-no-tensei-majutsushi-shiitage-rareta-saikyou-no-minashigo-ga-isekai-de-musou-suru/",
    "https://komikcast.me/komik/rettou-me-no-tensei-majutsushi-shiitage-rareta-moto-yuusha-wa-mirai-no-sekai-o-yoyuu-de-ikinuku/",
    "https://komikcast.me/komik/return-from-the-world-of-immortals/",
    "https://komikcast.me/komik/return-of-immortal-warlord/",
    "https://komikcast.me/komik/return-of-the-8th-class-magician/",
    "https://komikcast.me/komik/return-of-the-avenger/",
    "https://komikcast.me/komik/return-of-the-broken-constellation/",
    "https://komikcast.me/komik/return-of-the-flowery-mountain-sect/",
    "https://komikcast.me/komik/return-of-the-frozen-player/",
    "https://komikcast.me/komik/return-of-the-greatest-lancer/",
    "https://komikcast.me/komik/return-of-the-invincible-patriarch/",
    "https://komikcast.me/komik/return-of-the-legend/",
    "https://komikcast.me/komik/return-of-the-mad-demon/",
    "https://komikcast.me/komik/return-of-the-reborn-god-emperor/",
    "https://komikcast.me/komik/return-of-xiandi/",
    "https://komikcast.me/komik/return-survival/",
    "https://komikcast.me/komik/return-the-demon-goddess/",
    "https://komikcast.me/komik/return-to-beginning-of-the-apocalypse/",
    "https://komikcast.me/komik/return-to-player/",
    "https://komikcast.me/komik/return-to-the-earth-and-be-a-god-stick/",
    "https://komikcast.me/komik/revenge-movie-queen/",
    "https://komikcast.me/komik/revenge-of-young-master-peng/",
    "https://komikcast.me/komik/reversed-love-route/",
    "https://komikcast.me/komik/reversing-heroes/",
    "https://komikcast.me/komik/reversing-the-immortal-path/",
    "https://komikcast.me/komik/rich-player/",
    "https://komikcast.me/komik/right-click/",
    "https://komikcast.me/komik/rikei-ga-koi-ni-ochita-no-de-shoumei-shitemita/",
    "https://komikcast.me/komik/rikei-joshi-to-taiikukaikei-joshi-no-yuri-manga/",
    "https://komikcast.me/komik/rikudou/",
    "https://komikcast.me/komik/rin/",
    "https://komikcast.me/komik/rin-chan-wa-suezen-shitai/",
    "https://komikcast.me/komik/rinjin-chan-ga-shinpai/",
    "https://komikcast.me/komik/rinna-keibu-wa-iki-ga-dekinai/",
    "https://komikcast.me/komik/rise-from-the-rubble/",
    "https://komikcast.me/komik/rise-of-the-demon-king/",
    "https://komikcast.me/komik/rising-x-rydeen/",
    "https://komikcast.me/komik/risou-no-himo-seikatsu/",
    "https://komikcast.me/komik/risou-no-musume-nara-sekai-saikyou-demo-kawaigatte-kuremasuka/",
    "https://komikcast.me/komik/rivnes/",
    "https://komikcast.me/komik/road-to-heaven/",
    "https://komikcast.me/komik/road-to-the-awakening/",
    "https://komikcast.me/komik/robot-x-laserbeam/",
    "https://komikcast.me/komik/rojiura-kurashi/",
    "https://komikcast.me/komik/roku-de-nashi-majutsu-koushi-to-kinki-kyouten/",
    "https://komikcast.me/komik/rokudou-no-onna-tachi/",
    "https://komikcast.me/komik/rokudo-tosoki/",
    "https://komikcast.me/komik/roland-roland/",
    "https://komikcast.me/komik/romance-of-the-eclipse/",
    "https://komikcast.me/komik/rooftop-sword-master/",
    "https://komikcast.me/komik/rooftop-sword-master-arachi-the-first-irregular/",
    "https://komikcast.me/komik/rooster-fighter/",
    "https://komikcast.me/komik/rosario-vampire-season-ii/",
    "https://komikcast.me/komik/rougo-ni-sonaete-i-sekai-de-8-man-mai-no-kinka-o-tamemasu/",
    "https://komikcast.me/komik/roujoteki-shoujo-hinata-chan/",
    "https://komikcast.me/komik/roulette-world/",
    "https://komikcast.me/komik/royal-agent/",
    "https://komikcast.me/komik/royal-path/",
    "https://komikcast.me/komik/rudolf-turkey/",
    "https://komikcast.me/komik/ruler-of-the-land/",
    "https://komikcast.me/komik/ruler-of-the-three-kingdoms/",
    "https://komikcast.me/komik/rules-as-a-monarch-under-the-skirts/",
    "https://komikcast.me/komik/ruling-a-planet/",
    "https://komikcast.me/komik/rune-factory-4-koushiki-comic-visual-book/",
    "https://komikcast.me/komik/runway-de-waratte/",
    "https://komikcast.me/komik/ruri-dragon/",
    "https://komikcast.me/komik/rurouni-kenshin-meiji-kenkaku-romantan-hokkaido-hen/",
    "https://komikcast.me/komik/rust-eater-bisco/",
    "https://komikcast.me/komik/rwby/",
    "https://komikcast.me/komik/ryle-to-yari/",
    "https://komikcast.me/komik/ryoumin-0-nin-start-no-henkyou-ryoushusama/",
    "https://komikcast.me/komik/ryoushin-no-shakkin-wo-katagawari-shite-morau-jouken-wa-nihonichi-kawaii-joshikousei-to-issho-ni-kurasu-koto-deshita/",
    "https://komikcast.me/komik/ryu-kusari-no-orishin-no-naka-no-kokoro/",
    "https://komikcast.me/komik/ryuu-majin-hime-valalice-no-haiboku-%ef%bd%9e-makai-saikyou-no-hime-ga-jinrui-no-gurume-ni-makeru-hazu-ga-nai/",
    "https://komikcast.me/komik/s-rank-boukensha-de-aru-ore-no-musume-tachi-wa-juudo-no-father-con-deshita/",
    "https://komikcast.me/komik/s-rare-soubi-no-niau-kanojo/",
    "https://komikcast.me/komik/s-watari-san-to-m-mura-kun/",
    "https://komikcast.me/komik/s-you-her-and-fate/",
    "https://komikcast.me/komik/s-kyuu-guild-wo-tsuihou-saretakedo-jitsu-wa-ore-dake-dragon-no-kotoba-ga-wakaru-no-de-kidzuita-toki-ni-wa-ryuu-kishi-no-chouten-wo-kiwametemashita/",
    "https://komikcast.me/komik/s-rank-monster-no-behemoth-dakedo-neko-to-machigawarete-erufu-musume-no-kishi-pet-toshite-kurashitemasu/",
    "https://komikcast.me/komik/s-i-d/",
    "https://komikcast.me/komik/sabishigariya-no-muboubi-nyanko/",
    "https://komikcast.me/komik/sabitsuita-ken-wo-tameshi-ni-kyouka-shite-mitara-tondemonai-maken-ni-bakemashita/",
    "https://komikcast.me/komik/sacchi-sarenai-saikyou-shoku-rule-breaker/",
    "https://komikcast.me/komik/sachi-iro-no-one-room/",
    "https://komikcast.me/komik/sachiare/",
    "https://komikcast.me/komik/sachiiro-no-one-room-gaiden-seikai-no-meitantei/",
    "https://komikcast.me/komik/sacred-chevalier/",
    "https://komikcast.me/komik/sadako-in-my-home/",
    "https://komikcast.me/komik/sadako-to-deatte-shimau-hanashi/",
    "https://komikcast.me/komik/saeki-san-to-hitotsu-yane-no-shita-ill-have-sherbet/",
    "https://komikcast.me/komik/saeki-san-wa-nemutteru/",
    "https://komikcast.me/komik/saenai-boku-ga-kimi-no-heya-de-shiteiru-koto-wo-kurasumeito-wa-dare-mo-shiranai/",
    "https://komikcast.me/komik/saenai-heroine-no-sodatekata-egoistic-lily/",
    "https://komikcast.me/komik/saenai-heroine-no-sodatekata-koisuru-metronome/",
    "https://komikcast.me/komik/saenai-riman-to-yankee-joshi-kousei/",
    "https://komikcast.me/komik/sages-who-slaughter-the-heartless/",
    "https://komikcast.me/komik/saguri-chan-tankentai/",
    "https://komikcast.me/komik/saguri-san-tankentai/",
    "https://komikcast.me/komik/sahara-flower-samurai/",
    "https://komikcast.me/komik/saihate-no-paladin/",
    "https://komikcast.me/komik/saijaku-muhai-no-bahamut/",
    "https://komikcast.me/komik/saijaku-tamer-wa-gomi-hiroi-no-tabi-wo-hajimemashita/",
    "https://komikcast.me/komik/saijo-no-osewa-takane-no-hana-darakena-meimon-kou-de-gakuin-ichi-no-ojou-sama-seikatsu-noryoku-kaimu-o-kagenagara-osewa-suru-koto-ni-narimashita/",
    "https://komikcast.me/komik/saiki-kusuo-no-sainan/",
    "https://komikcast.me/komik/saikopa-sui-chan-sannin-de-asoberu-ne-hololive/",
    "https://komikcast.me/komik/saikyou-fuhai-no-shinkentsukai/",
    "https://komikcast.me/komik/saikyou-juzoku-tensei-cheat-majutsushi-no-slow-life/",
    "https://komikcast.me/komik/saikyou-ken-hijiri-no-mahou-shugyou-level-99-no-status-o-tamotta-mama-level-1-kara-yarinaosu/",
    "https://komikcast.me/komik/saikyou-kurasu-no-eirei-1000-karada-ga-shiranai-uchi-ni-shigoto-o-katadzukete-kurerushi/",
    "https://komikcast.me/komik/saikyou-mahoushi-no-inton-keikaku/",
    "https://komikcast.me/komik/saikyou-mahoushi-no-inton-keikaku-the-alternative/",
    "https://komikcast.me/komik/saikyou-no-kanteishi-tte-dare-no-koto-manpuku-gohan-de-isekai-seikatsu/",
    "https://komikcast.me/komik/saikyou-no-kurokishi-sentou-maid-ni-tenshoku-shimashita/",
    "https://komikcast.me/komik/saikyou-no-kyuuketsuhime-wa-imouto-ga-hoshii/",
    "https://komikcast.me/komik/saikyou-no-madoshi-hisa-ni-ya-wo-ukete-shimatta-no-de-inaka-no-eihei-ni-naru/",
    "https://komikcast.me/komik/saikyou-no-maou-ni-kitaerareta-yuusha/",
    "https://komikcast.me/komik/saikyou-no-shokugyou-wa-yuusha-demo-kenja-demo-naku-kanteishi-kari-rashii-desu-yo/",
    "https://komikcast.me/komik/saikyou-no-shuzoku-ga-ningen-datta-ken/",
    "https://komikcast.me/komik/saikyou-no-youhei-shoujo-no-gakuen-seikatsu-school-life-of-a-mercenary-girl/",
    "https://komikcast.me/komik/saikyou-onmyouji-no-isekai-tenseiki-geboku-no-youkaidomo-ni-kurabete-monster-ga-yowaisugirundaga/",
    "https://komikcast.me/komik/saikyou-shoku-ryukishi-kara-shokyu-shoku-hakobiya-ni-nattano-ni-naze-ka-yushatachi-kara-tayoraretemasu/",
    "https://komikcast.me/komik/saikyou-yuusha-wa-oharai-hako-maou-ni-nattara-zutto-ore-no-musou-return/",
    "https://komikcast.me/komik/saint-of-black-kite-the-banished-healer-masters-dark-magic-with-abundant-magical-power/",
    "https://komikcast.me/komik/saint-no-just-a-passing-monster-tamer-the-completely-unparalleled-saint-travels-with-fluffies/",
    "https://komikcast.me/komik/sairin-yuusha-no-fukushuu-hanashi/",
    "https://komikcast.me/komik/saisoku-musou-no-b-kyuu-mahou-tsukai-ippatsu-utareru-mae-ni-senpatsu-uchikaesu/",
    "https://komikcast.me/komik/saito-kun-wa-esper-rashii/",
    "https://komikcast.me/komik/sakamoto-days/",
    "https://komikcast.me/komik/sakamoto-desu-ga/",
    "https://komikcast.me/komik/saki-to-chika/",
    "https://komikcast.me/komik/sakura-trick-anthology-comic/",
    "https://komikcast.me/komik/sakura-chan-to-amane-kun/",
    "https://komikcast.me/komik/sakura-san-goshimei-desu-yo/",
    "https://komikcast.me/komik/sakura-saku/",
    "https://komikcast.me/komik/sakuranadeshiko/",
    "https://komikcast.me/komik/sakurai-san-wants-to-be-noticed/",
    "https://komikcast.me/komik/sakurasaku-shoukougun/",
    "https://komikcast.me/komik/sakutenteki-marirushi/",
    "https://komikcast.me/komik/salaryman-ga-isekai-ni-ittara-shitennou-ni-natta-hanashi/",
    "https://komikcast.me/komik/samadhi/",
    "https://komikcast.me/komik/samayoeru-tensei-sha-tachi-no-reliable-game/",
    "https://komikcast.me/komik/samsara-law/",
    "https://komikcast.me/komik/samurai-8-tales-of-hachimaru/",
    "https://komikcast.me/komik/sankaku-no-kyori-wa-kagiri-nai-zero/",
    "https://komikcast.me/komik/sankarea/",
    "https://komikcast.me/komik/sanshimai-ga-ore-wo-yuuwaku-shite-kuru/",
    "https://komikcast.me/komik/santairiku-eiyuuki/",
    "https://komikcast.me/komik/sanzennenme-no-kamitaiou/",
    "https://komikcast.me/komik/saotome-senshu-hitakakusu/",
    "https://komikcast.me/komik/saotome-shimai-ha-manga-no-tame-nara/",
    "https://komikcast.me/komik/sapphire-blue/",
    "https://komikcast.me/komik/sasaki-to-pii-chan-isekai-de-slow-life-wo-tanishimou-to-shitara-gendai-de-inou-battle-ni-makikomareta-ken-mahou-shoujo-ga-app-wo-hajimeta-you-desu/",
    "https://komikcast.me/komik/sasayaku-you-ni-koi-wo-utau/",
    "https://komikcast.me/komik/satoko-to-nada/",
    "https://komikcast.me/komik/satou-kun-wa-nozotte-iru-kamisama-appli-de-onna-no-ko-no-kokoro-wo-nozoitara-do-xx-datta/",
    "https://komikcast.me/komik/satsuriku-morph/",
    "https://komikcast.me/komik/satsuriku-no-tenshi/",
    "https://komikcast.me/komik/saurus/",
    "https://komikcast.me/komik/savage-fang-ojou-sama/",
    "https://komikcast.me/komik/save-load-no-dekiru-yadoya-san/",
    "https://komikcast.me/komik/save-a-big-demon/",
    "https://komikcast.me/komik/save-me/",
    "https://komikcast.me/komik/save-the-world-uncle/",
    "https://komikcast.me/komik/saving-the-sub-male-lead-who-was-thrown-away-by-female-lead/",
    "https://komikcast.me/komik/sawaranaide-kotesashi-kun/",
    "https://komikcast.me/komik/sayonara-eri/",
    "https://komikcast.me/komik/sayonara-isekai-mata-kite-ashita-tabi-suru-efude-to-backpack-30/",
    "https://komikcast.me/komik/sayonara-miniskirt/",
    "https://komikcast.me/komik/sayounara-ryuusei-konnichiwa-jinsei/",
    "https://komikcast.me/komik/sayu-byoudou-shugi/",
    "https://komikcast.me/komik/sayuri-san-no-imouto-wa-tenshi/",
    "https://komikcast.me/komik/scarlet-yuino-chiri/",
    "https://komikcast.me/komik/school-flower-master/",
    "https://komikcast.me/komik/school-kill/",
    "https://komikcast.me/komik/school-martial-art-valkyrie/",
    "https://komikcast.me/komik/school-zone-ningiyau/",
    "https://komikcast.me/komik/science-and-technology-fairy/",
    "https://komikcast.me/komik/sealed-record-of-the-forbidden-god/",
    "https://komikcast.me/komik/second-brain/",
    "https://komikcast.me/komik/second-fight-against-the-heavens/",
    "https://komikcast.me/komik/second-life-of-a-gangster/",
    "https://komikcast.me/komik/second-life-produser/",
    "https://komikcast.me/komik/secret-yuru-camp/",
    "https://komikcast.me/komik/secret-love/",
    "https://komikcast.me/komik/secret-order/",
    "https://komikcast.me/komik/see-you-again/",
    "https://komikcast.me/komik/seeing-the-sea-with-an-angel/",
    "https://komikcast.me/komik/sei-chan-kyapa-oobaa-desu/",
    "https://komikcast.me/komik/seibetsu-mona-lisa-no-kimi-e/",
    "https://komikcast.me/komik/seichou-cheat-de-nandemo-dekiru-ni-natta-ga-mushoku-dake-wa-yamerarenai-desu/",
    "https://komikcast.me/komik/seidon-no-ryuu/",
    "https://komikcast.me/komik/seifuku-aventure/",
    "https://komikcast.me/komik/seifuku/",
    "https://komikcast.me/komik/seijo-no-maryoku-wa-bannou-desu/",
    "https://komikcast.me/komik/seijo-no-maryoku-wa-bannou-desu-mou-hitori-no-seijo-the-saints-magic-power-is-omnipotent-the-other-saint/",
    "https://komikcast.me/komik/seijo-sama-wo-amayakashitai-tadashi-yuusha-omae-wa-dame-da/",
    "https://komikcast.me/komik/seiken-no-blacksmith/",
    "https://komikcast.me/komik/seiken-shoujo-densetsu-intai-magiwa-no-ossan-boukensha-seiken-wo-nuite-eiyuu-ni-naru/",
    "https://komikcast.me/komik/seikenshi-sama-no-maken-chan/",
    "https://komikcast.me/komik/seinaru-kishi-no-ankokudou/",
    "https://komikcast.me/komik/seinen-shoujo-yo-haru-wo-musabore/",
    "https://komikcast.me/komik/seirei-gensouki/",
    "https://komikcast.me/komik/seirei-gensouki-minazuki-futago/",
    "https://komikcast.me/komik/seirei-tachi-no-rakuen-to-risou-no-isekai-seikatsu/",
    "https://komikcast.me/komik/seisan-shoku-o-kiwame-sugi-tara-densetsu-no-buki-ga-ore-no-yome-ni-narimashita/",
    "https://komikcast.me/komik/seiseidoudou-futamata-suru-hanashi/",
    "https://komikcast.me/komik/seisen-yuugi-maou-ga-shinde-100-nen-go/",
    "https://komikcast.me/komik/seishun-buta-yaro-wa-petit-devil-kouhai-no-yume-wo-minai/",
    "https://komikcast.me/komik/seishun-buta-yarou-wa-bunny-girl-senpai-no-yume-wo-minai/",
    "https://komikcast.me/komik/seishun-forget/",
    "https://komikcast.me/komik/seishun-pop/",
    "https://komikcast.me/komik/seishun-scrap/",
    "https://komikcast.me/komik/seito-kaichou-desu-ga-josou-hajimemashita/",
    "https://komikcast.me/komik/seitokai-tantei-kirita/",
    "https://komikcast.me/komik/seitokai-yakuindomo/",
    "https://komikcast.me/komik/sekai-de-ichiban-oppai-ga-suki/",
    "https://komikcast.me/komik/sekai-ka-kanojo-ka-erabenai/",
    "https://komikcast.me/komik/sekai-ni-hitotsu-dake-no-r/",
    "https://komikcast.me/komik/sekai-no-owari-ni-shiba-inu-to/",
    "https://komikcast.me/komik/sekai-no-owari-no-sekairoku/",
    "https://komikcast.me/komik/sekai-no-owari-to-majo-no-koi/",
    "https://komikcast.me/komik/sekai-saikyou-no-assassin-isekai-kizoku-ni-tensei-suru/",
    "https://komikcast.me/komik/sekai-saikyou-no-doryokuka-sainou-ga-doryoku-datta-no-de-kouritsu-yoku-kikakugai-no-doryoku-wo-shitemiru/",
    "https://komikcast.me/komik/sekai-saikyou-no-kouei-meikyuukoku-no-shinjin-tansakusha/",
    "https://komikcast.me/komik/sekai-saikyou-no-shinjuu-tsukai/",
    "https://komikcast.me/komik/sekai-saisoku-no-level-up/",
    "https://komikcast.me/komik/sekai-wa-owattemo-ikirutte-tanoshii/",
    "https://komikcast.me/komik/sekai-wo-sukuu-tame-ni-watashi-to-asa-chun-dekimasu-ka/",
    "https://komikcast.me/komik/sekimen-shinaide-sekime-san/",
    "https://komikcast.me/komik/sekimen-shinaide-sekime-san-serialization/",
    "https://komikcast.me/komik/sekirei/",
    "https://komikcast.me/komik/sekkaku-cheat-wo-moratte-isekai-ni-teni-shita-n-dakara-suki-na-you-ni-ikitemitai/",
    "https://komikcast.me/komik/selestial-god/",
    "https://komikcast.me/komik/semelparous/",
    "https://komikcast.me/komik/semete-ano-yuki-no-ni/",
    "https://komikcast.me/komik/sen-no-sukiru-o-motsu-otoko/",
    "https://komikcast.me/komik/sen-to-man/",
    "https://komikcast.me/komik/senaka-gurashi/",
    "https://komikcast.me/komik/send-my-regards-to-kenshiro/",
    "https://komikcast.me/komik/sengoku-komachi-kuroutan-noukou-giga/",
    "https://komikcast.me/komik/sengoku-night-blood/",
    "https://komikcast.me/komik/sengoku-strays/",
    "https://komikcast.me/komik/sengoku-vamp/",
    "https://komikcast.me/komik/sengoku-youko/",
    "https://komikcast.me/komik/senketsu-oujo-minna-korosu/",
    "https://komikcast.me/komik/senki-to-yobareta-otoko-puke-ni-ansatsu-saretara-musume-wo-hiroi-issho-ni-slow-life-wo-hajimeru/",
    "https://komikcast.me/komik/senmetsumadou-no-saikyou-kenja-musai-no-kenja-madou-wo-kiwame-saikyou-e-itaru/",
    "https://komikcast.me/komik/senmon-gakkou-jk/",
    "https://komikcast.me/komik/sennen-meikyuu-no-nana-ouji/",
    "https://komikcast.me/komik/sennen-sensou-aigis-eiyuu-no-kizuna/",
    "https://komikcast.me/komik/senobi/",
    "https://komikcast.me/komik/senpai-4koma/",
    "https://komikcast.me/komik/senpai-ai/",
    "https://komikcast.me/komik/senpai-doesnt-want-to-fall-for-her-kouhai/",
    "https://komikcast.me/komik/senpai-ga-boku-wo-torinikiteru/",
    "https://komikcast.me/komik/senpai-ga-oyobidesu/",
    "https://komikcast.me/komik/senpai-ga-uzai-kouhai-no-hanashi-web/",
    "https://komikcast.me/komik/senpai-is-mine/",
    "https://komikcast.me/komik/senpai-kara-me-ga-hanasenai-to-aru-kaishain-no-nichijou/",
    "https://komikcast.me/komik/senpai-no-koe-ga-chiisa-sugirunode-hochouki-o-tsukete-mitara-itsunomanika-ore-ni-shinuhodo-derete-ita-hanashi/",
    "https://komikcast.me/komik/senpai-x-kouhai/",
    "https://komikcast.me/komik/senpai-sore-hitokuchi-kudasai/",
    "https://komikcast.me/komik/senpai-lets-have-an-office-romance-%e2%99%aa/",
    "https://komikcast.me/komik/senpai-ore-no-koe-de-iyasa-renaide-kudasai/",
    "https://komikcast.me/komik/senpai-wazato-janaindesu/",
    "https://komikcast.me/komik/senren-banka/",
    "https://komikcast.me/komik/senritsu-no-majutsushi-to-goteijuu/",
    "https://komikcast.me/komik/senryuu-shoujo/",
    "https://komikcast.me/komik/sensei-de-xx-shicha-ikemasen/",
    "https://komikcast.me/komik/sensei-lock-on/",
    "https://komikcast.me/komik/sensei-ni-ageru/",
    "https://komikcast.me/komik/sensei-no-yasashii-koroshikata/",
    "https://komikcast.me/komik/sensei-wa-koi-o-oshie-rarenai/",
    "https://komikcast.me/komik/sensou-gekijou/",
    "https://komikcast.me/komik/sentimental-beach-side/",
    "https://komikcast.me/komik/sentouin-hakenshimasu/",
    "https://komikcast.me/komik/seoul-station-druid/",
    "https://komikcast.me/komik/seoul-station-necromancer/",
    "https://komikcast.me/komik/serious-as-she-is-she-has-a-cute-side-i-want-to-keep-all-to-myself/",
    "https://komikcast.me/komik/seriously-dating-a-succubus/",
    "https://komikcast.me/komik/sesame-salt-and-pudding/",
    "https://komikcast.me/komik/seven-day-alternating-personality-syndrome/",
    "https://komikcast.me/komik/seven-knights-alkaid/",
    "https://komikcast.me/komik/seven-knights-dark-servant/",
    "https://komikcast.me/komik/several-stories-about-my-girlfriends-cuteness/",
    "https://komikcast.me/komik/sewayaki-kitsune-no-senko-san/",
    "https://komikcast.me/komik/sexloid-ni-ai-wo-komete/",
    "https://komikcast.me/komik/shachiku-ol-to-akuma-shota/",
    "https://komikcast.me/komik/shachiku-succubus-no-hanashi/",
    "https://komikcast.me/komik/shachiku-to-gal-ga-irekawarimashite/",
    "https://komikcast.me/komik/shachiku-to-shoujo-no-1800-nichi/",
    "https://komikcast.me/komik/shachiku-san-wa-youjo-yuurei-ni-iyasaretai/",
    "https://komikcast.me/komik/shadow-cat/",
    "https://komikcast.me/komik/shadow-killer/",
    "https://komikcast.me/komik/shadows-house/",
    "https://komikcast.me/komik/shakkuri-no-tomekata/",
    "https://komikcast.me/komik/shall-we-have-dinner-tonight/",
    "https://komikcast.me/komik/shaman/",
    "https://komikcast.me/komik/shamo/",
    "https://komikcast.me/komik/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su/",
    "https://komikcast.me/komik/sharehouse-nile/",
    "https://komikcast.me/komik/shark/",
    "https://komikcast.me/komik/she-became-handsome-and-he-became-cute/",
    "https://komikcast.me/komik/she-becomes-a-tree/",
    "https://komikcast.me/komik/she-came-back-for-me/",
    "https://komikcast.me/komik/she-doesnt-know-why-she-lives/",
    "https://komikcast.me/komik/she-hates-me/",
    "https://komikcast.me/komik/she-is-coming-please-get-down/",
    "https://komikcast.me/komik/she-may-not-be-cute/",
    "https://komikcast.me/komik/she-whos-most-special-to-me/",
    "https://komikcast.me/komik/shes-the-prince-and-im-the-princess/",
    "https://komikcast.me/komik/shes-not-my-girlfriend-were-just-childhood-friends/",
    "https://komikcast.me/komik/shes-not-what-i-expected/",
    "https://komikcast.me/komik/shen-haos-heavenly-fall-system/",
    "https://komikcast.me/komik/shen-yin-wang-zuo/",
    "https://komikcast.me/komik/sheng-wang/",
    "https://komikcast.me/komik/shengzun/",
    "https://komikcast.me/komik/shenwu-tianzun/",
    "https://komikcast.me/komik/shi-chenxiang/",
    "https://komikcast.me/komik/shi-ni-modori-subete-wo-sukuu-tame-ni-saikyou-he-to-itaru/",
    "https://komikcast.me/komik/shi-shen-zhi-lu/",
    "https://komikcast.me/komik/shiawase-kanako-no-koroshiya-seikatsu/",
    "https://komikcast.me/komik/shiawase-na-uso/",
    "https://komikcast.me/komik/shibito-no-koe-wo-kiku-ga-yoi/",
    "https://komikcast.me/komik/shigoto-desu-yo-seimei-san/",
    "https://komikcast.me/komik/shigure-san-wants-to-shine/",
    "https://komikcast.me/komik/shihou-sekai-no-ou/",
    "https://komikcast.me/komik/shiikuin-san-wa-isekai-de-doubutsuen-tsukuritainode-monsutaa-wo-tenazukeru/",
    "https://komikcast.me/komik/shijou-saikyou-no-daimaou-murabito-a-ni-tensei-suru/",
    "https://komikcast.me/komik/shijou-saikyou-no-mahou-kenshi-f-rank-boukensha-ni-tensei-suru-kensei-to-matei-2-tsu-no-zense-omotta-otoko-no-eiyuutan/",
    "https://komikcast.me/komik/shijou-saikyou-orc-san-no-tanoshii-tanetsuke-harem-zukuri/",
    "https://komikcast.me/komik/shikabane-gatana/",
    "https://komikcast.me/komik/shikabane-shoujo-to-kakanai-gaka/",
    "https://komikcast.me/komik/shikisaki-shimai-wa-abakaretai/",
    "https://komikcast.me/komik/shikkaku-kara-hajimeru-nariagari-madou-shidou/",
    "https://komikcast.me/komik/shikkakumon-no-saikyou-kenja/",
    "https://komikcast.me/komik/shikkoku-tsukai-no-saikyo-yusha-nakama-zenin-ni-uragira-retanode-saikyo-no-mamono/",
    "https://komikcast.me/komik/shimaichigai/",
    "https://komikcast.me/komik/shimono-kuns-quiet-girlfriend/",
    "https://komikcast.me/komik/shin-no-jitsuryoku-wa-girigiri-made-kakushite-iyou-to-omou/",
    "https://komikcast.me/komik/shin-no-nakama-janai-to-yuusha-no-party-wo-oidasareta-node-henkyou-de-slow-life-suru-koto-ni-shimashita/",
    "https://komikcast.me/komik/shinda-otto-ga-mushi-ni-tensei-shita-ken/",
    "https://komikcast.me/komik/shinde-kudasai-yuusha-desho/",
    "https://komikcast.me/komik/shindere-shoujo-to-kodoku-na-shinigami/",
    "https://komikcast.me/komik/shindou-sefiria-no-gekokujou-program/",
    "https://komikcast.me/komik/shindou-yuusha-to-maid-oneesan/",
    "https://komikcast.me/komik/shingan-no-yuusha/",
    "https://komikcast.me/komik/shingeki-no-eroko-san/",
    "https://komikcast.me/komik/shingeki-no-kyojin/",
    "https://komikcast.me/komik/shingeki-no-kyojin-before-the-fall/",
    "https://komikcast.me/komik/shingetsutan-tsukihime/",
    "https://komikcast.me/komik/shinigami-ni-sodaterareta-shoujo-wa-shikkoku-no-tsurugi-wo-mune-ni-idaku/",
    "https://komikcast.me/komik/shinigami-sama-to-4-nin-no-kanojo/",
    "https://komikcast.me/komik/shinigami-chan-is-gullible/",
    "https://komikcast.me/komik/shinizokonai-agape/",
    "https://komikcast.me/komik/shinizokonai-no-arika/",
    "https://komikcast.me/komik/shinja-zero-no-megami-sama-to-hajimeru-isekai-kouryaku/",
    "https://komikcast.me/komik/shinka-no-mi-shiranai-uchi-ni-kachigumi-jinsei/",
    "https://komikcast.me/komik/shinmai-ossan-bouken-sha-saikyou-paati-ni-shinu-hodo-kitae-rarete-muteki-ni-naru/",
    "https://komikcast.me/komik/shinmai-shimai-no-futari-gohan/",
    "https://komikcast.me/komik/shinobi-quartet/",
    "https://komikcast.me/komik/shinobi-tensei/",
    "https://komikcast.me/komik/shinobuna-chiyo-chan/",
    "https://komikcast.me/komik/shinrei-tantei-yakumo/",
    "https://komikcast.me/komik/shinrigaku-de-isekai-harem-kenkokuki/",
    "https://komikcast.me/komik/shinsei-no-shiki/",
    "https://komikcast.me/komik/shinsengumi-requiem/",
    "https://komikcast.me/komik/shinsetsu-ookami-to-koushinryou-ookami-to-youhishi/",
    "https://komikcast.me/komik/shinyaku-marchen/",
    "https://komikcast.me/komik/shinyuu-ga-tokimeki-ketsuboushou-ni-natta/",
    "https://komikcast.me/komik/shinyuu-ouji-to-koshiginchaku/",
    "https://komikcast.me/komik/shiota-sensei-amai-chan/",
    "https://komikcast.me/komik/shiotaiou-no-sato-san-ga-ore-ni-dake-amai/",
    "https://komikcast.me/komik/shiranui-wa-amaekata-ga-wakaranai/",
    "https://komikcast.me/komik/shiro-madoushi-syrup-san/",
    "https://komikcast.me/komik/shiro-majutsushi-wa-yuusha-no-level-wo-agetakunai/",
    "https://komikcast.me/komik/shiro-no-koukoku-monogatari/",
    "https://komikcast.me/komik/shiro-seijo-to-kuro-bokushi/",
    "https://komikcast.me/komik/shirokuma-tensei/",
    "https://komikcast.me/komik/shishidou-san-ni-shikararetai/",
    "https://komikcast.me/komik/shishou-ni-saiminjutsu-o-kakete-iu-koto-o-kikasete-mita/",
    "https://komikcast.me/komik/shishunki-bitter-change/",
    "https://komikcast.me/komik/shishunki-na-adam-evil-eyes/",
    "https://komikcast.me/komik/shishunki-no-iron-maiden/",
    "https://komikcast.me/komik/shishunki-chan-no-shitsukekata/",
    "https://komikcast.me/komik/shitai-no-karen-san/",
    "https://komikcast.me/komik/shitei-bouryoku-shoujo-shiomi-chan/",
    "https://komikcast.me/komik/shitennou-sai-jakudatta-ore-tensei-shitanode-heionna-seikatsu-wo-nozomu/",
    "https://komikcast.me/komik/shitsugyou-kenja-no-nariagari/",
    "https://komikcast.me/komik/shitsurengo-kenaku-datta-osananajimi-ga-sato-kashi-mitai-ni-amai-sugar-after-bitter/",
    "https://komikcast.me/komik/shitty-story-of-a-super-loser-in-love/",
    "https://komikcast.me/komik/shiunji-ke-no-kodomo-tachi/",
    "https://komikcast.me/komik/shizuku-chans-a-real-angel/",
    "https://komikcast.me/komik/shogi-senpai/",
    "https://komikcast.me/komik/shojo-akuma-to-naruniha/",
    "https://komikcast.me/komik/shokei-shoujo-no-ikirumichi/",
    "https://komikcast.me/komik/shoki-skill-ga-benri-sugite-isekai-seikatsu-ga-tanoshisugiru/",
    "https://komikcast.me/komik/shokuba-to-jitaku-de-gyappu-no-aru-papa/",
    "https://komikcast.me/komik/shokubutsu-mahou-chito-de-nonbiri-ryoshu-seikatsu-hajimemasu-zense-no-chishiki-o-kushi-shite-nogyo-shitara-gyakuten-jinsei-hajimatta-kudan/",
    "https://komikcast.me/komik/shokubutsu-monster-musume-nikki/",
    "https://komikcast.me/komik/shokugeki-no-sanji/",
    "https://komikcast.me/komik/shokugeki-no-souma/",
    "https://komikcast.me/komik/shokushu-majutsu-shi-no-nariagari/",
    "https://komikcast.me/komik/shopping-agent-in-heaven/",
    "https://komikcast.me/komik/shota-and-gal/",
    "https://komikcast.me/komik/shotgun-boy/",
    "https://komikcast.me/komik/shougakusei-ga-mama-demo-ii-desu-ka/",
    "https://komikcast.me/komik/shougatsu-yasumi-ni-kisei-shite-juumai-no-jk-ni-okane-o-ageru-hanashi/",
    "https://komikcast.me/komik/shoujo-jiten/",
    "https://komikcast.me/komik/shoujo-kishidan-x-knight-tale/",
    "https://komikcast.me/komik/shoujotachi-wa-kouya-wo-mezasu-yukidoke-no-oto/",
    "https://komikcast.me/komik/shoukan-sareta-kenja-wa-isekai-o-iku-saikyouna-no-wa-fuyou-zaiko-no-aitemudeshita/",
    "https://komikcast.me/komik/shoukan-suru-sekai/",
    "https://komikcast.me/komik/shounen-no-abyss/",
    "https://komikcast.me/komik/shounen-wo-kau-sweet-days-with-a-boy/",
    "https://komikcast.me/komik/shounen-chotto-sabotteko/",
    "https://komikcast.me/komik/shounin-yuusha-wa-isekai-o-gyuujiru-saibai-skill-de-nandemo-fuyashi-chaimasu/",
    "https://komikcast.me/komik/shourai-kekkon-shiyoune-to-yakusoku-shita-you-najimi-ga-tsurugi-hijiri-ninatte-kaette-kita/",
    "https://komikcast.me/komik/shouraiteki-ni-shinde-kure/",
    "https://komikcast.me/komik/shouwa-otome-otogibanashi/",
    "https://komikcast.me/komik/show-me-the-lucky-chan/",
    "https://komikcast.me/komik/show-me-the-money/",
    "https://komikcast.me/komik/shrink-seishinkai-yowai/",
    "https://komikcast.me/komik/shugoi-ne-shugorei-san/",
    "https://komikcast.me/komik/shujinkou-janai/",
    "https://komikcast.me/komik/shukan-brick/",
    "https://komikcast.me/komik/shumatsu-no-sadako-san/",
    "https://komikcast.me/komik/shunkan-gradation/",
    "https://komikcast.me/komik/shura-sword-sovereign/",
    "https://komikcast.me/komik/shurabara-end/",
    "https://komikcast.me/komik/shutter-gai-no-sakura-hime/",
    "https://komikcast.me/komik/shuuen-no-shiori/",
    "https://komikcast.me/komik/shuukyuu-shoujo/",
    "https://komikcast.me/komik/shuumatsu-no-laughter/",
    "https://komikcast.me/komik/shuumatsu-no-valkyrie/",
    "https://komikcast.me/komik/shuumatsu-touring/",
    "https://komikcast.me/komik/shuumatsu-wa-aoi-haru/",
    "https://komikcast.me/komik/shy/",
    "https://komikcast.me/komik/siariz-no-shugosha/",
    "https://komikcast.me/komik/siblings-with-a-mountain-man/",
    "https://komikcast.me/komik/sichuan-chef-and-brave-girl-in-another-world/",
    "https://komikcast.me/komik/sick-prince-depends-on-me-to-continue-his-life/",
    "https://komikcast.me/komik/sijin/",
    "https://komikcast.me/komik/silent-night/",
    "https://komikcast.me/komik/silent-witch-chinmoku-no-majo-no-kakushigoto/",
    "https://komikcast.me/komik/silver-demon-king/",
    "https://komikcast.me/komik/silver-plan-to-redo-from-jk/",
    "https://komikcast.me/komik/silver-spoon/",
    "https://komikcast.me/komik/sinoalice/",
    "https://komikcast.me/komik/sinsu-jeil-sword/",
    "https://komikcast.me/komik/siscon-ani-brocon-imouto-ga-shoujiki-ni-nattara/",
    "https://komikcast.me/komik/siscon-onee-chan-to-ki-ni-shinai-imouto/",
    "https://komikcast.me/komik/sisters-yuri/",
    "https://komikcast.me/komik/six-princesses-fall-in-love-with-god-guardian/",
    "https://komikcast.me/komik/skeeter-rabbit/",
    "https://komikcast.me/komik/skeleton-soldier-couldnt-protect-the-dungeon/",
    "https://komikcast.me/komik/sket-dance/",
    "https://komikcast.me/komik/skill-of-lure-end/",
    "https://komikcast.me/komik/skill-unparalleled/",
    "https://komikcast.me/komik/skip-beat/",
    "https://komikcast.me/komik/skip-to-loafer/",
    "https://komikcast.me/komik/sky-blue/",
    "https://komikcast.me/komik/skyfire-avenue/",
    "https://komikcast.me/komik/slam-dunk/",
    "https://komikcast.me/komik/slave-b/",
    "https://komikcast.me/komik/slave-of-black-knight/",
    "https://komikcast.me/komik/sleeping-ranker/",
    "https://komikcast.me/komik/slime-life/",
    "https://komikcast.me/komik/slime-taoshite-300-nen-shiranai-uchi-ni-level-max-ni-nattemashita/",
    "https://komikcast.me/komik/slow-loop/",
    "https://komikcast.me/komik/slow-prison-life/",
    "https://komikcast.me/komik/smartphone-in-a-love-serialization/",
    "https://komikcast.me/komik/smartphone-chan-in-love/",
    "https://komikcast.me/komik/smokin-parade/",
    "https://komikcast.me/komik/snowball-earth/",
    "https://komikcast.me/komik/soara-and-monsters-house/",
    "https://komikcast.me/komik/soaring-heavenly-dragon/",
    "https://komikcast.me/komik/soaring-sword-odyssey/",
    "https://komikcast.me/komik/soba-ni-ite-mo-iinda-ze/",
    "https://komikcast.me/komik/sobiwaku-zero-no-saikyou-kenshi-demo-noroi-no-soubi-kawai-nara-9999-ko-tsuke-hodai/",
    "https://komikcast.me/komik/social-game-girlfriend/",
    "https://komikcast.me/komik/sodatechi-maou/",
    "https://komikcast.me/komik/sokuochi-mayuri-chan/",
    "https://komikcast.me/komik/sokuochi-mayuri-chan-serialization/",
    "https://komikcast.me/komik/sokushi-cheat-ga-saikyou-sugite-isekai-no-yatsura-ga-marude-aite-ni-naranai-n-desu-ga/",
    "https://komikcast.me/komik/sokushi-to-hametsu-no-saijaku-majutsushi/",
    "https://komikcast.me/komik/solanin/",
    "https://komikcast.me/komik/solo-player/",
    "https://komikcast.me/komik/solo-leveling-white-gwain/",
    "https://komikcast.me/komik/solo-max-level-newbie/",
    "https://komikcast.me/komik/solo-shinkan-no-vrmmo-boukenki/",
    "https://komikcast.me/komik/somali-mori-no-kamisama/",
    "https://komikcast.me/komik/somehow-i-started-living-with-a-neet-otaku-kunoichi/",
    "https://komikcast.me/komik/someone-bother-my-on-hook-life/",
    "https://komikcast.me/komik/son-in-law-does-cheap-cultivation/",
    "https://komikcast.me/komik/son-of-goblin/",
    "https://komikcast.me/komik/son-make-trouble-quickly/",
    "https://komikcast.me/komik/song-of-the-long-march/",
    "https://komikcast.me/komik/song-of-the-sky-walkers/",
    "https://komikcast.me/komik/sono-bisque-doll-wa-koi-wo-suru/",
    "https://komikcast.me/komik/sono-koi-wa-ichigo-no-youni/",
    "https://komikcast.me/komik/sono-monban-saikyou-nitsuki-tsuihou-sareta-bougyo-ryoku-9999-no-senshi-outo-no-monban-toshite-musou-suru/",
    "https://komikcast.me/komik/sono-mono-nochi-ni/",
    "https://komikcast.me/komik/sono-mono-nochi-ninariie-shinichirou/",
    "https://komikcast.me/komik/sono-munou-jitsuha-sekai-saikyou-no-mahoutsukai/",
    "https://komikcast.me/komik/sono-ossan-isekai-de-nishuume-play-wo-mankitsuchuu/",
    "https://komikcast.me/komik/sora-kara-onna-no-ko-ga/",
    "https://komikcast.me/komik/sora-no-otoshimono/",
    "https://komikcast.me/komik/sorairo-no-graffiti/",
    "https://komikcast.me/komik/sorajirous-untitled-cat-maid/",
    "https://komikcast.me/komik/sorcerer-maiden/",
    "https://komikcast.me/komik/sore-wa-rei-no-shiwaza-desu/",
    "https://komikcast.me/komik/sore-wa-tada-no-senpai-no-chinko/",
    "https://komikcast.me/komik/soredemo-ayumu-wa-yosetekuru/",
    "https://komikcast.me/komik/soredemo-boku-wa-kimi-ga-suki/",
    "https://komikcast.me/komik/soredemo-machi-wa-mawatteiru/",
    "https://komikcast.me/komik/soretomo-time-leap-ni-suru/",
    "https://komikcast.me/komik/sou-iu-toshigoro-ni-nacchatta-toshi-no-sa-shimai/",
    "https://komikcast.me/komik/soukon-no-shoujo-to-sourei-no-tabi/",
    "https://komikcast.me/komik/soukyuu-no-ariadne/",
    "https://komikcast.me/komik/soukyuu-no-lapis-lazuli/",
    "https://komikcast.me/komik/soukyuu-no-shihai-sha-isekai-oppai-musouden/",
    "https://komikcast.me/komik/soul-anomaly/",
    "https://komikcast.me/komik/soul-cartel/",
    "https://komikcast.me/komik/soul-contract/",
    "https://komikcast.me/komik/soul-eater-not/",
    "https://komikcast.me/komik/soul-flourishing-heaven/",
    "https://komikcast.me/komik/soul-land/",
    "https://komikcast.me/komik/soul-land-legend-gods-realm/",
    "https://komikcast.me/komik/soul-land-ii/",
    "https://komikcast.me/komik/soul-land-3/",
    "https://komikcast.me/komik/soul-land-iv-the-ultimate-combat/",
    "https://komikcast.me/komik/soul-land-legend-of-the-tangs-hero/",
    "https://komikcast.me/komik/soul-land-v-rebirth-of-tang-san/",
    "https://komikcast.me/komik/sounan-desu-ka/",
    "https://komikcast.me/komik/sousei-no-onmyouji/",
    "https://komikcast.me/komik/sousei-no-onmyouji-adashino-benio-hen/",
    "https://komikcast.me/komik/sousou-no-frieren/",
    "https://komikcast.me/komik/soutaisei-moteron/",
    "https://komikcast.me/komik/souyoku-no-busou-tsukai/",
    "https://komikcast.me/komik/sozai-saishuka-no-isekai-ryokouki/",
    "https://komikcast.me/komik/souzou-renkinjutsushi-wa-jiyuu-wo-ouka-suru-kokyou-wo-tsuihou-saretara-maou-no-ohizamoto-de-chouzetsu-kouka-no-magic-item-zukuri-houdai-ni-narimashita/",
    "https://komikcast.me/komik/sozoshu-nano-de-motto-yasashikute-kudasai/",
    "https://komikcast.me/komik/space-brothers/",
    "https://komikcast.me/komik/space-time-prisoner/",
    "https://komikcast.me/komik/spare-me-great-lord/",
    "https://komikcast.me/komik/sperman/",
    "https://komikcast.me/komik/spirit-blade-mountain/",
    "https://komikcast.me/komik/spirit-cage-legend-of-yuekui/",
    "https://komikcast.me/komik/spirit-circle/",
    "https://komikcast.me/komik/spirit-migration/",
    "https://komikcast.me/komik/spirit-of-sakura-tree/",
    "https://komikcast.me/komik/spirit-of-the-lord/",
    "https://komikcast.me/komik/spirit-pet-creation-simulator/",
    "https://komikcast.me/komik/spirit-photographer-saburo-kono/",
    "https://komikcast.me/komik/spirit-rider/",
    "https://komikcast.me/komik/spirit-sword-sovereign/",
    "https://komikcast.me/komik/spirit-warriors/",
    "https://komikcast.me/komik/spotlight/",
    "https://komikcast.me/komik/spring-weapon-no-01/",
    "https://komikcast.me/komik/springtime-for-blossom/",
    "https://komikcast.me/komik/spy-room/",
    "https://komikcast.me/komik/spy-x-family/",
    "https://komikcast.me/komik/spy-x-family-anya-and-damian-doujinshi/",
    "https://komikcast.me/komik/sss-class-gacha-hunter/",
    "https://komikcast.me/komik/strs/",
    "https://komikcast.me/komik/stage-s/",
    "https://komikcast.me/komik/stairs/",
    "https://komikcast.me/komik/stalker-koui-ga-barete-jinsei-shuuryou-otoko/",
    "https://komikcast.me/komik/stalker-x-stalker/",
    "https://komikcast.me/komik/stalkers/",
    "https://komikcast.me/komik/star-a-plaque/",
    "https://komikcast.me/komik/star-dream-idol-project/",
    "https://komikcast.me/komik/star-martial-god-technique/",
    "https://komikcast.me/komik/star-sign-in-super-god-seal-card/",
    "https://komikcast.me/komik/star-sign-in-to-supreme-dantian/",
    "https://komikcast.me/komik/stardust-telepath/",
    "https://komikcast.me/komik/stardust-wink/",
    "https://komikcast.me/komik/start-become-a-plug-in/",
    "https://komikcast.me/komik/start-raising-dragons-from-today/",
    "https://komikcast.me/komik/starting-after-thousandth-rebirth/",
    "https://komikcast.me/komik/starting-from-guhuoniao/",
    "https://komikcast.me/komik/starting-from-maximum-charm-point-1/",
    "https://komikcast.me/komik/starting-from-zero-in-doomsday/",
    "https://komikcast.me/komik/starting-out-as-friends-with-a-yankee-girl/",
    "https://komikcast.me/komik/stateless-those-without-existence/",
    "https://komikcast.me/komik/stay-awake-all-night/",
    "https://komikcast.me/komik/stay-home-romantic-comedy/",
    "https://komikcast.me/komik/stealing-candy-from-my-friend/",
    "https://komikcast.me/komik/stealth-symphony/",
    "https://komikcast.me/komik/steel-fist-attack/",
    "https://komikcast.me/komik/steinsgate/",
    "https://komikcast.me/komik/stella-no-mahou/",
    "https://komikcast.me/komik/stellar-transformations/",
    "https://komikcast.me/komik/step-by-step/",
    "https://komikcast.me/komik/stepping-through-the-fairy-river/",
    "https://komikcast.me/komik/storm-inn/",
    "https://komikcast.me/komik/story-of-a-housewife-who-has-too-much-libido/",
    "https://komikcast.me/komik/story-of-bones-and-ashes/",
    "https://komikcast.me/komik/story-of-the-white-mage-who-can-read-the-swordmans-heart/",
    "https://komikcast.me/komik/strategic-lovers/",
    "https://komikcast.me/komik/stravaganza-isai-no-hime/",
    "https://komikcast.me/komik/strawberry-fields-wo-mou-ichido/",
    "https://komikcast.me/komik/stresser/",
    "https://komikcast.me/komik/stretch/",
    "https://komikcast.me/komik/strike-or-gutter/",
    "https://komikcast.me/komik/striving-for-the-luxury-liner-get-that-rich/",
    "https://komikcast.me/komik/strobe-edge/",
    "https://komikcast.me/komik/strong-gale-mad-dragon/",
    "https://komikcast.me/komik/strongest-abandoned-son/",
    "https://komikcast.me/komik/strongest-anti-m-e-t-a/",
    "https://komikcast.me/komik/strongest-divine-doctor-mixed-city/",
    "https://komikcast.me/komik/strongest-evolution-of-zombie/",
    "https://komikcast.me/komik/strongest-eye-peerless-perspective/",
    "https://komikcast.me/komik/strongest-fighter/",
    "https://komikcast.me/komik/strongest-leveling/",
    "https://komikcast.me/komik/strongest-master/",
    "https://komikcast.me/komik/strongest-npc-alliance/",
    "https://komikcast.me/komik/strongest-soft-rice-man/",
    "https://komikcast.me/komik/strongest-son-in-law/",
    "https://komikcast.me/komik/strongest-system/",
    "https://komikcast.me/komik/strongest-system-yan-luo/",
    "https://komikcast.me/komik/strongest-transport-system/",
    "https://komikcast.me/komik/studio-apartment-good-lightning-angel-included/",
    "https://komikcast.me/komik/sub-zero/",
    "https://komikcast.me/komik/success-story-of-the-omnipotent-soldier/",
    "https://komikcast.me/komik/succubus-gakuen-no-inu/",
    "https://komikcast.me/komik/succubus-ni-tensei-shita-node-milk-wo-shiborimasu/",
    "https://komikcast.me/komik/succubus-no-yuri-na-hanashi/",
    "https://komikcast.me/komik/such-a-cute-spy/",
    "https://komikcast.me/komik/sudachi-no-maoujo/",
    "https://komikcast.me/komik/sugar-dog/",
    "https://komikcast.me/komik/sugar-momma-yuri-mothers-day-with-an-older-baby-faced-sugar-momma-and-a-well-behaved-high-schooler/",
    "https://komikcast.me/komik/suginami-ku-isekai-dungeon-kouryaku-ka/",
    "https://komikcast.me/komik/sugoi-smartphone/",
    "https://komikcast.me/komik/suicide-girl/",
    "https://komikcast.me/komik/sukedachi-nine/",
    "https://komikcast.me/komik/suki-desu-suzuki-kun/",
    "https://komikcast.me/komik/suki-koso-momo-no-jouzu-nare/",
    "https://komikcast.me/komik/suki-sugiru-kara-kanojo-ijou-no-imouto-toshite-aishite-kudasai/",
    "https://komikcast.me/komik/suki-x-suki/",
    "https://komikcast.me/komik/sukinahito-no-tame-ni-hentai-ni-naru-koto-o-kimeta-hanashi/",
    "https://komikcast.me/komik/sukinako-ga-megane-wo-wasureta/",
    "https://komikcast.me/komik/summer-basketball/",
    "https://komikcast.me/komik/summertime-render/",
    "https://komikcast.me/komik/summon-swordsman-school/",
    "https://komikcast.me/komik/sun-ken-rock/",
    "https://komikcast.me/komik/sunami-yuuko-to-yuri-na-hitobito/",
    "https://komikcast.me/komik/sunny/",
    "https://komikcast.me/komik/sunoharasou-no-kanrinin-san/",
    "https://komikcast.me/komik/super-alloy-warship-god/",
    "https://komikcast.me/komik/super-appraiser/",
    "https://komikcast.me/komik/super-bodyguard/",
    "https://komikcast.me/komik/super-cub/",
    "https://komikcast.me/komik/super-cube/",
    "https://komikcast.me/komik/super-devouring-system/",
    "https://komikcast.me/komik/super-differentiation/",
    "https://komikcast.me/komik/super-doctor-metropolis/",
    "https://komikcast.me/komik/super-dragon-ball-heroes-dark-demon-realm-mission/",
    "https://komikcast.me/komik/super-dragon-ball-heroes-universe-mission/",
    "https://komikcast.me/komik/super-earnings-treasure/",
    "https://komikcast.me/komik/super-genius-material/",
    "https://komikcast.me/komik/super-god-card-maker/",
    "https://komikcast.me/komik/super-god-gene/",
    "https://komikcast.me/komik/super-god-starts-from-falling-in-love/",
    "https://komikcast.me/komik/super-keyboard-man/",
    "https://komikcast.me/komik/super-mad-god/",
    "https://komikcast.me/komik/super-mechanic/",
    "https://komikcast.me/komik/super-medical-fairy-in-the-city/",
    "https://komikcast.me/komik/super-money-worship-system/",
    "https://komikcast.me/komik/super-player/",
    "https://komikcast.me/komik/super-ruin/",
    "https://komikcast.me/komik/super-school-doctor/",
    "https://komikcast.me/komik/super-security-in-the-city/",
    "https://komikcast.me/komik/super-shared-boyfriend-system/",
    "https://komikcast.me/komik/super-soldier-dragon-soldier/",
    "https://komikcast.me/komik/super-system/",
    "https://komikcast.me/komik/super-wechat/",
    "https://komikcast.me/komik/super-wild-genius/",
    "https://komikcast.me/komik/superior-healer-with-inferior-mark/",
    "https://komikcast.me/komik/superman-high-school-class-f/",
    "https://komikcast.me/komik/supernova/",
    "https://komikcast.me/komik/supreme-demon/",
    "https://komikcast.me/komik/supreme-demon-return/",
    "https://komikcast.me/komik/supreme-god-emperor-of-the-red-packet-supreme-red-packet-emperor/",
    "https://komikcast.me/komik/supreme-gods-eye/",
    "https://komikcast.me/komik/supreme-godly-system/",
    "https://komikcast.me/komik/supreme-magic-weapon/",
    "https://komikcast.me/komik/supreme-martial-chef/",
    "https://komikcast.me/komik/supreme-mouth-cannon/",
    "https://komikcast.me/komik/supreme-rebirth/",
    "https://komikcast.me/komik/supreme-spirit-master/",
    "https://komikcast.me/komik/supreme-taoist/",
    "https://komikcast.me/komik/supreme-taoist-2021/",
    "https://komikcast.me/komik/surichigai-wa-fuufu-no-hajimari/",
    "https://komikcast.me/komik/surrounded-by-monsters-i-found-a-little-witch/",
    "https://komikcast.me/komik/survival-shounen-s-no-kiroku/",
    "https://komikcast.me/komik/survive-romance/",
    "https://komikcast.me/komik/surviving-as-a-fish/",
    "https://komikcast.me/komik/surviving-in-an-action-manhwa/",
    "https://komikcast.me/komik/suterare-shiro-mahou-tsukai-no-koucha-seikatsu-the-tea-life-of-an-abandoned-white-witch/",
    "https://komikcast.me/komik/suterare-yuusha-wa-kitakuchuu/",
    "https://komikcast.me/komik/suterareta-tensei-kenja-mamono-no-mori-de-saikyou-no-dai-ma-teikoku-o-tsukuriageru/",
    "https://komikcast.me/komik/suuji-de-sukuu-jyakushou-kokka/",
    "https://komikcast.me/komik/suzuka/",
    "https://komikcast.me/komik/suzuki-kun-wa-miteiru-kami-appli-de-jk-no-kokoro-wo-nozoitara-do-%e2%97%8b%e2%97%8b-de-osowareta/",
    "https://komikcast.me/komik/suzuki-san-wa-tada-shizuka-ni-kurashitai/",
    "https://komikcast.me/komik/swallow-the-whole-world/",
    "https://komikcast.me/komik/swap-swap/",
    "https://komikcast.me/komik/sweat-and-soap/",
    "https://komikcast.me/komik/sweet-candy/",
    "https://komikcast.me/komik/sweet-escape/",
    "https://komikcast.me/komik/sweet-first-love/",
    "https://komikcast.me/komik/sweet-heart-of-girl/",
    "https://komikcast.me/komik/sweet-plunder/",
    "https://komikcast.me/komik/sweet-salty/",
    "https://komikcast.me/komik/sweet-x-trouble/",
    "https://komikcast.me/komik/sweety/",
    "https://komikcast.me/komik/swing/",
    "https://komikcast.me/komik/switch/",
    "https://komikcast.me/komik/sword-and-magic-the-waking-hero/",
    "https://komikcast.me/komik/sword-art-online-ordinal-scale/",
    "https://komikcast.me/komik/sword-art-online-alternative-gun-gale-online/",
    "https://komikcast.me/komik/sword-art-online-girls-ops/",
    "https://komikcast.me/komik/sword-art-online-progressive/",
    "https://komikcast.me/komik/sword-art-online-progressive-canon-of-the-golden-rule/",
    "https://komikcast.me/komik/sword-art-online-project-alicization/",
    "https://komikcast.me/komik/sword-dance-online/",
    "https://komikcast.me/komik/sword-fanatic-wanders-through-the-night/",
    "https://komikcast.me/komik/sword-gods-life-is-not-that-boring/",
    "https://komikcast.me/komik/sword-legend/",
    "https://komikcast.me/komik/sword-master-of-soul-spirit/",
    "https://komikcast.me/komik/sword-tiara-and-high-heels/",
    "https://komikcast.me/komik/swordmasters-youngest-son/",
    "https://komikcast.me/komik/syakkin-daiou-wa-maou-o-taosu/",
    "https://komikcast.me/komik/system-engineer/",
    "https://komikcast.me/komik/system-rules/",
    "https://komikcast.me/komik/taberare-usa/",
    "https://komikcast.me/komik/taberu-dake-de-level-up-damegami-to-issho-ni-isekai-musou/",
    "https://komikcast.me/komik/tabi-to-michizure/",
    "https://komikcast.me/komik/tachiagare-orc-san/",
    "https://komikcast.me/komik/tachibanakan-triangle/",
    "https://komikcast.me/komik/tacit/",
    "https://komikcast.me/komik/tada-no-kabane-no-youda-to-iwarete-ikusie-sou-kizuitara-saikyou-no-undead-ni-natteta/",
    "https://komikcast.me/komik/tada-shiawasena-isekai-kazoku-seikatsu/",
    "https://komikcast.me/komik/tadashi-ore-wa-heroine-toshite/",
    "https://komikcast.me/komik/tadashii-kodomo-no-tsukurikata/",
    "https://komikcast.me/komik/tadokoro-san/",
    "https://komikcast.me/komik/taebaek-the-tutorial-man/",
    "https://komikcast.me/komik/taikoku-cheat-nara-isekai-seifuku-mo-rakushou-desu-yo/",
    "https://komikcast.me/komik/taimashi-akuma-chan/",
    "https://komikcast.me/komik/taishou-otome-otogibanashi/",
    "https://komikcast.me/komik/taiyou-no-ie/",
    "https://komikcast.me/komik/taiyou-to-tsuki-no-hagane/",
    "https://komikcast.me/komik/takachiho-honoka-senpai-ga-sukide-sukide-iroiro-gamandekinai/",
    "https://komikcast.me/komik/takamagahara/",
    "https://komikcast.me/komik/takane-no-hana-nara-ochitekoi/",
    "https://komikcast.me/komik/takane-no-hana-wa-usotsuki-desu/",
    "https://komikcast.me/komik/takane-san-kimi-no-koto-sukirashii-yo/",
    "https://komikcast.me/komik/takarakuji-de-40-oku-atatta-n-dakedo-isekai-ni-ijuusuru/",
    "https://komikcast.me/komik/takayukashiki-shoujo/",
    "https://komikcast.me/komik/take-off-your-mask-ishikawa/",
    "https://komikcast.me/komik/take-the-crown/",
    "https://komikcast.me/komik/take-the-girl-to-repair-fairy-in-the-city/",
    "https://komikcast.me/komik/take-your-mommy-home/",
    "https://komikcast.me/komik/takkoku/",
    "https://komikcast.me/komik/takopii-no-genzai/",
    "https://komikcast.me/komik/tale-of-a-scribe-who-retires-to-the-countryside/",
    "https://komikcast.me/komik/tale-of-eun-aran/",
    "https://komikcast.me/komik/tale-of-the-rune-winterer/",
    "https://komikcast.me/komik/talent-swallowing-magician/",
    "https://komikcast.me/komik/talented-genius/",
    "https://komikcast.me/komik/talentless-nana/",
    "https://komikcast.me/komik/tales-of-an-exorcist/",
    "https://komikcast.me/komik/tales-of-berseria/",
    "https://komikcast.me/komik/tales-of-berseria-4koma-kings/",
    "https://komikcast.me/komik/tales-of-demons-and-gods/",
    "https://komikcast.me/komik/tales-of-the-wandering-immortal/",
    "https://komikcast.me/komik/tamamo-no-koi/",
    "https://komikcast.me/komik/tamen-de-gushi/",
    "https://komikcast.me/komik/taming-the-possessive-girl/",
    "https://komikcast.me/komik/tanaka-ke-tensei-suru/",
    "https://komikcast.me/komik/tanaka-no-atelier/",
    "https://komikcast.me/komik/tanaka-no-isekai-nariagari/",
    "https://komikcast.me/komik/tanaka-the-wizard/",
    "https://komikcast.me/komik/tanaka-kun-wa-itsumo-kedaruge/",
    "https://komikcast.me/komik/tang-yin/",
    "https://komikcast.me/komik/tang-yin-in-another-realm-ii-the-rise-of-feng-nation/",
    "https://komikcast.me/komik/tantei-no-tantei/",
    "https://komikcast.me/komik/tantei-wa-mou-shindeiru/",
    "https://komikcast.me/komik/taoist-master-hoguk/",
    "https://komikcast.me/komik/target-1-billion-points-open-the-ultimate-game-of-second-life/",
    "https://komikcast.me/komik/tasogare-memorandum/",
    "https://komikcast.me/komik/tate-no-yusha-no-to-aru-1-nichi/",
    "https://komikcast.me/komik/tate-no-yuusha-no-nariagari/",
    "https://komikcast.me/komik/tate-no-yuusha-no-nariagari-anthology-raphtalia-to-issho/",
    "https://komikcast.me/komik/tate-no-yuusha-no-nariagari-anthology-filo-to-issho/",
    "https://komikcast.me/komik/tatoe-hai-ni-nattemo/",
    "https://komikcast.me/komik/tatoe-todokanu-ito-da-toshitemo/",
    "https://komikcast.me/komik/tatoeba-last-dungeon-mae-no-mura-no-shounen-ga-joban-no-machi-de-kurasu-youna-monogatari/",
    "https://komikcast.me/komik/tatoeba-ore-ga-champion-kara-oujo-no-himo-ni-job-change-shita-to-shite/",
    "https://komikcast.me/komik/tawawa-na-oppai-ha-suki-desu-ka-kyonyuu-shoujo-anthology-comic/",
    "https://komikcast.me/komik/taxi/",
    "https://komikcast.me/komik/teach-me-what-happiness-is/",
    "https://komikcast.me/komik/tearmoon-empire-story/",
    "https://komikcast.me/komik/tech-giant-come-to-cultivate-immortal/",
    "https://komikcast.me/komik/tedama-ni-toritai-kurokiya-san/",
    "https://komikcast.me/komik/teenage-swordsman/",
    "https://komikcast.me/komik/tegami/",
    "https://komikcast.me/komik/teihen-boukensha-da-kedo-mahou-wo-kiwamete-miru-koto-ni-shita-munou-skill-kara-kami-skill-ni-shinka-shita-mahou-souzou-to-item-sakusei-de-musou-suru/",
    "https://komikcast.me/komik/teihen-ryoushu-no-kanchigai-eiyuutan/",
    "https://komikcast.me/komik/teisou-gyakuten-sekai/",
    "https://komikcast.me/komik/teito-seihai-kitan-fate-type-redline/",
    "https://komikcast.me/komik/tejina-senpai/",
    "https://komikcast.me/komik/tekito-na-maid-no-oneesan/",
    "https://komikcast.me/komik/tempat-lapor/",
    "https://komikcast.me/komik/temple/",
    "https://komikcast.me/komik/ten-second-kiss-cooldown-game/",
    "https://komikcast.me/komik/ten-sense-of-ranger/",
    "https://komikcast.me/komik/ten-thousand-paths-to-becoming-a-god/",
    "https://komikcast.me/komik/ten-thousand-races-battle/",
    "https://komikcast.me/komik/tenchura-tensei-shitara-slime-datta-ken/",
    "https://komikcast.me/komik/tengoku-daimakyou/",
    "https://komikcast.me/komik/teni-shippai-seikou/",
    "https://komikcast.me/komik/tenkaichi-nihon-saikyou-bugeisha-ketteisen/",
    "https://komikcast.me/komik/tenki-no-ko/",
    "https://komikcast.me/komik/tenkuu-no-shiro-o-moratta-no-de-isekai-de-tanoshiku-asobitai/",
    "https://komikcast.me/komik/tenkuu-no-tobira/",
    "https://komikcast.me/komik/tenkuu-shinpan/",
    "https://komikcast.me/komik/tennen-gyaru-kawaguchi-san/",
    "https://komikcast.me/komik/tenohira-kaitaku-mura-de-isekai-kenkokuki-fueteku-yome-tachi-to-nonbiri-mujintou-life/",
    "https://komikcast.me/komik/tensai-kagaku-sha-tachi-ga-saikou-no-robotto-wo-tsukutta/",
    "https://komikcast.me/komik/tensai-ouji-no-akaji-kokka-saisei-jutsu-souda-baikoku-shiyou/",
    "https://komikcast.me/komik/tensai-saijaku-mamono-tsukai-wa-kikan-shitai-tsukikage/",
    "https://komikcast.me/komik/tensei-goblin-da-kedo-shitsumon-aru/",
    "https://komikcast.me/komik/tensei-gotoki-de-nigerareru-to-demo-niisan/",
    "https://komikcast.me/komik/tensei-kenja-no-isekai-raifu-daini-no-shokugyo-wo-ete-sekai-saikyou-ni-narimashita/",
    "https://komikcast.me/komik/tensei-kenja-wa-musume-to-kurasu/",
    "https://komikcast.me/komik/tensei-kizoku-no-isekai-boukenroku-jichou-wo-shiranai-kamigami-no-shit/",
    "https://komikcast.me/komik/tensei-kusushi-wa-isekai-o-meguru/",
    "https://komikcast.me/komik/tensei-kyuuketsukisan-wa-ohirune-ga-shitai/",
    "https://komikcast.me/komik/tensei-majo-wa-horobi-wo-tsugeru/",
    "https://komikcast.me/komik/tensei-ouji-wa-daraketai/",
    "https://komikcast.me/komik/tensei-ouji-wa-renkinjutsushi-to-nari-koukoku-suru/",
    "https://komikcast.me/komik/tensei-oujo-to-tensai-reijou-no-mahou-kakumei/",
    "https://komikcast.me/komik/tensei-pandemic/",
    "https://komikcast.me/komik/tensei-ryoushu-no-yuuryou-kaitaku-zensei-no-kioku-o-ikashite-white-ni-tsutometara-yuunou-na-jinzai-ga-atsumari-sugimashita/",
    "https://komikcast.me/komik/tensei-saki-ga-zannen-ouji-datta-ken-ima-wa-fukkin-1-kai-mo-dekinai-kedo-yasete-isekai-sukuimasu/",
    "https://komikcast.me/komik/tensei-shita-kedo-cheat-nouryoku-wo-tsukawanai-de-ikite-miru/",
    "https://komikcast.me/komik/tensei-shita-shoujo-no-tenkeiteki-na-jinsei/",
    "https://komikcast.me/komik/tensei-shitara-akari-dake-ga-slime-datta-ken/",
    "https://komikcast.me/komik/tensei-shitara-dai-nana-ouji-dattanode-kimamani-majutsu-o-kiwamemasu/",
    "https://komikcast.me/komik/tensei-shitara-dragon-no-tamago-datta-saikyou-igai-mezasanee/",
    "https://komikcast.me/komik/tensei-shitara-heishi-datta-akai-shinigami-to-yobareta-otoko-when-i-reincarnated-i-was-a-soldier-a-man-called-the-red-shinigami/",
    "https://komikcast.me/komik/tensei-shitara-ken-deshita/",
    "https://komikcast.me/komik/tensei-shitara-mura-musume-datta/",
    "https://komikcast.me/komik/tensei-shitara-slime-datta-ken/",
    "https://komikcast.me/komik/tensei-shitara-slime-datta-ken-ibun-makoku-gurashi-no-trinity/",
    "https://komikcast.me/komik/tensei-shitara-slime-datta-ken-clayman-revenge/",
    "https://komikcast.me/komik/tensei-shitara-slime-datta-ken-spin-off/",
    "https://komikcast.me/komik/tensei-shite-high-elf-ni-narimashitaga-slow-life-wa-120-nen-de-akimashita/",
    "https://komikcast.me/komik/tensei-shite-inaka-de-slowlife-wo-okuritai/",
    "https://komikcast.me/komik/tenseishichatta-yo/",
    "https://komikcast.me/komik/tenseishimashite-genzai-wa-jijo-degozaimasu/",
    "https://komikcast.me/komik/tenshoku-no-shinden-wo-hirakimashita/",
    "https://komikcast.me/komik/tensura-nikki-tensei-shitara-slime-datta-ken/",
    "https://komikcast.me/komik/termina/",
    "https://komikcast.me/komik/terra-formars-2/",
    "https://komikcast.me/komik/territory-management-for-the-first-time-by-the-adventurers-of-level-99/",
    "https://komikcast.me/komik/terror-man/",
    "https://komikcast.me/komik/terror-man-vs-revival-man/",
    "https://komikcast.me/komik/tesla-note/",
    "https://komikcast.me/komik/that-dragon-exchange-student-stands-out-more-than-me/",
    "https://komikcast.me/komik/that-girl-is-cute-but-dangerous/",
    "https://komikcast.me/komik/that-girl-is-not-just-cute/",
    "https://komikcast.me/komik/that-girl-you-fell-in-love-at-first-sight-is-a-crossdressing-boy/",
    "https://komikcast.me/komik/that-inferior-knight-actually-level-999/",
    "https://komikcast.me/komik/that-time-a-friendly-trio-had-a-sleepover/",
    "https://komikcast.me/komik/that-time-i-rented-a-little-sister/",
    "https://komikcast.me/komik/that-time-i-was-summoned-as-a-first-level-monster/",
    "https://komikcast.me/komik/the-7th-juror/",
    "https://komikcast.me/komik/the-8th-consciousness/",
    "https://komikcast.me/komik/the-abandoned-toy/",
    "https://komikcast.me/komik/the-adventurers-that-dont-believe-in-humanity-will-save-the-world/",
    "https://komikcast.me/komik/the-age-of-genes/",
    "https://komikcast.me/komik/the-alexis-empire-chronicle/",
    "https://komikcast.me/komik/the-android-exploded-when-receiving-emotions/",
    "https://komikcast.me/komik/the-angelic-transfer-student-and-mastophobia-kun/",
    "https://komikcast.me/komik/the-another-world-demon-kings-successor/",
    "https://komikcast.me/komik/the-awakening-of-the-gods/",
    "https://komikcast.me/komik/the-baby-isnt-yours/",
    "https://komikcast.me/komik/the-banished-villainess-living-the-leisurely-life-of-a-nun-making-revolutionary-church-food/",
    "https://komikcast.me/komik/the-beast-tamer-was-fired-from-his-childhood-friends-s-rank-party/",
    "https://komikcast.me/komik/the-beginning-of-journey/",
    "https://komikcast.me/komik/the-best-bride-in-the-west/",
    "https://komikcast.me/komik/the-best-skilled-surgeon-2/",
    "https://komikcast.me/komik/the-best-warrior-in-the-city/",
    "https://komikcast.me/komik/the-big-guys-come-to-cultivate-immortal/",
    "https://komikcast.me/komik/the-black-cat-who-became-the-director/",
    "https://komikcast.me/komik/the-black-june/",
    "https://komikcast.me/komik/the-black-haired-princess/",
    "https://komikcast.me/komik/the-blade-of-evolution-walking-alone-in-the-dungeon/",
    "https://komikcast.me/komik/the-blood-princess-and-the-knight/",
    "https://komikcast.me/komik/the-blood-sucking-girl-cant-suck-my-blood-kyuuketsu-reijou-wa-boku-no-chi-wo-suenai/",
    "https://komikcast.me/komik/the-book-of-lagier/",
    "https://komikcast.me/komik/the-book-of-life-and-death/",
    "https://komikcast.me/komik/the-boxer/",
    "https://komikcast.me/komik/the-boy-in-the-all-girls-school/",
    "https://komikcast.me/komik/the-boy-of-death/",
    "https://komikcast.me/komik/the-boy-who-awakened-a-new-fetish/",
    "https://komikcast.me/komik/the-boy-who-is-hated-by-ghosts/",
    "https://komikcast.me/komik/the-brave-tuber/",
    "https://komikcast.me/komik/the-breaker/",
    "https://komikcast.me/komik/eternal-force/",
    "https://komikcast.me/komik/the-breaker-new-wave/",
    "https://komikcast.me/komik/the-bride-of-barbaroi/",
    "https://komikcast.me/komik/the-brilliant-village-doctor/",
    "https://komikcast.me/komik/the-busybody-and-the-loner/",
    "https://komikcast.me/komik/the-careful-empress/",
    "https://komikcast.me/komik/the-case-of-me-a-pro-golfer-being-reincarnated-as-my-little-sisters-putter/",
    "https://komikcast.me/komik/the-challenger/",
    "https://komikcast.me/komik/the-chameleon-of-nibiiro/",
    "https://komikcast.me/komik/the-charm-of-soul-pets/",
    "https://komikcast.me/komik/the-chef-of-spirits/",
    "https://komikcast.me/komik/the-closer-i-get-the-further-away-you-are/",
    "https://komikcast.me/komik/the-comeback-of-the-demon-king-who-formed-a-demons-guild-after-being-vanquished-by-the-hero/",
    "https://komikcast.me/komik/the-comeback-path-of-princess-from-mars/",
    "https://komikcast.me/komik/the-condor-heroes/",
    "https://komikcast.me/komik/the-constellation-that-returned-from-hell-adapted/",
    "https://komikcast.me/komik/the-count-of-monte-cristo/",
    "https://komikcast.me/komik/the-courier-has-arrived/",
    "https://komikcast.me/komik/the-crawling-city/",
    "https://komikcast.me/komik/the-crazy-adventures-of-mystical-doctor/",
    "https://komikcast.me/komik/the-cuckoos-fiancee/",
    "https://komikcast.me/komik/the-cute-girl-sitting-next-to-me-is-trying-to-make-me-fall-in-love-with-her-as-a-way-to-ridicule-me-but-the-tables-were-turned-on-her-before-she-knew-it/",
    "https://komikcast.me/komik/the-cutest-girl-in-school-might-like-me/",
    "https://komikcast.me/komik/the-daily-life-of-immortal-king/",
    "https://komikcast.me/komik/the-daily-life-of-the-late-bloomer-tamer/",
    "https://komikcast.me/komik/the-dark-magician-transmigrates-after-66666-years/",
    "https://komikcast.me/komik/the-darkness-was-comfortable-for-me/",
    "https://komikcast.me/komik/the-davil-ring-king/",
    "https://komikcast.me/komik/the-day-i-started-fanboying-for-the-girl-i-used-to-dislike/",
    "https://komikcast.me/komik/the-death-game-is-all-that-saotome-san-has-left/",
    "https://komikcast.me/komik/the-deer-and-the-cauldron/",
    "https://komikcast.me/komik/the-definition-of-a-top-star/",
    "https://komikcast.me/komik/the-demon-king-diaries/",
    "https://komikcast.me/komik/the-demon-king-who-lost-his-job/",
    "https://komikcast.me/komik/the-demon-lord-defeated-by-the-hero-and-the-slave-girl/",
    "https://komikcast.me/komik/the-descendant-of-the-spiritual-diety/",
    "https://komikcast.me/komik/the-developer-system/",
    "https://komikcast.me/komik/the-devil-grants-a-girls-last-wish/",
    "https://komikcast.me/komik/the-devil-king-in-another-world/",
    "https://komikcast.me/komik/the-devil-ring/",
    "https://komikcast.me/komik/the-devils-daughter/",
    "https://komikcast.me/komik/the-devils-descendants/",
    "https://komikcast.me/komik/the-devouring-zone/",
    "https://komikcast.me/komik/the-diary-of-demon-emperor/",
    "https://komikcast.me/komik/the-doctors-supremacy/",
    "https://komikcast.me/komik/the-dog-man/",
    "https://komikcast.me/komik/the-dragon-master/",
    "https://komikcast.me/komik/the-dragon-slaying-knight-longs-for-a-clean-slate-after-kissing-the-evil-dragon/",
    "https://komikcast.me/komik/duke-death-black-maid/",
    "https://komikcast.me/komik/the-dungeon-master/",
    "https://komikcast.me/komik/the-earth-savior-selection/",
    "https://komikcast.me/komik/the-elusive-samurai/",
    "https://komikcast.me/komik/the-embarrassing-daily-life-of-hazu-kun-and-kashii-san/",
    "https://komikcast.me/komik/the-emotionless-girl-and-the-emotion-devouring-alien/",
    "https://komikcast.me/komik/the-eunuchs-consort-rules-the-world/",
    "https://komikcast.me/komik/the-evil-girl-is-the-emperor/",
    "https://komikcast.me/komik/the-evil-kings-wicked-consort/",
    "https://komikcast.me/komik/the-evil-sorceress-plans-to-survive/",
    "https://komikcast.me/komik/the-evil-young-masters-rules-of-survival/",
    "https://komikcast.me/komik/the-executed-sage-is-reincarnated-as-a-lich-and-starts-an-all-out-war/",
    "https://komikcast.me/komik/the-exorcist-expert/",
    "https://komikcast.me/komik/the-extreme/",
    "https://komikcast.me/komik/the-fable/",
    "https://komikcast.me/komik/the-fallen-ts-girl/",
    "https://komikcast.me/komik/the-female-teacher-who-fight-back/",
    "https://komikcast.me/komik/the-fiancees-live-together/",
    "https://komikcast.me/komik/the-fiary-captivity/",
    "https://komikcast.me/komik/the-first-ancestor-in-history/",
    "https://komikcast.me/komik/the-first-hunter/",
    "https://komikcast.me/komik/the-first-sequence/",
    "https://komikcast.me/komik/the-first-son-in-law-vanguard-of-all-time/",
    "https://komikcast.me/komik/the-first-spy-in-history/",
    "https://komikcast.me/komik/the-first-sword-of-earth/",
    "https://komikcast.me/komik/the-flower-of-vampire/",
    "https://komikcast.me/komik/the-flowers-have-blossomed/",
    "https://komikcast.me/komik/the-forgetful-dark-lord/",
    "https://komikcast.me/komik/the-former-structural-researchers-story-of-otherworldly-adventure/",
    "https://komikcast.me/komik/the-founder/",
    "https://komikcast.me/komik/the-fraudulent-game/",
    "https://komikcast.me/komik/the-frontier-alchemist-i-cant-go-back-to-that-job-after-you-made-my-budget-zero/",
    "https://komikcast.me/komik/the-galactic-navy-officer-becomes-an-adventurer/",
    "https://komikcast.me/komik/the-galaxy-next-door/",
    "https://komikcast.me/komik/the-game-invades-the-earth/",
    "https://komikcast.me/komik/the-game-that-i-came-from/",
    "https://komikcast.me/komik/the-gamer/",
    "https://komikcast.me/komik/the-gamer-fantasia/",
    "https://komikcast.me/komik/the-garden-of-red-flowers/",
    "https://komikcast.me/komik/the-gate-of-desire/",
    "https://komikcast.me/komik/the-gateway-of-revolution/",
    "https://komikcast.me/komik/the-general-is-up/",
    "https://komikcast.me/komik/the-genius-princesss-road-to-becoming-empress/",
    "https://komikcast.me/komik/the-genius-system/",
    "https://komikcast.me/komik/the-ghostly-doctor/",
    "https://komikcast.me/komik/the-girl-from-random-chatting/",
    "https://komikcast.me/komik/the-girl-from-the-other-side/",
    "https://komikcast.me/komik/the-girl-i-like-confessed-to-me-while-handing-me-cash/",
    "https://komikcast.me/komik/the-girl-who-does-not-show-any-facial-expression/",
    "https://komikcast.me/komik/the-girl-who-gets-insecure-because-she-likes-you/",
    "https://komikcast.me/komik/the-girl-who-let-slip-i-like-you/",
    "https://komikcast.me/komik/the-girl-who-see-it/",
    "https://komikcast.me/komik/the-girl-who-thinks-shes-a-neet-and-the-girl-who-absolutely-doesnt-want-her-to-know/",
    "https://komikcast.me/komik/the-girl-who-wants-love-and-the-girl-who-wont-give-it-to-her/",
    "https://komikcast.me/komik/the-girl-whos-going-to-self-destruct/",
    "https://komikcast.me/komik/the-girl-with-a-kansai-accent-and-the-pure-boy/",
    "https://komikcast.me/komik/the-glutton-next-door/",
    "https://komikcast.me/komik/the-god-of-game-of-god/",
    "https://komikcast.me/komik/the-god-of-death/",
    "https://komikcast.me/komik/the-god-of-high-school/",
    "https://komikcast.me/komik/the-god-of-my-fall-outside-the-rivers-and-lakes/",
    "https://komikcast.me/komik/the-god-of-professional-wrestling/",
    "https://komikcast.me/komik/the-god-of-war/",
    "https://komikcast.me/komik/the-goddes-took-me-to-be-a-master/",
    "https://komikcast.me/komik/the-goddesss-invincible-agent/",
    "https://komikcast.me/komik/the-gods-comes-and-go/",
    "https://komikcast.me/komik/the-golden-age/",
    "https://komikcast.me/komik/the-golden-haired-elementalist/",
    "https://komikcast.me/komik/the-grandmaster-of-demonic-cultivation/",
    "https://komikcast.me/komik/the-great-chaos-of-martial-world/",
    "https://komikcast.me/komik/the-great-conqueror/",
    "https://komikcast.me/komik/the-great-deity/",
    "https://komikcast.me/komik/the-great-master/",
    "https://komikcast.me/komik/the-great-prophet-is-running-from-her-previous-life/",
    "https://komikcast.me/komik/the-great-ruler/",
    "https://komikcast.me/komik/the-great-sage/",
    "https://komikcast.me/komik/the-great-soldier/",
    "https://komikcast.me/komik/the-greatest-gamer-returns/",
    "https://komikcast.me/komik/the-greatest-in-the-world/",
    "https://komikcast.me/komik/the-greatest-philosoper-with-zero-magic/",
    "https://komikcast.me/komik/the-hawks-song/",
    "https://komikcast.me/komik/the-healing-priest-of-the-sun/",
    "https://komikcast.me/komik/the-heaven-list/",
    "https://komikcast.me/komik/the-heaven-sword-and-the-dragon-saber/",
    "https://komikcast.me/komik/the-heavenly-demon-cant-live-a-normal-life/",
    "https://komikcast.me/komik/the-heavenly-demon-destroys-the-lich-kings-murim/",
    "https://komikcast.me/komik/the-hero-and-the-harem-are-mine-now/",
    "https://komikcast.me/komik/the-hero-returns/",
    "https://komikcast.me/komik/the-hero-who-returned-remains-the-strongest-in-the-modern-world/",
    "https://komikcast.me/komik/the-heroic-magician-want-to-live-leisurely/",
    "https://komikcast.me/komik/the-heroine-with-two-personalities-and-the-true-feeling-of-the-protagonist/",
    "https://komikcast.me/komik/the-hidden-descendants/",
    "https://komikcast.me/komik/the-high-energy-attack/",
    "https://komikcast.me/komik/the-high-school-full-of-zombies-art-room/",
    "https://komikcast.me/komik/the-hitman-bodyguard/",
    "https://komikcast.me/komik/the-holy-grail-of-eris/",
    "https://komikcast.me/komik/the-holy-knights-dark-road/",
    "https://komikcast.me/komik/the-house-without-time/",
    "https://komikcast.me/komik/the-human/",
    "https://komikcast.me/komik/the-hunter/",
    "https://komikcast.me/komik/the-hunters-guild-red-hood/",
    "https://komikcast.me/komik/the-immortal-devil-emperor/",
    "https://komikcast.me/komik/the-immortal-doctor/",
    "https://komikcast.me/komik/the-immortal-girl-and-her-contract-with-the-hundred-demons/",
    "https://komikcast.me/komik/the-incompetent-prince-who-has-been-banished-wants-to-hide-his-abilities/",
    "https://komikcast.me/komik/the-interceptor-cross-system/",
    "https://komikcast.me/komik/the-invasion-of-immortal-emperor/",
    "https://komikcast.me/komik/the-invincible-immortal/",
    "https://komikcast.me/komik/the-invincible-immortal-become-a-kid-in-the-world-of-cultivation/",
    "https://komikcast.me/komik/the-invincible-shovel/",
    "https://komikcast.me/komik/the-isolator-realization-of-absolute-solitude/",
    "https://komikcast.me/komik/the-jk-with-supernatural-powers-and-the-normal-senpai/",
    "https://komikcast.me/komik/the-kicked-out-s-rank-appraiser-createst-the-strongest-guild/",
    "https://komikcast.me/komik/the-king-of-business-road/",
    "https://komikcast.me/komik/the-king-of-cave-will-live-a-paradise-life/",
    "https://komikcast.me/komik/the-king-of-fantasy/",
    "https://komikcast.me/komik/the-king-of-fighters-a-new-beginning/",
    "https://komikcast.me/komik/the-king-of-night-market/",
    "https://komikcast.me/komik/the-king-of-police/",
    "https://komikcast.me/komik/the-king-of-soldiers-surrounded-by-beauties/",
    "https://komikcast.me/komik/the-king-of-special-force/",
    "https://komikcast.me/komik/the-king-of-ten-thousand-presence/",
    "https://komikcast.me/komik/the-kings-beloved-daughter/",
    "https://komikcast.me/komik/the-kings-first-favorite-queen/",
    "https://komikcast.me/komik/the-kingdom-of-ruin/",
    "https://komikcast.me/komik/the-kouhai-who-reports-the-color-of-her-underwear-to-me-every-morning-for-some-reason/",
    "https://komikcast.me/komik/the-labyrinth-raids-of-the-ultimate-tank/",
    "https://komikcast.me/komik/the-lady-is-the-future-tyrant/",
    "https://komikcast.me/komik/the-last-golden-child/",
    "https://komikcast.me/komik/the-last-guardian-of-wilderness/",
    "https://komikcast.me/komik/the-last-human/",
    "https://komikcast.me/komik/the-last-knight-of-the-fire/",
    "https://komikcast.me/komik/the-last-summer-of-the-heisei-era/",
    "https://komikcast.me/komik/the-last-summoner/",
    "https://komikcast.me/komik/the-law-of-the-alien-merchants/",
    "https://komikcast.me/komik/the-lazy-swordmaster/",
    "https://komikcast.me/komik/the-legend-are-true/",
    "https://komikcast.me/komik/the-legend-of-mage/",
    "https://komikcast.me/komik/the-legend-of-mir-the-gold-armor/",
    "https://komikcast.me/komik/the-legend-of-qing-emperor/",
    "https://komikcast.me/komik/the-legend-of-the-blue-realm/",
    "https://komikcast.me/komik/the-legend-of-the-demon-god/",
    "https://komikcast.me/komik/the-legendary-fossil/",
    "https://komikcast.me/komik/legendary-weapon-heavy-equip/",
    "https://komikcast.me/komik/the-life-after-god-of-martial-lived-in-seclusion/",
    "https://komikcast.me/komik/the-life-of-the-witch-who-remains-single-for-about-300-years/",
    "https://komikcast.me/komik/the-live/",
    "https://komikcast.me/komik/the-long-ballad/",
    "https://komikcast.me/komik/the-long-way-of-the-warrior/",
    "https://komikcast.me/komik/the-lord-of-no-boundary/",
    "https://komikcast.me/komik/the-lords-coins-arent-decreasing/",
    "https://komikcast.me/komik/the-lost-city/",
    "https://komikcast.me/komik/the-lost-key/",
    "https://komikcast.me/komik/the-love-king-and-his-ornamental-wife/",
    "https://komikcast.me/komik/the-lurking-spirit/",
    "https://komikcast.me/komik/the-macrocosm-era/",
    "https://komikcast.me/komik/the-magic-chef-of-ice-and-fire/",
    "https://komikcast.me/komik/magic-chef-ice-fire-ii/",
    "https://komikcast.me/komik/the-maid-who-cant-hide-her-feelings/",
    "https://komikcast.me/komik/the-many-weaknesses-of-ayaka-the-yankee-jk/",
    "https://komikcast.me/komik/the-master-of-knife/",
    "https://komikcast.me/komik/the-matchmaker-forbids-me-from-dating/",
    "https://komikcast.me/komik/the-max-leveled-hero-will-return/",
    "https://komikcast.me/komik/the-melancholy-of-a-trap/",
    "https://komikcast.me/komik/the-memory-of-wind/",
    "https://komikcast.me/komik/the-messenger/",
    "https://komikcast.me/komik/the-missing-gate/",
    "https://komikcast.me/komik/the-monstrous-gui/",
    "https://komikcast.me/komik/the-most-notorious-talker-runs-the-worlds-greatest-clan/",
    "https://komikcast.me/komik/the-mute-girl-and-her-new-friend-webcomic/",
    "https://komikcast.me/komik/the-mythical-realm/",
    "https://komikcast.me/komik/the-necromancer-maid/",
    "https://komikcast.me/komik/the-nether-world-mix-of-jiang-long/",
    "https://komikcast.me/komik/the-new-gate/",
    "https://komikcast.me/komik/the-new-of-prince-tennis/",
    "https://komikcast.me/komik/the-new-pavilion-is-a-good-sword/",
    "https://komikcast.me/komik/the-newbie-is-too-strong/",
    "https://komikcast.me/komik/the-night-crow/",
    "https://komikcast.me/komik/the-nights-god/",
    "https://komikcast.me/komik/the-nine-heaven-of-martial-arts/",
    "https://komikcast.me/komik/the-nine-realms-eyes-appeared/",
    "https://komikcast.me/komik/the-novels-extra/",
    "https://komikcast.me/komik/the-numbers/",
    "https://komikcast.me/komik/the-office-lady-who-took-in-a-wild-shota/",
    "https://komikcast.me/komik/the-onee-sama-and-the-giant/",
    "https://komikcast.me/komik/the-origin-of-ollie/",
    "https://komikcast.me/komik/the-otaku-girl-and-the-girl-shes-dating/",
    "https://komikcast.me/komik/the-outcast-dong-man-tang/",
    "https://komikcast.me/komik/the-pechi-wand-witchs-book-of-adventures/",
    "https://komikcast.me/komik/the-peerless-concubine/",
    "https://komikcast.me/komik/the-peerless-doctor-from-consort-to-empress/",
    "https://komikcast.me/komik/the-peerless-gallant-errant/",
    "https://komikcast.me/komik/the-peerless-soldier/",
    "https://komikcast.me/komik/the-people-on-earth-are-too-ferocious/",
    "https://komikcast.me/komik/the-personal-doctor-of-the-female-president/",
    "https://komikcast.me/komik/the-pinnacle-of-martial-arts/",
    "https://komikcast.me/komik/the-plain-and-unnoticeable-me-is-no-more/",
    "https://komikcast.me/komik/the-portal-of-wonderland/",
    "https://komikcast.me/komik/the-possesive-type/",
    "https://komikcast.me/komik/the-power-of-soul/",
    "https://komikcast.me/komik/the-president-lovely-wife/",
    "https://komikcast.me/komik/the-presidents-school-flower-is-on-me/",
    "https://komikcast.me/komik/the-prince-and-the-sharp-girl/",
    "https://komikcast.me/komik/the-princess-is-a-gangster/",
    "https://komikcast.me/komik/the-princess-of-the-attic/",
    "https://komikcast.me/komik/the-promised-neverland/",
    "https://komikcast.me/komik/the-protectors/",
    "https://komikcast.me/komik/the-queen-is-mighty/",
    "https://komikcast.me/komik/the-queens-law-of-survival/",
    "https://komikcast.me/komik/the-raven/",
    "https://komikcast.me/komik/the-raven-black-hero/",
    "https://komikcast.me/komik/the-real-king/",
    "https://komikcast.me/komik/the-rebirt-taikoo-devil/",
    "https://komikcast.me/komik/the-rebirth-of-noble-revenge/",
    "https://komikcast.me/komik/the-reborn/",
    "https://komikcast.me/komik/the-reborn-god-after-60-000-years/",
    "https://komikcast.me/komik/the-reborn-little-girl-wont-give-up/",
    "https://komikcast.me/komik/the-record-of-unusual-creatures/",
    "https://komikcast.me/komik/the-red-ranger-becomes-an-adventurer-in-another-world/",
    "https://komikcast.me/komik/the-reincarnated-granny-wont-look-away-the-second-life-of-the-former-tyrannical-empress/",
    "https://komikcast.me/komik/the-reincarnated-inferior-magic-swordsman/",
    "https://komikcast.me/komik/the-reincarnated-swordsman-with-9999-strength-wants-to-become-a-magician/",
    "https://komikcast.me/komik/the-reincarnation-of-warrior/",
    "https://komikcast.me/komik/the-rest-of-my-life-on-the-desert-island/",
    "https://komikcast.me/komik/the-result-of-unattractive-men-having-interest-in-crossdressing/",
    "https://komikcast.me/komik/the-retreat/",
    "https://komikcast.me/komik/the-return-of-the-sect-leader/",
    "https://komikcast.me/komik/the-returning-warriors-alley-restaurant/",
    "https://komikcast.me/komik/the-revenge-of-the-dukes-daughter-theresia/",
    "https://komikcast.me/komik/the-revenge-of-the-soul-eater/",
    "https://komikcast.me/komik/the-reversed-world-crash-landed-travelers/",
    "https://komikcast.me/komik/the-rise-of-ai/",
    "https://komikcast.me/komik/the-road-of-karma/",
    "https://komikcast.me/komik/the-romantic-anecdotes-of-mount-shu/",
    "https://komikcast.me/komik/the-s-classes-that-i-raised/",
    "https://komikcast.me/komik/the-sacred-ruins/",
    "https://komikcast.me/komik/the-saviors-book-cafe-in-another-world/",
    "https://komikcast.me/komik/the-scholar-warrior/",
    "https://komikcast.me/komik/the-schools-strongest-special-forces/",
    "https://komikcast.me/komik/the-seal-of-the-mountains-and-seas/",
    "https://komikcast.me/komik/the-seasoned-tactician-vs-the-amateur-strategist/",
    "https://komikcast.me/komik/the-second-coming-of-gluttony/",
    "https://komikcast.me/komik/the-second-journey-to-the-west/",
    "https://komikcast.me/komik/the-secret-of-a-sword/",
    "https://komikcast.me/komik/the-senior-and-junior-broke-up-three-months-ago/",
    "https://komikcast.me/komik/the-shaman-master/",
    "https://komikcast.me/komik/the-sheep-princess-in-wolfs-clothing/",
    "https://komikcast.me/komik/the-shocking-reality-of-a-loan-shark-collecting-money/",
    "https://komikcast.me/komik/the-sick-kings-little-evil-queen/",
    "https://komikcast.me/komik/the-skinny-girl-and-the-chubby-boy/",
    "https://komikcast.me/komik/the-sleeping-prince-and-the-health-committee-member/",
    "https://komikcast.me/komik/the-sleepy-dragon-continent/",
    "https://komikcast.me/komik/the-small-sage-will-try-her-best-in-the-different-world-from-lv-1/",
    "https://komikcast.me/komik/the-small-village-of-the-young-lady-without-blessing/",
    "https://komikcast.me/komik/the-smiling-proud-wanderer/",
    "https://komikcast.me/komik/the-smiling-proud-wanderer-ii/",
    "https://komikcast.me/komik/the-snow-girl-is-melting/",
    "https://komikcast.me/komik/the-soldier-king/",
    "https://komikcast.me/komik/the-sorcerer-king-of-destruction-and-the-golem-of-the-barbarian-queen/",
    "https://komikcast.me/komik/the-sound-of-something-new/",
    "https://komikcast.me/komik/the-star-of-a-supreme-ruler/",
    "https://komikcast.me/komik/the-stars-and-i/",
    "https://komikcast.me/komik/the-story-between-a-dumb-prefect-and-a-high-school-girl-with-an-inappropriate-skirt-length/",
    "https://komikcast.me/komik/the-story-of-a-boy-who-petrifies-those-who-meet-his-eyes-and-a-blind-saint/",
    "https://komikcast.me/komik/the-story-of-a-boy-who-sits-next-to-a-beautiful-classmate/",
    "https://komikcast.me/komik/the-story-of-a-cat-that-has-lived-for-100-years/",
    "https://komikcast.me/komik/the-story-of-a-doctor-who-saved-a-girl-who-turned-out-to-be-a-vampire/",
    "https://komikcast.me/komik/the-story-of-a-guy-who-fell-in-love-with-his-friends-sister/",
    "https://komikcast.me/komik/the-story-of-a-high-schooler-who-wanted-a-girlfriend-but-had-a-sour-face-kouhai-route/",
    "https://komikcast.me/komik/the-story-of-a-low-rank-soldier-becoming-a-monarch/",
    "https://komikcast.me/komik/the-story-of-a-man-turned-girl-who-fell-in-love-with-a-trap/",
    "https://komikcast.me/komik/the-story-of-a-waitress-and-her-customer/",
    "https://komikcast.me/komik/the-story-of-a-yakuza-boss-reborn-as-a-little-girl/",
    "https://komikcast.me/komik/the-story-of-getting-dumped-so-often-that-you-think-whatever-im-fine-with-him-and-genderswap-your-best-friend-and-cant-undo-it/",
    "https://komikcast.me/komik/the-story-of-hatsune-miku/",
    "https://komikcast.me/komik/the-story-of-hua-yan/",
    "https://komikcast.me/komik/the-story-of-line-that-never-replied/",
    "https://komikcast.me/komik/the-story-of-me-who-flares-up-and-she-who-doesnt/",
    "https://komikcast.me/komik/the-story-of-medusa-falling-from-the-ceiling/",
    "https://komikcast.me/komik/the-story-of-my-husbands-cute-crossdressing/",
    "https://komikcast.me/komik/the-story-of-my-sisters-annoying-friend/",
    "https://komikcast.me/komik/the-story-of-my-youth/",
    "https://komikcast.me/komik/the-story-of-participating-in-a-joint-party-for-the-first-time/",
    "https://komikcast.me/komik/the-strong-man-from-the-mental-hospital/",
    "https://komikcast.me/komik/the-strongest-beast-system/",
    "https://komikcast.me/komik/the-strongest-berserker-in-the-city/",
    "https://komikcast.me/komik/the-strongest-body-old-ancestor-in-history/",
    "https://komikcast.me/komik/the-strongest-caveman/",
    "https://komikcast.me/komik/the-strongest-civilian-in-xiuxian-academy/",
    "https://komikcast.me/komik/the-strongest-cultivation-app/",
    "https://komikcast.me/komik/the-strongest-dad-in-history/",
    "https://komikcast.me/komik/the-strongest-daily-immortal-cultivation-repair-system-in-the-city/",
    "https://komikcast.me/komik/the-strongest-dull-princes-secret-battle-for-the-throne/",
    "https://komikcast.me/komik/the-strongest-fate-system/",
    "https://komikcast.me/komik/the-strongest-florist/",
    "https://komikcast.me/komik/the-strongest-gamer-player-the-strongest-player/",
    "https://komikcast.me/komik/the-strongest-girl/",
    "https://komikcast.me/komik/the-strongest-golden-kidney-system/",
    "https://komikcast.me/komik/the-strongest-harem-of-nobles/",
    "https://komikcast.me/komik/the-strongest-haunted-house-and-the-guy-with-no-spiritual-sense/",
    "https://komikcast.me/komik/the-strongest-immortal-world-of-friend-group/",
    "https://komikcast.me/komik/the-strongest-in-history/",
    "https://komikcast.me/komik/the-strongest-involution-system/",
    "https://komikcast.me/komik/the-strongest-king-hell-in-city/",
    "https://komikcast.me/komik/the-strongest-lvl1-support/",
    "https://komikcast.me/komik/the-strongest-manager-in-history/",
    "https://komikcast.me/komik/the-strongest-peach-blossom/",
    "https://komikcast.me/komik/the-strongest-player/",
    "https://komikcast.me/komik/the-strongest-protagonist-of-all-time/",
    "https://komikcast.me/komik/the-strongest-son-in-law-in-history/",
    "https://komikcast.me/komik/the-strongest-upgrade-system/",
    "https://komikcast.me/komik/the-strongest-useless-princes-battle-for-the-throne/",
    "https://komikcast.me/komik/the-strongest-war-god/",
    "https://komikcast.me/komik/the-strongest-warrior-goes-to-school/",
    "https://komikcast.me/komik/the-student-council-president-solves-everything-on-the-bed/",
    "https://komikcast.me/komik/the-student-from-the-neighboring-class/",
    "https://komikcast.me/komik/the-sudden-arrival-of-my-step-sister/",
    "https://komikcast.me/komik/the-summoner-who-was-despised-as-shunned-child/",
    "https://komikcast.me/komik/the-super-doctor-from-2089/",
    "https://komikcast.me/komik/the-superb-captain-in-the-city/",
    "https://komikcast.me/komik/the-supreme-almighty-master-remake/",
    "https://komikcast.me/komik/the-supreme-urban-heavenly-master/",
    "https://komikcast.me/komik/the-sword-of-dawn/",
    "https://komikcast.me/komik/the-sword-of-glory/",
    "https://komikcast.me/komik/the-swordsman-called-the-countless-swords-sorcerer/",
    "https://komikcast.me/komik/the-system-is-at-my-disposal/",
    "https://komikcast.me/komik/the-tale-of-zi-wei/",
    "https://komikcast.me/komik/the-taoist/",
    "https://komikcast.me/komik/the-teacher-of-perishable-villains/",
    "https://komikcast.me/komik/the-terminal-illness/",
    "https://komikcast.me/komik/the-terrarium-with-key/",
    "https://komikcast.me/komik/the-terrifying-devil-wont-let-me-go-back-to-work/",
    "https://komikcast.me/komik/the-terrifying-hitman-and-the-little-girl-he-took-in/",
    "https://komikcast.me/komik/the-thousand-noble-musketeers/",
    "https://komikcast.me/komik/the-three-body-problem/",
    "https://komikcast.me/komik/the-time-my-friend-wanted-to-try-a-skirt/",
    "https://komikcast.me/komik/the-top-abandoned-young/",
    "https://komikcast.me/komik/the-top-clan-leader-in-history/",
    "https://komikcast.me/komik/the-treasured-sakura-tome/",
    "https://komikcast.me/komik/the-truth-behind-the-series-of-thefts/",
    "https://komikcast.me/komik/the-ts-scientist-who-made-a-robot-for-yuri/",
    "https://komikcast.me/komik/the-turning-point-of-shura-birth-of-the-malice/",
    "https://komikcast.me/komik/the-tutorial-is-too-hard/",
    "https://komikcast.me/komik/the-tutorial-tower-of-the-advanced-player/",
    "https://komikcast.me/komik/the-two-of-them-back-then/",
    "https://komikcast.me/komik/the-tyrannical-holy-king-wants-to-dote-on-the-cheat-girl-but-right-now-shes-too-obsessed-with-magic/",
    "https://komikcast.me/komik/the-ultimate-middle-aged-hunter-travels-to-another-world-this-time-he-wants-to-live-a-slow-and-peaceful-life/",
    "https://komikcast.me/komik/the-ultimate-of-all-ages/",
    "https://komikcast.me/komik/the-un-comparable/",
    "https://komikcast.me/komik/the-uncrowned-king-of-school-flowers/",
    "https://komikcast.me/komik/the-undead-lord-of-the-palace-of-darkness/",
    "https://komikcast.me/komik/the-undefeatable-swordsman/",
    "https://komikcast.me/komik/the-undefeated-ranker/",
    "https://komikcast.me/komik/the-unfavorable-job-appraiser-is-actually-the-strongest/",
    "https://komikcast.me/komik/the-unparalleled-eternal-arts/",
    "https://komikcast.me/komik/the-unrivaled-delinquent-combat-king-is-actually-a-healer-in-the-game-world/",
    "https://komikcast.me/komik/the-unwed-female-elf-knight-becomes-smitten-immediately/",
    "https://komikcast.me/komik/the-vampire-man-wants-to-heal/",
    "https://komikcast.me/komik/the-vengeful-white-cat-lounging-on-the-dragon-kings-lap/",
    "https://komikcast.me/komik/the-4/",
    "https://komikcast.me/komik/the-villain-of-destiny/",
    "https://komikcast.me/komik/the-villains-main-upgrade-contract/",
    "https://komikcast.me/komik/the-villains-self-saving-plan/",
    "https://komikcast.me/komik/the-villainess-became-a-commoner/",
    "https://komikcast.me/komik/the-villainess-falls-for-the-notorious-noble/",
    "https://komikcast.me/komik/the-villainess-refuses-to-flirt-with-the-male-lead/",
    "https://komikcast.me/komik/the-villainess-wants-to-enjoy-a-carefree-married-life-in-a-former-enemy-country-in-her-seventh-loop/",
    "https://komikcast.me/komik/the-villainess-wants-to-marry-a-commoner/",
    "https://komikcast.me/komik/the-villainess-will-crush-her-destruction-end-through-modern-firepower/",
    "https://komikcast.me/komik/the-villainess-cecilia-sylvie-doesnt-want-to-die-so-she-decided-to-crossdress/",
    "https://komikcast.me/komik/the-wanderer/",
    "https://komikcast.me/komik/the-war-chronicles-of-cinderella/",
    "https://komikcast.me/komik/the-way-of-domination/",
    "https://komikcast.me/komik/the-way-that-knight-lives-as-a-lady/",
    "https://komikcast.me/komik/the-way-the-mage-faces-death/",
    "https://komikcast.me/komik/the-weakest-occupation-blacksmith-but-its-actually-the-strongest/",
    "https://komikcast.me/komik/the-white-angel-of-death/",
    "https://komikcast.me/komik/the-white-mage-who-was-banished-from-the-heros-party-is-picked-up-by-an-s-rank-adventurer-this-white-mage-is-too-out-of-the-ordinary/",
    "https://komikcast.me/komik/the-wife-contract-and-my-daughters-nanny/",
    "https://komikcast.me/komik/the-wife-hates-to-lose/",
    "https://komikcast.me/komik/the-witch-and-the-beast/",
    "https://komikcast.me/komik/the-witch-controls-her-age-and-magic-with-a-kiss/",
    "https://komikcast.me/komik/the-witchs-dealings-with-a-boy/",
    "https://komikcast.me/komik/the-wolf-child-sora-in-the-war-zone/",
    "https://komikcast.me/komik/the-wolf-lords-lady/",
    "https://komikcast.me/komik/the-wolf-wont-sleep/",
    "https://komikcast.me/komik/the-woman-who-messes-with-my-emotions/",
    "https://komikcast.me/komik/the-world-after-the-fall/",
    "https://komikcast.me/komik/the-world-god-only-knows/",
    "https://komikcast.me/komik/the-world-greatest-bakery/",
    "https://komikcast.me/komik/the-world-of-mine/",
    "https://komikcast.me/komik/the-world-of-otome-games-kindergarten-is-tough-for-mobs/",
    "https://komikcast.me/komik/the-world-will-be-destroyed-tomorrow-so-i-want-to-rub-your-boobs/",
    "https://komikcast.me/komik/the-worlds-best-engineer/",
    "https://komikcast.me/komik/the-worlds-best-escort-bureau/",
    "https://komikcast.me/komik/the-worst-valentine/",
    "https://komikcast.me/komik/wrong-way-use-healing-magic/",
    "https://komikcast.me/komik/the-yandere-and-the-tough-guy/",
    "https://komikcast.me/komik/the-yinyang-judgement/",
    "https://komikcast.me/komik/young-master-maid/",
    "https://komikcast.me/komik/the-youngest-master/",
    "https://komikcast.me/komik/the-zillion-options-for-becoming-a-god/",
    "https://komikcast.me/komik/the-zombie-maria/",
    "https://komikcast.me/komik/their-color/",
    "https://komikcast.me/komik/theory-of-paradise/",
    "https://komikcast.me/komik/there-cant-be-girls-in-my-guild/",
    "https://komikcast.me/komik/theres-a-lie-in-this-infatuation/",
    "https://komikcast.me/komik/theres-a-demons-here/",
    "https://komikcast.me/komik/theres-no-way-a-side-character-like-me-could-be-populer-right/",
    "https://komikcast.me/komik/these-two-will-be-married-in-100-days/",
    "https://komikcast.me/komik/this-big-shot-is-a-bit-negligent/",
    "https://komikcast.me/komik/this-crossdressing-boys-reflection-gave-him-away/",
    "https://komikcast.me/komik/this-edge-of-the-shore/",
    "https://komikcast.me/komik/this-father-and-son-will-cross-the-line-in-10-days/",
    "https://komikcast.me/komik/this-girl-is-a-little-wild-2/",
    "https://komikcast.me/komik/this-girl-will-express-herself-in-100-days/",
    "https://komikcast.me/komik/this-is-counterside/",
    "https://komikcast.me/komik/this-is-it/",
    "https://komikcast.me/komik/this-is-the-law/",
    "https://komikcast.me/komik/this-is-your-fault-momo/",
    "https://komikcast.me/komik/this-italian-girl-has-become-such-a-freeloader/",
    "https://komikcast.me/komik/this-italian-girl-has-become-such-a-freeloader-serialized/",
    "https://komikcast.me/komik/this-man/",
    "https://komikcast.me/komik/this-prince-has-no-control-over-his-wife-youve-got-it/",
    "https://komikcast.me/komik/this-saint-has-a-showdown/",
    "https://komikcast.me/komik/this-village-sim-npc-could-only-be-human/",
    "https://komikcast.me/komik/this-waste-wood-is-a-bit-strong/",
    "https://komikcast.me/komik/though-i-may-be-a-villainess-ill-show-you-i-can-obtain-happiness/",
    "https://komikcast.me/komik/thought-experiment-girls/",
    "https://komikcast.me/komik/three-inches-of-heaven/",
    "https://komikcast.me/komik/three-kingdoms/",
    "https://komikcast.me/komik/three-realm-taobao-store/",
    "https://komikcast.me/komik/three-video-messages/",
    "https://komikcast.me/komik/three-years-apart/",
    "https://komikcast.me/komik/thunderbolt-fantasy-touriken-yuuki/",
    "https://komikcast.me/komik/tiger-coming-in/",
    "https://komikcast.me/komik/tiger-dragon-brothers/",
    "https://komikcast.me/komik/tigers-descent/",
    "https://komikcast.me/komik/time-lover/",
    "https://komikcast.me/komik/time-master/",
    "https://komikcast.me/komik/time-paradox-ghostwriter/",
    "https://komikcast.me/komik/time-roulette/",
    "https://komikcast.me/komik/time-with-my-king/",
    "https://komikcast.me/komik/timid-cleavage/",
    "https://komikcast.me/komik/tiny-bear-yu-and-bunny-xu/",
    "https://komikcast.me/komik/to-aru-kagaku-no-accelerator/",
    "https://komikcast.me/komik/aru-kagaku-no-railgun/",
    "https://komikcast.me/komik/to-be-a-winner/",
    "https://komikcast.me/komik/to-be-immortal-for-9000-years/",
    "https://komikcast.me/komik/to-be-the-castellan-king/",
    "https://komikcast.me/komik/to-be-you-even-just-for-a-day/",
    "https://komikcast.me/komik/to-beloved-my-familly/",
    "https://komikcast.me/komik/to-hell-with-being-a-saint-im-a-doctor/",
    "https://komikcast.me/komik/to-kill-a-mirror/",
    "https://komikcast.me/komik/to-level-and-chew-up-a-newbie/",
    "https://komikcast.me/komik/love-ru-chronicle/",
    "https://komikcast.me/komik/to-love-ru-darkness-shuueisha-jump-remix/",
    "https://komikcast.me/komik/love-ru-darkness-celine-origins/",
    "https://komikcast.me/komik/love-ru-darkness-kuro-origins/",
    "https://komikcast.me/komik/to-love-ru-rito-sayaka-after-school/",
    "https://komikcast.me/komik/to-love-ru-darkness/",
    "https://komikcast.me/komik/to-not-die/",
    "https://komikcast.me/komik/toaru-kagaku-no-dark-matter/",
    "https://komikcast.me/komik/toaru-majutsu-no-index-heart-no-yukue/",
    "https://komikcast.me/komik/toaru-meoto-no-nichijou-daily-life-of-a-certain-married-couple/",
    "https://komikcast.me/komik/toaru-ossan-no-vrmmo-katsudouki/",
    "https://komikcast.me/komik/tobioriyou-to-shiteiru-joshikousei-wo-tasuketara-dou-naru-no-ka/",
    "https://komikcast.me/komik/today-once-again-the-assassin-cannot-win-against-the-girl-he-picked-up/",
    "https://komikcast.me/komik/todoke-kono-omoi/",
    "https://komikcast.me/komik/together/",
    "https://komikcast.me/komik/together-with-the-rain/",
    "https://komikcast.me/komik/toki-tsukai-majutsushi-no-tensei-musou/",
    "https://komikcast.me/komik/tokidoki/",
    "https://komikcast.me/komik/tokidoki-bosotto-roshiago-de-dereru-tonari-no-alya-san/",
    "https://komikcast.me/komik/tokimeku-hajimete-no/",
    "https://komikcast.me/komik/tokiwa-kitareri/",
    "https://komikcast.me/komik/tokubetsu-ni-kawaiku-mieru-no-desu/",
    "https://komikcast.me/komik/tokushu-seiheki-kyoushitsu-e-youkoso/",
    "https://komikcast.me/komik/tokyo-de-umarekawatta-otokonoko-to-onnanoko-no-hanashi/",
    "https://komikcast.me/komik/tokyo-dted/",
    "https://komikcast.me/komik/tokyo-esp/",
    "https://komikcast.me/komik/tokyo-ghostbros/",
    "https://komikcast.me/komik/tokyo-ghoul/",
    "https://komikcast.me/komik/tokyo-ghoul-jack/",
    "https://komikcast.me/komik/tokyo-ghoulre/",
    "https://komikcast.me/komik/tokyo-metropolitan-magic-technical-school/",
    "https://komikcast.me/komik/tokyo-ravens/",
    "https://komikcast.me/komik/tokyo-shinobi-squad/",
    "https://komikcast.me/komik/tokyo%e5%8d%8drevengers/",
    "https://komikcast.me/komik/tomo-chan-wa-onnanoko/",
    "https://komikcast.me/komik/tomodachi-game/",
    "https://komikcast.me/komik/tomodachi-no-imouto-ga-ore-ni-dake-uzai/",
    "https://komikcast.me/komik/tomodachi-o-tsukurou/",
    "https://komikcast.me/komik/tomodachi-to-shite-daisuki/",
    "https://komikcast.me/komik/tomorrow-disaster/",
    "https://komikcast.me/komik/tomorrows-god-land/",
    "https://komikcast.me/komik/tonari-no-class-no-midorikawa-san/",
    "https://komikcast.me/komik/tonari-no-furi-san-ga-tonikaku-kowai/",
    "https://komikcast.me/komik/tonari-no-hito/",
    "https://komikcast.me/komik/tonari-no-joshi-no-kokoro-no-koe-ga-urusai/",
    "https://komikcast.me/komik/tonari-no-kaibutsu-kun/",
    "https://komikcast.me/komik/tonari-no-kanojo-to-megaatta/",
    "https://komikcast.me/komik/tonari-no-kashiwagi-san/",
    "https://komikcast.me/komik/tonari-no-kimi-ga-ichiban-kawaii/",
    "https://komikcast.me/komik/tonari-no-kuroki-san-wa-nomu-to-yabai/",
    "https://komikcast.me/komik/tonari-no-kuuderera-o-amayakashitara-uchi-no-aikagi-o-watasu-koto-ni-natta/",
    "https://komikcast.me/komik/tonari-no-nobukuni-san-wa-ore-no-koto-ga-sukina-ki-ga-suru/",
    "https://komikcast.me/komik/tonari-no-otona-kun/",
    "https://komikcast.me/komik/tonari-no-uchuubito-ga-kowai/",
    "https://komikcast.me/komik/tonari-no-youkai-san/",
    "https://komikcast.me/komik/tonde-hini-iru-yuri-no-inu/",
    "https://komikcast.me/komik/tondemo-skill-de-isekai-hourou-meshi/",
    "https://komikcast.me/komik/tondemo-skill-de-isekai-hourou-meshi-sui-no-daibouken/",
    "https://komikcast.me/komik/tongari-boushi-no-atelier/",
    "https://komikcast.me/komik/tonight-we-are-having-a-sleepover/",
    "https://komikcast.me/komik/tonikaku-kawaii/",
    "https://komikcast.me/komik/tonimo-kakunimo/",
    "https://komikcast.me/komik/tono-kanri-o-shite-miyou/",
    "https://komikcast.me/komik/too-late/",
    "https://komikcast.me/komik/toorigakari-ni-one-point-advice-shiteiku-type-no-yankee/",
    "https://komikcast.me/komik/toppu-gp/",
    "https://komikcast.me/komik/tora-kiss-a-school-odyssey/",
    "https://komikcast.me/komik/torako-anmari-kowashicha-dame-da-yo/",
    "https://komikcast.me/komik/torao-kuns-love-consultation/",
    "https://komikcast.me/komik/torimibu-no-takanashi-san/",
    "https://komikcast.me/komik/toritan/",
    "https://komikcast.me/komik/toshishita-no-otokonoko/",
    "https://komikcast.me/komik/toshiue-elite-onna-kishi-ga-boku-no-mae-de-dake-kawaii/",
    "https://komikcast.me/komik/toshokan-no-daimajutsushi/",
    "https://komikcast.me/komik/totsugami/",
    "https://komikcast.me/komik/toubousha-elio/",
    "https://komikcast.me/komik/touge-oni/",
    "https://komikcast.me/komik/tougen-anki/",
    "https://komikcast.me/komik/touhou-atai-to-gensokyo/",
    "https://komikcast.me/komik/touhou-knowing-not-knowing-love-doujinshi/",
    "https://komikcast.me/komik/touhou-nazrin-and-the-red-color-cafe-doujinshi/",
    "https://komikcast.me/komik/touhou-yuusha-reimu-to-maou-remilia-doujinshi/",
    "https://komikcast.me/komik/touhou-project-the-cat-who-is-often-a-cat-doujinshi/",
    "https://komikcast.me/komik/touhou-suichouka-lotus-eater-tachi-no-suisei/",
    "https://komikcast.me/komik/touhou-suzunaan-forbidden-scrollery/",
    "https://komikcast.me/komik/touko-san-wa-kaji-ga-dekinai/",
    "https://komikcast.me/komik/touko-san-wa-kaji-ga-dekinai-serialization/",
    "https://komikcast.me/komik/toukyou-revengers/",
    "https://komikcast.me/komik/toumei-na-usui-mizuiro-ni/",
    "https://komikcast.me/komik/touta/",
    "https://komikcast.me/komik/tower-into-the-clouds/",
    "https://komikcast.me/komik/tower-of-god/",
    "https://komikcast.me/komik/trace/",
    "https://komikcast.me/komik/traces-of-memory/",
    "https://komikcast.me/komik/trail-notice/",
    "https://komikcast.me/komik/training-the-beginner-level-magic-magic-arrow-to-the-limit/",
    "https://komikcast.me/komik/training-with-the-demon-king/",
    "https://komikcast.me/komik/transcendence-beyonder/",
    "https://komikcast.me/komik/transmigrating-through-every-world-to-be-your-black-lotus/",
    "https://komikcast.me/komik/transmigrating-to-the-otherworld-once-more/",
    "https://komikcast.me/komik/transmoe-sword-fantasy/",
    "https://komikcast.me/komik/trapped-with-the-ceo/",
    "https://komikcast.me/komik/travels-of-the-white-flame/",
    "https://komikcast.me/komik/traversal-script-of-the-loser-group/",
    "https://komikcast.me/komik/traverser-must-die/",
    "https://komikcast.me/komik/treacherous-subject-saves-the-country/",
    "https://komikcast.me/komik/treading-on-fire-yuwen-jun/",
    "https://komikcast.me/komik/treasure-house-of-god/",
    "https://komikcast.me/komik/triangle-edge/",
    "https://komikcast.me/komik/tricks-dedicated-to-witches/",
    "https://komikcast.me/komik/trickster/",
    "https://komikcast.me/komik/trigger/",
    "https://komikcast.me/komik/trinity-seven/",
    "https://komikcast.me/komik/trinity-seven-specials/",
    "https://komikcast.me/komik/trinity-wonder/",
    "https://komikcast.me/komik/trouble/",
    "https://komikcast.me/komik/truck-kun/",
    "https://komikcast.me/komik/true-education/",
    "https://komikcast.me/komik/true-love/",
    "https://komikcast.me/komik/truth-mask/",
    "https://komikcast.me/komik/tsubaki-chou-lonely-planet/",
    "https://komikcast.me/komik/tsubakuma/",
    "https://komikcast.me/komik/tsubasa-chan-kimi-wa-macchingu-shita-onna-wa-satsujinki-bahasa-indonesia/",
    "https://komikcast.me/komik/tsue-to-tsurugi-no-wistoria/",
    "https://komikcast.me/komik/tsugou-no-ii-otoko/",
    "https://komikcast.me/komik/tsui-no-taimashi-%e2%80%95ender-geister/",
    "https://komikcast.me/komik/tsuiho-saretanode-ansatsu-ikka-jikiden-no-kage-maho-de-ojou-no-goei-hajimemashita/",
    "https://komikcast.me/komik/tsuihou-bokensha-no-yarinaoshi-yousei-kai-de-kitae-naoshite-jibun-no-ibasho-wo-tsukuru/",
    "https://komikcast.me/komik/tsuihou-majutsushi-no-sono-go-shintenchi-de-hajimeru-slow-life/",
    "https://komikcast.me/komik/tsuihou-no-kenja-sekai-wo-shiru-osanajimi-yuusha-no-atsuryoku-kara-nigete-jiyuu-ni-natta-ore/",
    "https://komikcast.me/komik/tsuihou-sareta-bannou-mahou-kenshi-wa-koujou-denka-no-shishou-tonaru/",
    "https://komikcast.me/komik/tsuihou-sareta-onimotsu-tamer-sekai-yuiitsu-no-necromancer-ni-kakusei-suru-ariamaru-sono-chikara-d/",
    "https://komikcast.me/komik/tsuihou-sareta-tenshou-juu-kishi-ha-gemu-chishiki-de-musou-suru/",
    "https://komikcast.me/komik/tsuiraku-jk-to-haijin-kyoushi/",
    "https://komikcast.me/komik/tsujou-kougeki-ga-zentai-kougeki-de-2-kai-kougeki-no-okaasan-wa-suki-desu-ka/",
    "https://komikcast.me/komik/tsuka-no-ma-no-ichika/",
    "https://komikcast.me/komik/tsukarekitta-onna-ga-shinuhodo-iyasareru-tame-ni/",
    "https://komikcast.me/komik/tsukasa-chan-ni-utawareru/",
    "https://komikcast.me/komik/tsuki-ga-michibiku-isekai-douchuu/",
    "https://komikcast.me/komik/tsuki-no-oki-ni-mesu-mama/",
    "https://komikcast.me/komik/tsuki-tsuki/",
    "https://komikcast.me/komik/tsukiatte-kudasai/",
    "https://komikcast.me/komik/tsukiatteta-koro-kara-chittomo-kawaranai-fuufu-no-hanashi/",
    "https://komikcast.me/komik/tsukuoki-life-weekend-meal-prep-recipes/",
    "https://komikcast.me/komik/tsukushi-biyori/",
    "https://komikcast.me/komik/tsumi-to-kai/",
    "https://komikcast.me/komik/tsun-ama-na-kareshi/",
    "https://komikcast.me/komik/tsundere-akuyaku-reijou-liselotte-to-jikkyou-no-endo-kun-to-kaisetsu-no-kobayashi-san/",
    "https://komikcast.me/komik/tsurebito-companion/",
    "https://komikcast.me/komik/tsurezure-biyori/",
    "https://komikcast.me/komik/tsurezure-children/",
    "https://komikcast.me/komik/tsurikomachi/",
    "https://komikcast.me/komik/tsutaou/",
    "https://komikcast.me/komik/tsuyokute-new-saga/",
    "https://komikcast.me/komik/tsuyokute-nyuugemu-na-rabukome/",
    "https://komikcast.me/komik/tun-shi-xing-kong/",
    "https://komikcast.me/komik/turned-into-a-grass-in-the-fantasy-world/",
    "https://komikcast.me/komik/twelve-weapon-of-god/",
    "https://komikcast.me/komik/twicomic-got-me-into-trouble/",
    "https://komikcast.me/komik/twin-yuri/",
    "https://komikcast.me/komik/twitter-plays-a-visual-novel/",
    "https://komikcast.me/komik/two-beautiful-girls-like-and-water/",
    "https://komikcast.me/komik/two-heroes/",
    "https://komikcast.me/komik/two-kids-worth-billions/",
    "https://komikcast.me/komik/two-sided-fall/",
    "https://komikcast.me/komik/tyrant-school-master/",
    "https://komikcast.me/komik/u19/",
    "https://komikcast.me/komik/ubau-mono-ubawareru-mono/",
    "https://komikcast.me/komik/ubel-blatt/",
    "https://komikcast.me/komik/uchi-kyaba-oie-de-kyabakura-shite-niichan-o-onnanoko-ni-nare-saseyou-dai-sakusen/",
    "https://komikcast.me/komik/uchi-ni-neko-ga-yattekita/",
    "https://komikcast.me/komik/uchi-no-hentai-maid-ni-osowareteru/",
    "https://komikcast.me/komik/uchi-no-maid-to-kekkon-suru-tamenara-ore-wa-harem-wo-tsukuru/",
    "https://komikcast.me/komik/uchi-no-maou-kamimasen-yo/",
    "https://komikcast.me/komik/uchi-no-musume-no-tame-naraba-ore-wa-moshikashitara-mao-mo-taoseru-kamo-shirenai/",
    "https://komikcast.me/komik/uchi-no-yome-wa-jibun-no-koto-shika-kangaenai/",
    "https://komikcast.me/komik/uchi-wa-wakarete-kurashiteiru/",
    "https://komikcast.me/komik/uchiage-hanabi-shita-kara-miru-ka-yoko-kara-miru-ka/",
    "https://komikcast.me/komik/ugly-duckling/",
    "https://komikcast.me/komik/ugly-womans-harem-code/",
    "https://komikcast.me/komik/uglyhood/",
    "https://komikcast.me/komik/uketsukejo-ni-kokuhaku-shitakute-girudo-ni-kayoitsumetara-eiyu-ni-natteta/",
    "https://komikcast.me/komik/ukyou-san-on-my-right/",
    "https://komikcast.me/komik/ultimate-antihero/",
    "https://komikcast.me/komik/ultimate-king-of-mixed-city/",
    "https://komikcast.me/komik/ultimate-loading-system/",
    "https://komikcast.me/komik/ultimate-of-god-eyes/",
    "https://komikcast.me/komik/ultimate-path-martial-arts/",
    "https://komikcast.me/komik/ultimate-soldier/",
    "https://komikcast.me/komik/ultimate-hentai-kamen/",
    "https://komikcast.me/komik/ultimiter/",
    "https://komikcast.me/komik/ultra-alter/",
    "https://komikcast.me/komik/ultra-battle-satellite/",
    "https://komikcast.me/komik/ultra-kaiju-humanization-project-galaxy-days/",
    "https://komikcast.me/komik/ultra-positive-energy-demon-king/",
    "https://komikcast.me/komik/uma-musume-cinderella-gray/",
    "https://komikcast.me/komik/umagasaki/",
    "https://komikcast.me/komik/umarekawatta-kensei-wa-raku-o-shitai/",
    "https://komikcast.me/komik/umarekawatte-mo-mata-watashi-to-kekkon-shite-kuremasu-ka/",
    "https://komikcast.me/komik/umareru-kachi-no-nakatta-jibun-ga-anna-no-tame-ni-dekiru-ikutsuka-no-koto/",
    "https://komikcast.me/komik/umareta-chokugo-ni-suterareta-kedo-zensei-ga-taikensha-datta-node-yoyuu-de-ikitemasu/",
    "https://komikcast.me/komik/umbrella-girl/",
    "https://komikcast.me/komik/umbrellas/",
    "https://komikcast.me/komik/umi-no-misaki/",
    "https://komikcast.me/komik/umiiro-march/",
    "https://komikcast.me/komik/umineko-no-naku-koro-ni-episode-1-legend-of-the-golden-witch/",
    "https://komikcast.me/komik/umineko-sou-days/",
    "https://komikcast.me/komik/umisaki-lilac/",
    "https://komikcast.me/komik/unable-to-become-the-main-force/",
    "https://komikcast.me/komik/unbreakable/",
    "https://komikcast.me/komik/undead-messiah/",
    "https://komikcast.me/komik/undead-unluck/",
    "https://komikcast.me/komik/undefeated-god-of-war/",
    "https://komikcast.me/komik/under-the-oak-tree/",
    "https://komikcast.me/komik/under-the-red-top/",
    "https://komikcast.me/komik/unemployed-concentration-camp/",
    "https://komikcast.me/komik/unforgivable-unpardonably-vicious/",
    "https://komikcast.me/komik/unicorn-to-sabishi-gari-ya-shoujo/",
    "https://komikcast.me/komik/universal-x-system/",
    "https://komikcast.me/komik/unlock-99-heroine-of-the-last-day/",
    "https://komikcast.me/komik/unluckiness-to-the-strongest-man/",
    "https://komikcast.me/komik/unlucky-boy-undead-girl/",
    "https://komikcast.me/komik/unlucky-king/",
    "https://komikcast.me/komik/unmei-wo-shinjinai-kare-ga-iuniwa/",
    "https://komikcast.me/komik/unnamed-memory/",
    "https://komikcast.me/komik/unordinary/",
    "https://komikcast.me/komik/unorthodox-spiritualist/",
    "https://komikcast.me/komik/until-i-make-my-cousin-happy/",
    "https://komikcast.me/komik/until-i-melt-you/",
    "https://komikcast.me/komik/until-the-tall-kouhai-girl-and-the-short-senpai-boy-develops-a-romance/",
    "https://komikcast.me/komik/untitled-taiyaki/",
    "https://komikcast.me/komik/untitled-doujin-keqing-x-ganyu-by-negom-genshin-impact/",
    "https://komikcast.me/komik/updater/",
    "https://komikcast.me/komik/uq-holder/",
    "https://komikcast.me/komik/uragirareta-s-rank-boukensha-no-ore-wa-aisuru-dorei-no-kanojora-to-tomoni-dorei-dake-no-harem-guild-o-tsukuru/",
    "https://komikcast.me/komik/urami-koi-koi-urami-koi/",
    "https://komikcast.me/komik/uramichi-oniisan/",
    "https://komikcast.me/komik/uranaishi-no-nayamigoto/",
    "https://komikcast.me/komik/urasai/",
    "https://komikcast.me/komik/urasekai-picnic/",
    "https://komikcast.me/komik/uratarou/",
    "https://komikcast.me/komik/urban-castaway/",
    "https://komikcast.me/komik/urban-cultivation-frenzy/",
    "https://komikcast.me/komik/urban-divine-comedy/",
    "https://komikcast.me/komik/urban-god/",
    "https://komikcast.me/komik/urban-harem-road/",
    "https://komikcast.me/komik/urban-immortal-emperor/",
    "https://komikcast.me/komik/urban-immortal-wine/",
    "https://komikcast.me/komik/urban-legend-investigation-team/",
    "https://komikcast.me/komik/urban-leveling/",
    "https://komikcast.me/komik/urban-prodigal-son/",
    "https://komikcast.me/komik/urenai-mangaka-to-sewayaki-no-onryou-san/",
    "https://komikcast.me/komik/urushiha-sarara-wa-koi-nado-shinai/",
    "https://komikcast.me/komik/usagi-moku-shachiku-ka/",
    "https://komikcast.me/komik/usami-san-wa-kamawaretai/",
    "https://komikcast.me/komik/useless-first-son-in-law-magnificent-cohabiting-son-in-law/",
    "https://komikcast.me/komik/useless-ponko/",
    "https://komikcast.me/komik/useless-princesses/",
    "https://komikcast.me/komik/useless-young-master/",
    "https://komikcast.me/komik/ushiro-no-hikaruko-chan/",
    "https://komikcast.me/komik/uso-de-ii-node/",
    "https://komikcast.me/komik/usotoki-rhetoric/",
    "https://komikcast.me/komik/usotsuki-aishiteru-game/",
    "https://komikcast.me/komik/usotsuki-na-pierce/",
    "https://komikcast.me/komik/usotsuki-satsuki-shi-ga-mieru/",
    "https://komikcast.me/komik/uwagaki-end/",
    "https://komikcast.me/komik/uwasa-no-midori-kun/",
    "https://komikcast.me/komik/uzaki-chan-wa-asobitai/",
    "https://komikcast.me/komik/uzumaki-spiral-into-horror/",
    "https://komikcast.me/komik/vagabond/",
    "https://komikcast.me/komik/valentines-day-with-senpai/",
    "https://komikcast.me/komik/vampeerz-my-peer-vampires/",
    "https://komikcast.me/komik/vampire-cross/",
    "https://komikcast.me/komik/vanguard/",
    "https://komikcast.me/komik/vanguard-of-light/",
    "https://komikcast.me/komik/vanitas-no-carte/",
    "https://komikcast.me/komik/vengeance-of-the-heavenly-demon/",
    "https://komikcast.me/komik/venom-doctor/",
    "https://komikcast.me/komik/vermillion/",
    "https://komikcast.me/komik/versatile-mage/",
    "https://komikcast.me/komik/very-pure/",
    "https://komikcast.me/komik/very-tender-amae-chan/",
    "https://komikcast.me/komik/vicious-luck/",
    "https://komikcast.me/komik/victoria-winner-ostwen-ouhi-wa-sekai-de-ichiban-erasou-de-aru/",
    "https://komikcast.me/komik/vigilante/",
    "https://komikcast.me/komik/vigilante-boku-no-hero-academia-illegals/",
    "https://komikcast.me/komik/villager-a-wants-to-save-the-villainess-no-matter-what/",
    "https://komikcast.me/komik/villain-demon-son-in-law/",
    "https://komikcast.me/komik/villain-initialization/",
    "https://komikcast.me/komik/villain-to-kill/",
    "https://komikcast.me/komik/villain-warrior/",
    "https://komikcast.me/komik/vinland-saga/",
    "https://komikcast.me/komik/violence-action/",
    "https://komikcast.me/komik/violent-counterattack/",
    "https://komikcast.me/komik/violent-path-martial-arts-school/",
    "https://komikcast.me/komik/violent-poisonous-archer/",
    "https://komikcast.me/komik/virtual-reality-action-rpg/",
    "https://komikcast.me/komik/virtual-world-close-combat-mage/",
    "https://komikcast.me/komik/virus-girlfriend/",
    "https://komikcast.me/komik/virus-tensei-kara-isekai-kansen-monogatari/",
    "https://komikcast.me/komik/viscount-draculas-first-embrace/",
    "https://komikcast.me/komik/volcanic-age/",
    "https://komikcast.me/komik/vrmmo-summoner-hajimemashita/",
    "https://komikcast.me/komik/vtuber-wa-mama-naranai/",
    "https://komikcast.me/komik/waga-itoshi-no-wota-kanojo/",
    "https://komikcast.me/komik/wagamama-oujo-ni-tsukaeta-bannou-shitsuji-tonari-no-teikoku-de-saikyou-no-gunjin-ni-nariagari-musou-suru/",
    "https://komikcast.me/komik/wagatsuma-san-wa-ore-no-yome/",
    "https://komikcast.me/komik/wage-slave/",
    "https://komikcast.me/komik/wait-a-sec-kawai-san/",
    "https://komikcast.me/komik/wakako-zake/",
    "https://komikcast.me/komik/wakamono-no-kuro-mahou-hanare-ga-shinkoku-desu-ga-shuushoku-shite-mitara-taiguu-iishi-shachou-mo-tsukaima-mo-kawaikute-saikou-desu/",
    "https://komikcast.me/komik/wakari-yasui-ko/",
    "https://komikcast.me/komik/wake-ari-na-kanojo-tachi/",
    "https://komikcast.me/komik/wake-up-deadman/",
    "https://komikcast.me/komik/wake-up-master/",
    "https://komikcast.me/komik/wakusei-closet/",
    "https://komikcast.me/komik/wan-dao-dragon-emperor/",
    "https://komikcast.me/komik/wandering-beyond/",
    "https://komikcast.me/komik/wang-gu-shen-wang/",
    "https://komikcast.me/komik/wang-pai-yu-shi/",
    "https://komikcast.me/komik/wang-you-zhi-zui-qiang-lie-ren/",
    "https://komikcast.me/komik/wanwan-monogatari-kanemochi-no-inu-ni-shite-to-wa-itta-ga-fenrir-ni-shiro-to-wa-itte-nee/",
    "https://komikcast.me/komik/wanwang-exorcist/",
    "https://komikcast.me/komik/war-machine/",
    "https://komikcast.me/komik/war-of-mountains-and-seas/",
    "https://komikcast.me/komik/waratte-sotomura-san/",
    "https://komikcast.me/komik/warble/",
    "https://komikcast.me/komik/ware-wa-ken-oh/",
    "https://komikcast.me/komik/warring-states/",
    "https://komikcast.me/komik/warrior-beheader/",
    "https://komikcast.me/komik/warrior-guard/",
    "https://komikcast.me/komik/wasureppoi-osananajimi-o-motsu-otoko-no-hanashi/",
    "https://komikcast.me/komik/watari-kun-no-xx-ga-houkai-sunzen/",
    "https://komikcast.me/komik/watashi-%e2%99%82-to-ojou-sama/",
    "https://komikcast.me/komik/watashi-ga-koibito-ni-nareru-wake-naijan-muri-muri-muri-janakatta/",
    "https://komikcast.me/komik/watashi-ga-motenai-no-wa-dou-kangaetemo-omaera-ga-warui/",
    "https://komikcast.me/komik/watashi-ga-motete-dousunda/",
    "https://komikcast.me/komik/watashi-ga-nerenai-riyuu/",
    "https://komikcast.me/komik/watashi-ni-karada-utte-minai/",
    "https://komikcast.me/komik/watashi-ni-tenshi-ga-maiorita/",
    "https://komikcast.me/komik/watashi-ni-xx-shinasai/",
    "https://komikcast.me/komik/watashi-no-cosmic-monster/",
    "https://komikcast.me/komik/watashi-no-koibito/",
    "https://komikcast.me/komik/watashi-no-oshi-wa-akuyaku-reijou/",
    "https://komikcast.me/komik/watashi-no-otto-wa-stress-ga-tamaru-to-shota-kasuru/",
    "https://komikcast.me/komik/watashi-no-shiranai-senpai-no-100-ko-no-koto/",
    "https://komikcast.me/komik/watashi-no-tomodachi-ga-sekaiichi-kawaii/",
    "https://komikcast.me/komik/watashi-o-tabetai-hitodenashi/",
    "https://komikcast.me/komik/watashi-to-ryuu-ojisan/",
    "https://komikcast.me/komik/watashi-wa-akuyaku-reijou-nanka-janai-yami-tsukaidakaratte-kanarazushimo-akuyakuda-to-omou-na-yo/",
    "https://komikcast.me/komik/watashi-yori-tsuyoi-otoko-to-kekkon-shitaino/",
    "https://komikcast.me/komik/watashi-tachi-no-futekisetsuna-kankei/",
    "https://komikcast.me/komik/watashi-elite-tenshi-desu-ga-nankoufuraku-jk-ni-komattemasu/",
    "https://komikcast.me/komik/watashi-maou-naze-ka-yuusha-ni-dekiaisarete-imasu/",
    "https://komikcast.me/komik/watashi-nouryoku-wa-heikinchi-de-tte-itta-yo-ne/",
    "https://komikcast.me/komik/watashitachi-no-shiawase-na-jikan/",
    "https://komikcast.me/komik/watashitachi-wa-koi-wo-egakenai/",
    "https://komikcast.me/komik/watashitachi-wa-koi-wo-shiranai/",
    "https://komikcast.me/komik/watashu/",
    "https://komikcast.me/komik/watch-dog/",
    "https://komikcast.me/komik/way-to-heaven/",
    "https://komikcast.me/komik/we-are-a-passive-succubus-so-can-you-give-us-an-ecchi-lesson/",
    "https://komikcast.me/komik/we-are-cats/",
    "https://komikcast.me/komik/we-graduated-from-being-sisters-to-girlfriends/",
    "https://komikcast.me/komik/we-live-in-an-mmo/",
    "https://komikcast.me/komik/weak-5000-year-old-vegan-dragon/",
    "https://komikcast.me/komik/weak-demon-hunter/",
    "https://komikcast.me/komik/weak-teacher/",
    "https://komikcast.me/komik/weakest-little-monster/",
    "https://komikcast.me/komik/wei-ming-shen-dou/",
    "https://komikcast.me/komik/weird/",
    "https://komikcast.me/komik/weird-prequel/",
    "https://komikcast.me/komik/welcome-to-cheap-restaurant-of-outcasts/",
    "https://komikcast.me/komik/welcome-to-the-outcasts-guild-the-incompetent-s-rank-parties-keep-expelling-competent-party-members/",
    "https://komikcast.me/komik/welcome-to-the-nightmare-game/",
    "https://komikcast.me/komik/werewolf-jk/",
    "https://komikcast.me/komik/what-can-the-eldest-lady-have/",
    "https://komikcast.me/komik/what-i-get-for-marrying-a-demon-bride/",
    "https://komikcast.me/komik/what-rika-chama-noticed/",
    "https://komikcast.me/komik/when-i-die-i-will-become-stronger/",
    "https://komikcast.me/komik/when-i-go-back-my-stats-doubled/",
    "https://komikcast.me/komik/when-i-try-to-go-to-work-the-dog-i-picked-up-gets-in-the-way/",
    "https://komikcast.me/komik/when-i-was-reincarnated-in-another-world-i-was-a-heroine-and-he-was-a-hero/",
    "https://komikcast.me/komik/when-i-woke-up-i-was-a-girl/",
    "https://komikcast.me/komik/when-my-boyfriend-became-a-she/",
    "https://komikcast.me/komik/when-night-falls/",
    "https://komikcast.me/komik/where-are-you-looking-manager/",
    "https://komikcast.me/komik/white-blood/",
    "https://komikcast.me/komik/white-dragon-duke-pendragon/",
    "https://komikcast.me/komik/white-epic/",
    "https://komikcast.me/komik/white-necromancer-road-to-necromancer-king/",
    "https://komikcast.me/komik/white-throne-of-bones/",
    "https://komikcast.me/komik/who-made-me-a-princess/",
    "https://komikcast.me/komik/who-said-im-the-boss/",
    "https://komikcast.me/komik/who-wants-to-be-girl/",
    "https://komikcast.me/komik/why-naitou/",
    "https://komikcast.me/komik/wilderness-hut/",
    "https://komikcast.me/komik/will-sama-wa-kyou-mo-mahou-de-asondeimasu/",
    "https://komikcast.me/komik/wind-breaker/",
    "https://komikcast.me/komik/wind-breaker-nii-satoru/",
    "https://komikcast.me/komik/wind-spirit/",
    "https://komikcast.me/komik/wind-sword/",
    "https://komikcast.me/komik/winner-takes-all/",
    "https://komikcast.me/komik/winter-moon/",
    "https://komikcast.me/komik/winter-sovereign/",
    "https://komikcast.me/komik/witch-hunter/",
    "https://komikcast.me/komik/witch-watch/",
    "https://komikcast.me/komik/witchcraft-works/",
    "https://komikcast.me/komik/without-a-daoist-partner-i-will-die/",
    "https://komikcast.me/komik/wizard-of-arsenia/",
    "https://komikcast.me/komik/wizards-martial-world/",
    "https://komikcast.me/komik/wizardly-tower/",
    "https://komikcast.me/komik/wo-jia-dashi-xiong-naozi-keng/",
    "https://komikcast.me/komik/wo-kao-qiangpo-zheng-shang-wangzhe/",
    "https://komikcast.me/komik/wo-zai-hougong-dang-ju-ju/",
    "https://komikcast.me/komik/wolf-girl-and-black-prince/",
    "https://komikcast.me/komik/wolhan-gangcheonrok/",
    "https://komikcast.me/komik/wondance/",
    "https://komikcast.me/komik/wonder-rabbit-girl/",
    "https://komikcast.me/komik/wonderland/",
    "https://komikcast.me/komik/world-customize-creator/",
    "https://komikcast.me/komik/world-of-immortals/",
    "https://komikcast.me/komik/world-of-immortals-2/",
    "https://komikcast.me/komik/world-of-super-sand-box/",
    "https://komikcast.me/komik/world-teacher-isekaishiki-kyouiku-agent/",
    "https://komikcast.me/komik/world-trigger/",
    "https://komikcast.me/komik/worlds-apocalypse-online/",
    "https://komikcast.me/komik/worlds-ruler/",
    "https://komikcast.me/komik/worldenddebugger/",
    "https://komikcast.me/komik/worlds-best-assassin/",
    "https://komikcast.me/komik/worlds-connection/",
    "https://komikcast.me/komik/worn-and-torn-newbie/",
    "https://komikcast.me/komik/worst/",
    "https://komikcast.me/komik/worst-gaiden-mr-zetton/",
    "https://komikcast.me/komik/wortenia-senki/",
    "https://komikcast.me/komik/worthless-regression/",
    "https://komikcast.me/komik/wotaku-girl-and-high-school-boy/",
    "https://komikcast.me/komik/wotaku-ni-koi-wa-muzukashii/",
    "https://komikcast.me/komik/wu-dong-qian-kun/",
    "https://komikcast.me/komik/wu-fist/",
    "https://komikcast.me/komik/wu-ji-jian-shen/",
    "https://komikcast.me/komik/wu-li-tian-jiao/",
    "https://komikcast.me/komik/wu-ling/",
    "https://komikcast.me/komik/wu-ling-jiutian/",
    "https://komikcast.me/komik/wu-ni-shanhe/",
    "https://komikcast.me/komik/wushen-zhizun/",
    "https://komikcast.me/komik/wuxian-shitu/",
    "https://komikcast.me/komik/x-ash/",
    "https://komikcast.me/komik/x-epoch-of-dragon/",
    "https://komikcast.me/komik/x-blade/",
    "https://komikcast.me/komik/x-ray-vision/",
    "https://komikcast.me/komik/xe-organization/",
    "https://komikcast.me/komik/xian-ni/",
    "https://komikcast.me/komik/xian-zhou/",
    "https://komikcast.me/komik/xianwu-dizun/",
    "https://komikcast.me/komik/xianzun-luowuji/",
    "https://komikcast.me/komik/xianzun-system-in-the-city/",
    "https://komikcast.me/komik/xinhun-zhang-men-gao-jijian/",
    "https://komikcast.me/komik/xiu-tian-chuan/",
    "https://komikcast.me/komik/xiuzhen-girls-school-all-girls-want-to-put-me-down/",
    "https://komikcast.me/komik/xo-sisters/",
    "https://komikcast.me/komik/xuantian-supreme/",
    "https://komikcast.me/komik/xx-demo-mahou-shoujo-ni-naremasu-ka/",
    "https://komikcast.me/komik/yabai-hito-ni-hitomebore-suru-hanashi/",
    "https://komikcast.me/komik/yada-san-is-cold/",
    "https://komikcast.me/komik/yagate-kimi-ni-naru/",
    "https://komikcast.me/komik/yagete-maken-no-alicebell/",
    "https://komikcast.me/komik/yahabe/",
    "https://komikcast.me/komik/yahari-4-koma-demo-ore-no-seishun-love-comedy-wa-machigatteiru/",
    "https://komikcast.me/komik/yahari-ore-no-seishun-love-comedy-wa-machigatteiru-monologue/",
    "https://komikcast.me/komik/yajin-tensei-karate-survivor-in-another-world/",
    "https://komikcast.me/komik/yakedo-shoujo/",
    "https://komikcast.me/komik/yakudatazu-skill-ni-jinsei-o-sosogikomi-25-nen-imasara-saikyou-no-boukentan-midori-kashi-no-akira/",
    "https://komikcast.me/komik/yakudatazu-to-iware-yuusha-party-o-tsuihou-sareta-ore-saikyou-skill-jakuten-kanpa-ga-kakusei-shimashita/",
    "https://komikcast.me/komik/yakumo-san-wa-ezuke-ga-shitai/",
    "https://komikcast.me/komik/yakusai-no-moushigo-to-seijo-no-meikyuu/",
    "https://komikcast.me/komik/yakushoku-distopiary/",
    "https://komikcast.me/komik/yakuza-to-metsuki-no-warui-onna-keiji-no-hanashi/",
    "https://komikcast.me/komik/yakuza-yuri/",
    "https://komikcast.me/komik/yama-no-susume/",
    "https://komikcast.me/komik/yamada-to-sensei/",
    "https://komikcast.me/komik/yamada-kun-to-7-nin-no-majo/",
    "https://komikcast.me/komik/yamada-kun-to-lv999-no-koi-wo-suru/",
    "https://komikcast.me/komik/yan-mos-favored-consort/",
    "https://komikcast.me/komik/yancha-gal-no-anjou-san/",
    "https://komikcast.me/komik/yancha-gal-no-anjou-san-web/",
    "https://komikcast.me/komik/yandere-imouto-ni-aisaresugite-kozukuri-kankin-seikatsu/",
    "https://komikcast.me/komik/yandere-kanojo/",
    "https://komikcast.me/komik/yandere-x-stalker/",
    "https://komikcast.me/komik/yankee-jk-kuzuhana-chan/",
    "https://komikcast.me/komik/yankee-wa-isekai-de-seirei-ni-aisaremasu/",
    "https://komikcast.me/komik/yankee-kun-to-hakujou-gaaru/",
    "https://komikcast.me/komik/yankee-kun-megane-chan/",
    "https://komikcast.me/komik/yao-zhong/",
    "https://komikcast.me/komik/yaoguai-mingdan/",
    "https://komikcast.me/komik/yari-no-yuusha-no-yarinaoshi/",
    "https://komikcast.me/komik/yari-sugita-majin-senmetsu-sha-no-nana-tai-tsumi-yuugi-new-game/",
    "https://komikcast.me/komik/yaritsukai-to-kuroneko/",
    "https://komikcast.me/komik/yasashii-jikan/",
    "https://komikcast.me/komik/yasashii-kazoku-to-takusan-no-mofumofu-ni-kakomarete/",
    "https://komikcast.me/komik/yasashii-sekai-no-tsukurikata/",
    "https://komikcast.me/komik/yasei-no-last-boss-ga-arawareta/",
    "https://komikcast.me/komik/yatarato-sasshi-no-ii-ore-wa-dokuzetsu-kuudere-bishoujo-no-chiisana-dere-mo-minogasazu-ni-guigui-iku/",
    "https://komikcast.me/komik/yesterday-wo-utatte/",
    "https://komikcast.me/komik/yi-shen-dang-guan/",
    "https://komikcast.me/komik/yigret/",
    "https://komikcast.me/komik/yin-yang-changer/",
    "https://komikcast.me/komik/yin-zhi-shoumuren/",
    "https://komikcast.me/komik/yjk-no-ijou-na-aijou/",
    "https://komikcast.me/komik/yo-jo-life/",
    "https://komikcast.me/komik/yochi-nouryoku-manga-kunou-chiyo/",
    "https://komikcast.me/komik/yofukashi-no-uta/",
    "https://komikcast.me/komik/yogen-no-nayuta/",
    "https://komikcast.me/komik/yojouhan-isekai-kouryuu-ki/",
    "https://komikcast.me/komik/yokohama-kaidashi-kikou/",
    "https://komikcast.me/komik/yome-ga-loli-tte-do-yo/",
    "https://komikcast.me/komik/yome-no-manimani/",
    "https://komikcast.me/komik/yomekura/",
    "https://komikcast.me/komik/yomi-no-tsugai/",
    "https://komikcast.me/komik/yonakano-reiji-ni-haremu-wo/",
    "https://komikcast.me/komik/yondai-eiyuu-no-kiro/",
    "https://komikcast.me/komik/yondome-wa-iya-na-shizokusei-majutsushi/",
    "https://komikcast.me/komik/yong-heng-zhi-zun/",
    "https://komikcast.me/komik/yongbi/",
    "https://komikcast.me/komik/yongbi-the-invincible-a-side-story/",
    "https://komikcast.me/komik/the-four-sisters-elves-wait-for-the-night/",
    "https://komikcast.me/komik/yoru-to-umi/",
    "https://komikcast.me/komik/yoshioka-san-is-in-a-bad-mood/",
    "https://komikcast.me/komik/yotsuba-to/",
    "https://komikcast.me/komik/you-cant-be-brave-in-front-of-your-best-friend/",
    "https://komikcast.me/komik/you-dont-want-childhood-friend-as-your-mom/",
    "https://komikcast.me/komik/you-immortal-cultivate-i-draw-cards/",
    "https://komikcast.me/komik/youjo-senki/",
    "https://komikcast.me/komik/youkai-ame-onna-ni-yoru-kamigakushi/",
    "https://komikcast.me/komik/youkai-gurentai/",
    "https://komikcast.me/komik/youkai-shoujo-monsuga/",
    "https://komikcast.me/komik/youkoso-genkai-syuraku-he/",
    "https://komikcast.me/komik/youkoso-jitsuryoku-shijou-shugi-no-kyoushitsu-e-2-nensei-hen/",
    "https://komikcast.me/komik/young-boy-and-diamond/",
    "https://komikcast.me/komik/young-master-is-too-righteous/",
    "https://komikcast.me/komik/young-master-return-to-16/",
    "https://komikcast.me/komik/young-sorcerer-master/",
    "https://komikcast.me/komik/younger-boyfriend-who-keeps-pestering-you-about-finishing-sekiro/",
    "https://komikcast.me/komik/youngest-chef-from-the-3rd-rate-hotel/",
    "https://komikcast.me/komik/your-empire/",
    "https://komikcast.me/komik/your-girlfriend-is-about-to-do-something-super-amazing/",
    "https://komikcast.me/komik/your-graduation/",
    "https://komikcast.me/komik/your-modern-white-knight/",
    "https://komikcast.me/komik/your-powers-belongs-to-me/",
    "https://komikcast.me/komik/yousei-kishi-ransurotto/",
    "https://komikcast.me/komik/yowamushi-pedal/",
    "https://komikcast.me/komik/yu-jie-superb-master/",
    "https://komikcast.me/komik/yu-ling-shi/",
    "https://komikcast.me/komik/yu-xue-shang-hou/",
    "https://komikcast.me/komik/yu-zhu-long/",
    "https://komikcast.me/komik/yu-gi-oh-ocg-stories/",
    "https://komikcast.me/komik/yu-gi-oh-ocg-structures/",
    "https://komikcast.me/komik/yuan-zun/",
    "https://komikcast.me/komik/yue-shang/",
    "https://komikcast.me/komik/yugami-kun-ni-wa-tomodachi-ga-inai/",
    "https://komikcast.me/komik/yugamira/",
    "https://komikcast.me/komik/yugens-all-ghouls-homeroom/",
    "https://komikcast.me/komik/yuiitsu-muni-no-saikyou-tamer/",
    "https://komikcast.me/komik/yuizaki-san-wa-nageru/",
    "https://komikcast.me/komik/yuki-nee-chan-no-kan-nou-gokko/",
    "https://komikcast.me/komik/yuki-no-niiduma-wa-boku-to-tokeaitai/",
    "https://komikcast.me/komik/yuki-to-sumi/",
    "https://komikcast.me/komik/yuki-doke-no-netsu/",
    "https://komikcast.me/komik/yuko-sae-tatakaeba/",
    "https://komikcast.me/komik/yuko-san-wa-mirare/",
    "https://komikcast.me/komik/yume-de-mita-ano-ko-no-tame-ni/",
    "https://komikcast.me/komik/yume-midokoro/",
    "https://komikcast.me/komik/yume-miru-prima-girl/",
    "https://komikcast.me/komik/yume-no-shizuku-to-hoshi-no-hana/",
    "https://komikcast.me/komik/yumekui-merry/",
    "https://komikcast.me/komik/yumemiru-danshi-wa-genjitsushugisha/",
    "https://komikcast.me/komik/yumizuka-iroha-wa-tejun-ga-daiji/",
    "https://komikcast.me/komik/yun-tian-yao/",
    "https://komikcast.me/komik/yuragisou-no-yuuna-san/",
    "https://komikcast.me/komik/yureka/",
    "https://komikcast.me/komik/yuri-moyou-sakimiya-4-shimai-no-koi/",
    "https://komikcast.me/komik/yuri-na-watashi-akuma-na-kanojo/",
    "https://komikcast.me/komik/yuri-no-hanasaku-wagaya-de/",
    "https://komikcast.me/komik/yuri-otaku-family/",
    "https://komikcast.me/komik/yuri-terrorism/",
    "https://komikcast.me/komik/yurikon/",
    "https://komikcast.me/komik/yurucamp/",
    "https://komikcast.me/komik/yurufuwa-nouka-no-mojibake-skill-isekai-de-katarogu-tsuuhan-yattemasu/",
    "https://komikcast.me/komik/yuujin-ni-500-yen-kashitara-shakkin-no-kata-ni-imouto-wo-yokoshite-kita-nodakeredo-ore-wa-ittai-dou-sureba-iindarou/",
    "https://komikcast.me/komik/yuukoku-no-moriarty/",
    "https://komikcast.me/komik/yuukyuu-no-gusha-asley-no-kenja-no-susume/",
    "https://komikcast.me/komik/yuusen-shoujo-plug-in-girl/",
    "https://komikcast.me/komik/yuusha-densetsu-no-uragawa-de-ore-wa-eiyuu-densetsu-o-tsukurimasu-oudou-goroshi-no-eiyuutan/",
    "https://komikcast.me/komik/yuusha-ga-shinda/",
    "https://komikcast.me/komik/yuusha-goikkou-no-kaerimichi/",
    "https://komikcast.me/komik/yuusha-gojo-kumiai-kouryuugata-keijiban/",
    "https://komikcast.me/komik/yuusha-ka-maou-ka-erabasete/",
    "https://komikcast.me/komik/yuusha-ni-narenakatta-ore-wa-isekai-de/",
    "https://komikcast.me/komik/yuusha-no-kawari-ni-maou-toubatsu-shitara-tegara-o-yokodoroi-saremashita/",
    "https://komikcast.me/komik/yuusha-no-mago-maou-no-musume/",
    "https://komikcast.me/komik/yuusha-party-ni-kawaii-ko-ga-ita-no-de-kokuhaku-shite-mita/",
    "https://komikcast.me/komik/yuusha-party-o-oida-sareta-kiyou-binbou/",
    "https://komikcast.me/komik/yuusha-party-wo-tsuihou-sareta-beast-tamer-saikyou-shuzoku-nekomimi-shojo-to-deau/",
    "https://komikcast.me/komik/yuusha-party-wo-tuihou-sareta-ore-daga/",
    "https://komikcast.me/komik/yuusha-shoukan-ni-makikomareta-kedo-isekai-wa-heiwa-deshita/",
    "https://komikcast.me/komik/yuusha-shoutai-kamoku-yuusha-wa-nagisa-renai/",
    "https://komikcast.me/komik/yuusha-to-monshou-no-ragnarok/",
    "https://komikcast.me/komik/yuusha-wa-shimei-wo-wasureteru/",
    "https://komikcast.me/komik/yuusha-sama-no-osananajimi-to-iu-shokugyou-no-make-heroine-ni-tensei-shita-no-de-chougoushi-ni-job-change-shimasu/",
    "https://komikcast.me/komik/yuusha-sama-yukagen-wa-ikaga-desu-ka/",
    "https://komikcast.me/komik/yuusha-yamemasu/",
    "https://komikcast.me/komik/yuutousei-to-himitsu-no-oshigoto/",
    "https://komikcast.me/komik/yuzes-record-of-mountains-and-seas/",
    "https://komikcast.me/komik/yuzukawa-san-wa-sasshite-hoshii/",
    "https://komikcast.me/komik/yuzumori-san/",
    "https://komikcast.me/komik/zai-x-10/",
    "https://komikcast.me/komik/zang-hai-hua/",
    "https://komikcast.me/komik/zang-hun-men/",
    "https://komikcast.me/komik/zang-jian-jue/",
    "https://komikcast.me/komik/zannen-jokanbu-black-general-san/",
    "https://komikcast.me/komik/zatsugaku-suki-no-saiga-san/",
    "https://komikcast.me/komik/zen-martial-arts-academy/",
    "https://komikcast.me/komik/zenbu-chodai/",
    "https://komikcast.me/komik/zenbu-kimi-no-sei/",
    "https://komikcast.me/komik/zenbu-kimi-no-sei-da-one-shot/",
    "https://komikcast.me/komik/zenjikuu-senbatsu-saijaku-saiteihen-ketteisen/",
    "https://komikcast.me/komik/zennin-ossan-umarekawattara-sss-rank-jinsei-ga-kakutei-shita/",
    "https://komikcast.me/komik/zenryoku-henai-girl/",
    "https://komikcast.me/komik/zense-coupling/",
    "https://komikcast.me/komik/zense-seijo-wa-te-o-nukitai-yokiyoki/",
    "https://komikcast.me/komik/zensei-wa-ken-mikado-konjou-kuzu-ouji/",
    "https://komikcast.me/komik/zephyr-impact-war/",
    "https://komikcast.me/komik/zero-game/",
    "https://komikcast.me/komik/zero-no-dai-kenja-wakagaetta-saikyou-kenja-wa-shoutai-o-kakushite-nariagaru/",
    "https://komikcast.me/komik/zetsurin/",
    "https://komikcast.me/komik/zettai-ni-damage-wo-ukenai-skill-wo-moratta-node-boukensha-to-shite-musou-shite-miru/",
    "https://komikcast.me/komik/zettai-ni-hatarakitakunai-dungeon-master-ga-damin-wo-musaboru-made/",
    "https://komikcast.me/komik/zettai-ni-yatte-wa-ikenai-isekai-shoukan/",
    "https://komikcast.me/komik/zettai-osananajimi-sengen/",
    "https://komikcast.me/komik/zettai-watashi-no-koto-suki-daro/",
    "https://komikcast.me/komik/zettai-zetsubou-shoujo-danganronpa-another-episode-genocider-mode/",
    "https://komikcast.me/komik/zhan-long/",
    "https://komikcast.me/komik/zhang-ding/",
    "https://komikcast.me/komik/ziga/",
    "https://komikcast.me/komik/zingnize/",
    "https://komikcast.me/komik/zipang/",
    "https://komikcast.me/komik/zipman/",
    "https://komikcast.me/komik/zither-emperor/",
    "https://komikcast.me/komik/zombi-shoujo-no-fujimi-san/",
    "https://komikcast.me/komik/zombie-100-zombie-ni-naru-made-ni-shitai-100-no-koto/",
    "https://komikcast.me/komik/zomviguarna/",
    "https://komikcast.me/komik/zoo-in-the-dorm/",
    "https://komikcast.me/komik/zoombie-city/",
    "https://komikcast.me/komik/zui-qiang-shen/",
    "https://komikcast.me/komik/zui-qiang-zhan-hun/",
    "https://komikcast.me/komik/zui-wu-dao/",
    "https://komikcast.me/komik/zutto-otokonoko-da-to-omotte-ita-gakitaishou-ga-onnanoko-deshita/"
];
exports["default"] = kcAll;


/***/ }),

/***/ "./node_modules/async/dist/async.mjs":
/*!*******************************************!*\
  !*** ./node_modules/async/dist/async.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "apply": () => (/* binding */ apply),
/* harmony export */   "applyEach": () => (/* binding */ applyEach$1),
/* harmony export */   "applyEachSeries": () => (/* binding */ applyEachSeries),
/* harmony export */   "asyncify": () => (/* binding */ asyncify),
/* harmony export */   "auto": () => (/* binding */ auto),
/* harmony export */   "autoInject": () => (/* binding */ autoInject),
/* harmony export */   "cargo": () => (/* binding */ cargo),
/* harmony export */   "cargoQueue": () => (/* binding */ cargo$1),
/* harmony export */   "compose": () => (/* binding */ compose),
/* harmony export */   "concat": () => (/* binding */ concat$1),
/* harmony export */   "concatLimit": () => (/* binding */ concatLimit$1),
/* harmony export */   "concatSeries": () => (/* binding */ concatSeries$1),
/* harmony export */   "constant": () => (/* binding */ constant),
/* harmony export */   "detect": () => (/* binding */ detect$1),
/* harmony export */   "detectLimit": () => (/* binding */ detectLimit$1),
/* harmony export */   "detectSeries": () => (/* binding */ detectSeries$1),
/* harmony export */   "dir": () => (/* binding */ dir),
/* harmony export */   "doUntil": () => (/* binding */ doUntil),
/* harmony export */   "doWhilst": () => (/* binding */ doWhilst$1),
/* harmony export */   "each": () => (/* binding */ each),
/* harmony export */   "eachLimit": () => (/* binding */ eachLimit$2),
/* harmony export */   "eachOf": () => (/* binding */ eachOf$1),
/* harmony export */   "eachOfLimit": () => (/* binding */ eachOfLimit$2),
/* harmony export */   "eachOfSeries": () => (/* binding */ eachOfSeries$1),
/* harmony export */   "eachSeries": () => (/* binding */ eachSeries$1),
/* harmony export */   "ensureAsync": () => (/* binding */ ensureAsync),
/* harmony export */   "every": () => (/* binding */ every$1),
/* harmony export */   "everyLimit": () => (/* binding */ everyLimit$1),
/* harmony export */   "everySeries": () => (/* binding */ everySeries$1),
/* harmony export */   "filter": () => (/* binding */ filter$1),
/* harmony export */   "filterLimit": () => (/* binding */ filterLimit$1),
/* harmony export */   "filterSeries": () => (/* binding */ filterSeries$1),
/* harmony export */   "forever": () => (/* binding */ forever$1),
/* harmony export */   "groupBy": () => (/* binding */ groupBy),
/* harmony export */   "groupByLimit": () => (/* binding */ groupByLimit$1),
/* harmony export */   "groupBySeries": () => (/* binding */ groupBySeries),
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "map": () => (/* binding */ map$1),
/* harmony export */   "mapLimit": () => (/* binding */ mapLimit$1),
/* harmony export */   "mapSeries": () => (/* binding */ mapSeries$1),
/* harmony export */   "mapValues": () => (/* binding */ mapValues),
/* harmony export */   "mapValuesLimit": () => (/* binding */ mapValuesLimit$1),
/* harmony export */   "mapValuesSeries": () => (/* binding */ mapValuesSeries),
/* harmony export */   "memoize": () => (/* binding */ memoize),
/* harmony export */   "nextTick": () => (/* binding */ nextTick),
/* harmony export */   "parallel": () => (/* binding */ parallel),
/* harmony export */   "parallelLimit": () => (/* binding */ parallelLimit),
/* harmony export */   "priorityQueue": () => (/* binding */ priorityQueue),
/* harmony export */   "queue": () => (/* binding */ queue$1),
/* harmony export */   "race": () => (/* binding */ race$1),
/* harmony export */   "reduce": () => (/* binding */ reduce$1),
/* harmony export */   "reduceRight": () => (/* binding */ reduceRight),
/* harmony export */   "reflect": () => (/* binding */ reflect),
/* harmony export */   "reflectAll": () => (/* binding */ reflectAll),
/* harmony export */   "reject": () => (/* binding */ reject$2),
/* harmony export */   "rejectLimit": () => (/* binding */ rejectLimit$1),
/* harmony export */   "rejectSeries": () => (/* binding */ rejectSeries$1),
/* harmony export */   "retry": () => (/* binding */ retry),
/* harmony export */   "retryable": () => (/* binding */ retryable),
/* harmony export */   "seq": () => (/* binding */ seq),
/* harmony export */   "series": () => (/* binding */ series),
/* harmony export */   "setImmediate": () => (/* binding */ setImmediate$1),
/* harmony export */   "some": () => (/* binding */ some$1),
/* harmony export */   "someLimit": () => (/* binding */ someLimit$1),
/* harmony export */   "someSeries": () => (/* binding */ someSeries$1),
/* harmony export */   "sortBy": () => (/* binding */ sortBy$1),
/* harmony export */   "timeout": () => (/* binding */ timeout),
/* harmony export */   "times": () => (/* binding */ times),
/* harmony export */   "timesLimit": () => (/* binding */ timesLimit),
/* harmony export */   "timesSeries": () => (/* binding */ timesSeries),
/* harmony export */   "transform": () => (/* binding */ transform),
/* harmony export */   "tryEach": () => (/* binding */ tryEach$1),
/* harmony export */   "unmemoize": () => (/* binding */ unmemoize),
/* harmony export */   "until": () => (/* binding */ until),
/* harmony export */   "waterfall": () => (/* binding */ waterfall$1),
/* harmony export */   "whilst": () => (/* binding */ whilst$1),
/* harmony export */   "all": () => (/* binding */ every$1),
/* harmony export */   "allLimit": () => (/* binding */ everyLimit$1),
/* harmony export */   "allSeries": () => (/* binding */ everySeries$1),
/* harmony export */   "any": () => (/* binding */ some$1),
/* harmony export */   "anyLimit": () => (/* binding */ someLimit$1),
/* harmony export */   "anySeries": () => (/* binding */ someSeries$1),
/* harmony export */   "find": () => (/* binding */ detect$1),
/* harmony export */   "findLimit": () => (/* binding */ detectLimit$1),
/* harmony export */   "findSeries": () => (/* binding */ detectSeries$1),
/* harmony export */   "flatMap": () => (/* binding */ concat$1),
/* harmony export */   "flatMapLimit": () => (/* binding */ concatLimit$1),
/* harmony export */   "flatMapSeries": () => (/* binding */ concatSeries$1),
/* harmony export */   "forEach": () => (/* binding */ each),
/* harmony export */   "forEachSeries": () => (/* binding */ eachSeries$1),
/* harmony export */   "forEachLimit": () => (/* binding */ eachLimit$2),
/* harmony export */   "forEachOf": () => (/* binding */ eachOf$1),
/* harmony export */   "forEachOfSeries": () => (/* binding */ eachOfSeries$1),
/* harmony export */   "forEachOfLimit": () => (/* binding */ eachOfLimit$2),
/* harmony export */   "inject": () => (/* binding */ reduce$1),
/* harmony export */   "foldl": () => (/* binding */ reduce$1),
/* harmony export */   "foldr": () => (/* binding */ reduceRight),
/* harmony export */   "select": () => (/* binding */ filter$1),
/* harmony export */   "selectLimit": () => (/* binding */ filterLimit$1),
/* harmony export */   "selectSeries": () => (/* binding */ filterSeries$1),
/* harmony export */   "wrapSync": () => (/* binding */ asyncify),
/* harmony export */   "during": () => (/* binding */ whilst$1),
/* harmony export */   "doDuring": () => (/* binding */ doWhilst$1)
/* harmony export */ });
/**
 * Creates a continuation function with some arguments already applied.
 *
 * Useful as a shorthand when combined with other control flow functions. Any
 * arguments passed to the returned function are added to the arguments
 * originally passed to apply.
 *
 * @name apply
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {Function} fn - The function you want to eventually apply all
 * arguments to. Invokes with (arguments...).
 * @param {...*} arguments... - Any number of arguments to automatically apply
 * when the continuation is called.
 * @returns {Function} the partially-applied function
 * @example
 *
 * // using apply
 * async.parallel([
 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
 *     async.apply(fs.writeFile, 'testfile2', 'test2')
 * ]);
 *
 *
 * // the same process without using apply
 * async.parallel([
 *     function(callback) {
 *         fs.writeFile('testfile1', 'test1', callback);
 *     },
 *     function(callback) {
 *         fs.writeFile('testfile2', 'test2', callback);
 *     }
 * ]);
 *
 * // It's possible to pass any number of additional arguments when calling the
 * // continuation:
 *
 * node> var fn = async.apply(sys.puts, 'one');
 * node> fn('two', 'three');
 * one
 * two
 * three
 */
function apply(fn, ...args) {
    return (...callArgs) => fn(...args,...callArgs);
}

function initialParams (fn) {
    return function (...args/*, callback*/) {
        var callback = args.pop();
        return fn.call(this, args, callback);
    };
}

/* istanbul ignore file */

var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;
var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
    setTimeout(fn, 0);
}

function wrap(defer) {
    return (fn, ...args) => defer(() => fn(...args));
}

var _defer;

if (hasQueueMicrotask) {
    _defer = queueMicrotask;
} else if (hasSetImmediate) {
    _defer = setImmediate;
} else if (hasNextTick) {
    _defer = process.nextTick;
} else {
    _defer = fallback;
}

var setImmediate$1 = wrap(_defer);

/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */
function asyncify(func) {
    if (isAsync(func)) {
        return function (...args/*, callback*/) {
            const callback = args.pop();
            const promise = func.apply(this, args);
            return handlePromise(promise, callback)
        }
    }

    return initialParams(function (args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if (result && typeof result.then === 'function') {
            return handlePromise(result, callback)
        } else {
            callback(null, result);
        }
    });
}

function handlePromise(promise, callback) {
    return promise.then(value => {
        invokeCallback(callback, null, value);
    }, err => {
        invokeCallback(callback, err && err.message ? err : new Error(err));
    });
}

function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (err) {
        setImmediate$1(e => { throw e }, err);
    }
}

function isAsync(fn) {
    return fn[Symbol.toStringTag] === 'AsyncFunction';
}

function isAsyncGenerator(fn) {
    return fn[Symbol.toStringTag] === 'AsyncGenerator';
}

function isAsyncIterable(obj) {
    return typeof obj[Symbol.asyncIterator] === 'function';
}

function wrapAsync(asyncFn) {
    if (typeof asyncFn !== 'function') throw new Error('expected a function')
    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
}

// conditionally promisify a function.
// only return a promise if a callback is omitted
function awaitify (asyncFn, arity = asyncFn.length) {
    if (!arity) throw new Error('arity is undefined')
    function awaitable (...args) {
        if (typeof args[arity - 1] === 'function') {
            return asyncFn.apply(this, args)
        }

        return new Promise((resolve, reject) => {
            args[arity - 1] = (err, ...cbArgs) => {
                if (err) return reject(err)
                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
            };
            asyncFn.apply(this, args);
        })
    }

    return awaitable
}

function applyEach (eachfn) {
    return function applyEach(fns, ...callArgs) {
        const go = awaitify(function (callback) {
            var that = this;
            return eachfn(fns, (fn, cb) => {
                wrapAsync(fn).apply(that, callArgs.concat(cb));
            }, callback);
        });
        return go;
    };
}

function _asyncMap(eachfn, arr, iteratee, callback) {
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = wrapAsync(iteratee);

    return eachfn(arr, (value, _, iterCb) => {
        var index = counter++;
        _iteratee(value, (err, v) => {
            results[index] = v;
            iterCb(err);
        });
    }, err => {
        callback(err, results);
    });
}

function isArrayLike(value) {
    return value &&
        typeof value.length === 'number' &&
        value.length >= 0 &&
        value.length % 1 === 0;
}

// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
const breakLoop = {};

function once(fn) {
    function wrapper (...args) {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
    }
    Object.assign(wrapper, fn);
    return wrapper
}

function getIterator (coll) {
    return coll[Symbol.iterator] && coll[Symbol.iterator]();
}

function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? {value: coll[i], key: i} : null;
    }
}

function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
        var item = iterator.next();
        if (item.done)
            return null;
        i++;
        return {value: item.value, key: i};
    }
}

function createObjectIterator(obj) {
    var okeys = obj ? Object.keys(obj) : [];
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        if (key === '__proto__') {
            return next();
        }
        return i < len ? {value: obj[key], key} : null;
    };
}

function createIterator(coll) {
    if (isArrayLike(coll)) {
        return createArrayIterator(coll);
    }

    var iterator = getIterator(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}

function onlyOnce(fn) {
    return function (...args) {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
    };
}

// for async generators
function asyncEachOfLimit(generator, limit, iteratee, callback) {
    let done = false;
    let canceled = false;
    let awaiting = false;
    let running = 0;
    let idx = 0;

    function replenish() {
        //console.log('replenish')
        if (running >= limit || awaiting || done) return
        //console.log('replenish awaiting')
        awaiting = true;
        generator.next().then(({value, done: iterDone}) => {
            //console.log('got value', value)
            if (canceled || done) return
            awaiting = false;
            if (iterDone) {
                done = true;
                if (running <= 0) {
                    //console.log('done nextCb')
                    callback(null);
                }
                return;
            }
            running++;
            iteratee(value, idx, iterateeCallback);
            idx++;
            replenish();
        }).catch(handleError);
    }

    function iterateeCallback(err, result) {
        //console.log('iterateeCallback')
        running -= 1;
        if (canceled) return
        if (err) return handleError(err)

        if (err === false) {
            done = true;
            canceled = true;
            return
        }

        if (result === breakLoop || (done && running <= 0)) {
            done = true;
            //console.log('done iterCb')
            return callback(null);
        }
        replenish();
    }

    function handleError(err) {
        if (canceled) return
        awaiting = false;
        done = true;
        callback(err);
    }

    replenish();
}

var eachOfLimit = (limit) => {
    return (obj, iteratee, callback) => {
        callback = once(callback);
        if (limit <= 0) {
            throw new RangeError('concurrency limit cannot be less than 1')
        }
        if (!obj) {
            return callback(null);
        }
        if (isAsyncGenerator(obj)) {
            return asyncEachOfLimit(obj, limit, iteratee, callback)
        }
        if (isAsyncIterable(obj)) {
            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)
        }
        var nextElem = createIterator(obj);
        var done = false;
        var canceled = false;
        var running = 0;
        var looping = false;

        function iterateeCallback(err, value) {
            if (canceled) return
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            }
            else if (err === false) {
                done = true;
                canceled = true;
            }
            else if (value === breakLoop || (done && running <= 0)) {
                done = true;
                return callback(null);
            }
            else if (!looping) {
                replenish();
            }
        }

        function replenish () {
            looping = true;
            while (running < limit && !done) {
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) {
                        callback(null);
                    }
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
            }
            looping = false;
        }

        replenish();
    };
};

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachOfLimit$1(coll, limit, iteratee, callback) {
    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
}

var eachOfLimit$2 = awaitify(eachOfLimit$1, 4);

// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = once(callback);
    var index = 0,
        completed = 0,
        {length} = coll,
        canceled = false;
    if (length === 0) {
        callback(null);
    }

    function iteratorCallback(err, value) {
        if (err === false) {
            canceled = true;
        }
        if (canceled === true) return
        if (err) {
            callback(err);
        } else if ((++completed === length) || value === breakLoop) {
            callback(null);
        }
    }

    for (; index < length; index++) {
        iteratee(coll[index], index, onlyOnce(iteratorCallback));
    }
}

// a generic version of eachOf which can handle array, object, and iterator cases.
function eachOfGeneric (coll, iteratee, callback) {
    return eachOfLimit$2(coll, Infinity, iteratee, callback);
}

/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dev.json is a file containing a valid json object config for dev environment
 * // dev.json is a file containing a valid json object config for test environment
 * // prod.json is a file containing a valid json object config for prod environment
 * // invalid.json is a file with a malformed json object
 *
 * let configs = {}; //global variable
 * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};
 * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};
 *
 * // asynchronous function that reads a json file and parses the contents as json object
 * function parseFile(file, key, callback) {
 *     fs.readFile(file, "utf8", function(err, data) {
 *         if (err) return calback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }
 *
 * // Using callbacks
 * async.forEachOf(validConfigFileMap, parseFile, function (err) {
 *     if (err) {
 *         console.error(err);
 *     } else {
 *         console.log(configs);
 *         // configs is now a map of JSON data, e.g.
 *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 *     }
 * });
 *
 * //Error handing
 * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {
 *     if (err) {
 *         console.error(err);
 *         // JSON parse error exception
 *     } else {
 *         console.log(configs);
 *     }
 * });
 *
 * // Using Promises
 * async.forEachOf(validConfigFileMap, parseFile)
 * .then( () => {
 *     console.log(configs);
 *     // configs is now a map of JSON data, e.g.
 *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 * }).catch( err => {
 *     console.error(err);
 * });
 *
 * //Error handing
 * async.forEachOf(invalidConfigFileMap, parseFile)
 * .then( () => {
 *     console.log(configs);
 * }).catch( err => {
 *     console.error(err);
 *     // JSON parse error exception
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.forEachOf(validConfigFileMap, parseFile);
 *         console.log(configs);
 *         // configs is now a map of JSON data, e.g.
 *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * //Error handing
 * async () => {
 *     try {
 *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);
 *         console.log(configs);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // JSON parse error exception
 *     }
 * }
 *
 */
function eachOf(coll, iteratee, callback) {
    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
    return eachOfImplementation(coll, wrapAsync(iteratee), callback);
}

var eachOf$1 = awaitify(eachOf, 3);

/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callbacks
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.map(fileList, getFileSizeInBytes, function(err, results) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(results);
 *         // results is now an array of the file size in bytes for each file, e.g.
 *         // [ 1000, 2000, 3000]
 *     }
 * });
 *
 * // Error Handling
 * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(results);
 *     }
 * });
 *
 * // Using Promises
 * async.map(fileList, getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 *     // results is now an array of the file size in bytes for each file, e.g.
 *     // [ 1000, 2000, 3000]
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.map(withMissingFileList, getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.map(fileList, getFileSizeInBytes);
 *         console.log(results);
 *         // results is now an array of the file size in bytes for each file, e.g.
 *         // [ 1000, 2000, 3000]
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let results = await async.map(withMissingFileList, getFileSizeInBytes);
 *         console.log(results);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function map (coll, iteratee, callback) {
    return _asyncMap(eachOf$1, coll, iteratee, callback)
}
var map$1 = awaitify(map, 3);

/**
 * Applies the provided arguments to each function in the array, calling
 * `callback` after all functions have completed. If you only provide the first
 * argument, `fns`, then it will return a function which lets you pass in the
 * arguments as if it were a single function call. If more arguments are
 * provided, `callback` is required while `args` is still optional. The results
 * for each of the applied async functions are passed to the final callback
 * as an array.
 *
 * @name applyEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s
 * to all call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {AsyncFunction} - Returns a function that takes no args other than
 * an optional callback, that is the result of applying the `args` to each
 * of the functions.
 * @example
 *
 * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')
 *
 * appliedFn((err, results) => {
 *     // results[0] is the results for `enableSearch`
 *     // results[1] is the results for `updateSchema`
 * });
 *
 * // partial application example:
 * async.each(
 *     buckets,
 *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),
 *     callback
 * );
 */
var applyEach$1 = applyEach(map$1);

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
 *
 * @name eachOfSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachOfSeries(coll, iteratee, callback) {
    return eachOfLimit$2(coll, 1, iteratee, callback)
}
var eachOfSeries$1 = awaitify(eachOfSeries, 3);

/**
 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
 *
 * @name mapSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapSeries (coll, iteratee, callback) {
    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)
}
var mapSeries$1 = awaitify(mapSeries, 3);

/**
 * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
 *
 * @name applyEachSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.applyEach]{@link module:ControlFlow.applyEach}
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all
 * call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {AsyncFunction} - A function, that when called, is the result of
 * appling the `args` to the list of functions.  It takes no args, other than
 * a callback.
 */
var applyEachSeries = applyEach(mapSeries$1);

const PROMISE_SYMBOL = Symbol('promiseCallback');

function promiseCallback () {
    let resolve, reject;
    function callback (err, ...args) {
        if (err) return reject(err)
        resolve(args.length > 1 ? args : args[0]);
    }

    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {
        resolve = res,
        reject = rej;
    });

    return callback
}

/**
 * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on
 * their requirements. Each function can optionally depend on other functions
 * being completed first, and each function is run as soon as its requirements
 * are satisfied.
 *
 * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence
 * will stop. Further tasks will not execute (so any other functions depending
 * on it will not run), and the main `callback` is immediately called with the
 * error.
 *
 * {@link AsyncFunction}s also receive an object containing the results of functions which
 * have completed so far as the first argument, if they have dependencies. If a
 * task function has no dependencies, it will only be passed a callback.
 *
 * @name auto
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Object} tasks - An object. Each of its properties is either a
 * function or an array of requirements, with the {@link AsyncFunction} itself the last item
 * in the array. The object's key of a property serves as the name of the task
 * defined by that property, i.e. can be used when specifying requirements for
 * other tasks. The function receives one or two arguments:
 * * a `results` object, containing the results of the previously executed
 *   functions, only passed if the task has any dependencies,
 * * a `callback(err, result)` function, which must be called when finished,
 *   passing an `error` (which can be `null`) and the result of the function's
 *   execution.
 * @param {number} [concurrency=Infinity] - An optional `integer` for
 * determining the maximum number of tasks that can be run in parallel. By
 * default, as many as possible.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback. Results are always returned; however, if an
 * error occurs, no further `tasks` will be performed, and the results object
 * will only contain partial results. Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 * @example
 *
 * //Using Callbacks
 * async.auto({
 *     get_data: function(callback) {
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: ['get_data', 'make_folder', function(results, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(results, callback) {
 *         // once the file is written let's email a link to it...
 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *     }]
 * }, function(err, results) {
 *     if (err) {
 *         console.log('err = ', err);
 *     }
 *     console.log('results = ', results);
 *     // results = {
 *     //     get_data: ['data', 'converted to array']
 *     //     make_folder; 'folder',
 *     //     write_file: 'filename'
 *     //     email_link: { file: 'filename', email: 'user@example.com' }
 *     // }
 * });
 *
 * //Using Promises
 * async.auto({
 *     get_data: function(callback) {
 *         console.log('in get_data');
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         console.log('in make_folder');
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: ['get_data', 'make_folder', function(results, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(results, callback) {
 *         // once the file is written let's email a link to it...
 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *     }]
 * }).then(results => {
 *     console.log('results = ', results);
 *     // results = {
 *     //     get_data: ['data', 'converted to array']
 *     //     make_folder; 'folder',
 *     //     write_file: 'filename'
 *     //     email_link: { file: 'filename', email: 'user@example.com' }
 *     // }
 * }).catch(err => {
 *     console.log('err = ', err);
 * });
 *
 * //Using async/await
 * async () => {
 *     try {
 *         let results = await async.auto({
 *             get_data: function(callback) {
 *                 // async code to get some data
 *                 callback(null, 'data', 'converted to array');
 *             },
 *             make_folder: function(callback) {
 *                 // async code to create a directory to store a file in
 *                 // this is run at the same time as getting the data
 *                 callback(null, 'folder');
 *             },
 *             write_file: ['get_data', 'make_folder', function(results, callback) {
 *                 // once there is some data and the directory exists,
 *                 // write the data to a file in the directory
 *                 callback(null, 'filename');
 *             }],
 *             email_link: ['write_file', function(results, callback) {
 *                 // once the file is written let's email a link to it...
 *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *             }]
 *         });
 *         console.log('results = ', results);
 *         // results = {
 *         //     get_data: ['data', 'converted to array']
 *         //     make_folder; 'folder',
 *         //     write_file: 'filename'
 *         //     email_link: { file: 'filename', email: 'user@example.com' }
 *         // }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function auto(tasks, concurrency, callback) {
    if (typeof concurrency !== 'number') {
        // concurrency is optional, shift the args.
        callback = concurrency;
        concurrency = null;
    }
    callback = once(callback || promiseCallback());
    var numTasks = Object.keys(tasks).length;
    if (!numTasks) {
        return callback(null);
    }
    if (!concurrency) {
        concurrency = numTasks;
    }

    var results = {};
    var runningTasks = 0;
    var canceled = false;
    var hasError = false;

    var listeners = Object.create(null);

    var readyTasks = [];

    // for cycle detection:
    var readyToCheck = []; // tasks that have been identified as reachable
    // without the possibility of returning to an ancestor task
    var uncheckedDependencies = {};

    Object.keys(tasks).forEach(key => {
        var task = tasks[key];
        if (!Array.isArray(task)) {
            // no dependencies
            enqueueTask(key, [task]);
            readyToCheck.push(key);
            return;
        }

        var dependencies = task.slice(0, task.length - 1);
        var remainingDependencies = dependencies.length;
        if (remainingDependencies === 0) {
            enqueueTask(key, task);
            readyToCheck.push(key);
            return;
        }
        uncheckedDependencies[key] = remainingDependencies;

        dependencies.forEach(dependencyName => {
            if (!tasks[dependencyName]) {
                throw new Error('async.auto task `' + key +
                    '` has a non-existent dependency `' +
                    dependencyName + '` in ' +
                    dependencies.join(', '));
            }
            addListener(dependencyName, () => {
                remainingDependencies--;
                if (remainingDependencies === 0) {
                    enqueueTask(key, task);
                }
            });
        });
    });

    checkForDeadlocks();
    processQueue();

    function enqueueTask(key, task) {
        readyTasks.push(() => runTask(key, task));
    }

    function processQueue() {
        if (canceled) return
        if (readyTasks.length === 0 && runningTasks === 0) {
            return callback(null, results);
        }
        while(readyTasks.length && runningTasks < concurrency) {
            var run = readyTasks.shift();
            run();
        }

    }

    function addListener(taskName, fn) {
        var taskListeners = listeners[taskName];
        if (!taskListeners) {
            taskListeners = listeners[taskName] = [];
        }

        taskListeners.push(fn);
    }

    function taskComplete(taskName) {
        var taskListeners = listeners[taskName] || [];
        taskListeners.forEach(fn => fn());
        processQueue();
    }


    function runTask(key, task) {
        if (hasError) return;

        var taskCallback = onlyOnce((err, ...result) => {
            runningTasks--;
            if (err === false) {
                canceled = true;
                return
            }
            if (result.length < 2) {
                [result] = result;
            }
            if (err) {
                var safeResults = {};
                Object.keys(results).forEach(rkey => {
                    safeResults[rkey] = results[rkey];
                });
                safeResults[key] = result;
                hasError = true;
                listeners = Object.create(null);
                if (canceled) return
                callback(err, safeResults);
            } else {
                results[key] = result;
                taskComplete(key);
            }
        });

        runningTasks++;
        var taskFn = wrapAsync(task[task.length - 1]);
        if (task.length > 1) {
            taskFn(results, taskCallback);
        } else {
            taskFn(taskCallback);
        }
    }

    function checkForDeadlocks() {
        // Kahn's algorithm
        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
        var currentTask;
        var counter = 0;
        while (readyToCheck.length) {
            currentTask = readyToCheck.pop();
            counter++;
            getDependents(currentTask).forEach(dependent => {
                if (--uncheckedDependencies[dependent] === 0) {
                    readyToCheck.push(dependent);
                }
            });
        }

        if (counter !== numTasks) {
            throw new Error(
                'async.auto cannot execute tasks due to a recursive dependency'
            );
        }
    }

    function getDependents(taskName) {
        var result = [];
        Object.keys(tasks).forEach(key => {
            const task = tasks[key];
            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {
                result.push(key);
            }
        });
        return result;
    }

    return callback[PROMISE_SYMBOL]
}

var FN_ARGS = /^(?:async\s+)?(?:function)?\s*\w*\s*\(\s*([^)]+)\s*\)(?:\s*{)/;
var ARROW_FN_ARGS = /^(?:async\s+)?\(?\s*([^)=]+)\s*\)?(?:\s*=>)/;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /(=.+)?(\s*)$/;

function stripComments(string) {
    let stripped = '';
    let index = 0;
    let endBlockComment = string.indexOf('*/');
    while (index < string.length) {
        if (string[index] === '/' && string[index+1] === '/') {
            // inline comment
            let endIndex = string.indexOf('\n', index);
            index = (endIndex === -1) ? string.length : endIndex;
        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {
            // block comment
            let endIndex = string.indexOf('*/', index);
            if (endIndex !== -1) {
                index = endIndex + 2;
                endBlockComment = string.indexOf('*/', index);
            } else {
                stripped += string[index];
                index++;
            }
        } else {
            stripped += string[index];
            index++;
        }
    }
    return stripped;
}

function parseParams(func) {
    const src = stripComments(func.toString());
    let match = src.match(FN_ARGS);
    if (!match) {
        match = src.match(ARROW_FN_ARGS);
    }
    if (!match) throw new Error('could not parse args in autoInject\nSource:\n' + src)
    let [, args] = match;
    return args
        .replace(/\s/g, '')
        .split(FN_ARG_SPLIT)
        .map((arg) => arg.replace(FN_ARG, '').trim());
}

/**
 * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
 * tasks are specified as parameters to the function, after the usual callback
 * parameter, with the parameter names matching the names of the tasks it
 * depends on. This can provide even more readable task graphs which can be
 * easier to maintain.
 *
 * If a final callback is specified, the task results are similarly injected,
 * specified as named parameters after the initial error parameter.
 *
 * The autoInject function is purely syntactic sugar and its semantics are
 * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
 *
 * @name autoInject
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.auto]{@link module:ControlFlow.auto}
 * @category Control Flow
 * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of
 * the form 'func([dependencies...], callback). The object's key of a property
 * serves as the name of the task defined by that property, i.e. can be used
 * when specifying requirements for other tasks.
 * * The `callback` parameter is a `callback(err, result)` which must be called
 *   when finished, passing an `error` (which can be `null`) and the result of
 *   the function's execution. The remaining parameters name other tasks on
 *   which the task is dependent, and the results from those tasks are the
 *   arguments of those parameters.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback, and a `results` object with any completed
 * task results, similar to `auto`.
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * //  The example from `auto` can be rewritten as follows:
 * async.autoInject({
 *     get_data: function(callback) {
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: function(get_data, make_folder, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     },
 *     email_link: function(write_file, callback) {
 *         // once the file is written let's email a link to it...
 *         // write_file contains the filename returned by write_file.
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 *
 * // If you are using a JS minifier that mangles parameter names, `autoInject`
 * // will not work with plain functions, since the parameter names will be
 * // collapsed to a single letter identifier.  To work around this, you can
 * // explicitly specify the names of the parameters your task function needs
 * // in an array, similar to Angular.js dependency injection.
 *
 * // This still has an advantage over plain `auto`, since the results a task
 * // depends on are still spread into arguments.
 * async.autoInject({
 *     //...
 *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(write_file, callback) {
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }]
 *     //...
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 */
function autoInject(tasks, callback) {
    var newTasks = {};

    Object.keys(tasks).forEach(key => {
        var taskFn = tasks[key];
        var params;
        var fnIsAsync = isAsync(taskFn);
        var hasNoDeps =
            (!fnIsAsync && taskFn.length === 1) ||
            (fnIsAsync && taskFn.length === 0);

        if (Array.isArray(taskFn)) {
            params = [...taskFn];
            taskFn = params.pop();

            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
        } else if (hasNoDeps) {
            // no dependencies, use the function as-is
            newTasks[key] = taskFn;
        } else {
            params = parseParams(taskFn);
            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {
                throw new Error("autoInject task functions require explicit parameters.");
            }

            // remove callback param
            if (!fnIsAsync) params.pop();

            newTasks[key] = params.concat(newTask);
        }

        function newTask(results, taskCb) {
            var newArgs = params.map(name => results[name]);
            newArgs.push(taskCb);
            wrapAsync(taskFn)(...newArgs);
        }
    });

    return auto(newTasks, callback);
}

// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.
class DLL {
    constructor() {
        this.head = this.tail = null;
        this.length = 0;
    }

    removeLink(node) {
        if (node.prev) node.prev.next = node.next;
        else this.head = node.next;
        if (node.next) node.next.prev = node.prev;
        else this.tail = node.prev;

        node.prev = node.next = null;
        this.length -= 1;
        return node;
    }

    empty () {
        while(this.head) this.shift();
        return this;
    }

    insertAfter(node, newNode) {
        newNode.prev = node;
        newNode.next = node.next;
        if (node.next) node.next.prev = newNode;
        else this.tail = newNode;
        node.next = newNode;
        this.length += 1;
    }

    insertBefore(node, newNode) {
        newNode.prev = node.prev;
        newNode.next = node;
        if (node.prev) node.prev.next = newNode;
        else this.head = newNode;
        node.prev = newNode;
        this.length += 1;
    }

    unshift(node) {
        if (this.head) this.insertBefore(this.head, node);
        else setInitial(this, node);
    }

    push(node) {
        if (this.tail) this.insertAfter(this.tail, node);
        else setInitial(this, node);
    }

    shift() {
        return this.head && this.removeLink(this.head);
    }

    pop() {
        return this.tail && this.removeLink(this.tail);
    }

    toArray() {
        return [...this]
    }

    *[Symbol.iterator] () {
        var cur = this.head;
        while (cur) {
            yield cur.data;
            cur = cur.next;
        }
    }

    remove (testFn) {
        var curr = this.head;
        while(curr) {
            var {next} = curr;
            if (testFn(curr)) {
                this.removeLink(curr);
            }
            curr = next;
        }
        return this;
    }
}

function setInitial(dll, node) {
    dll.length = 1;
    dll.head = dll.tail = node;
}

function queue(worker, concurrency, payload) {
    if (concurrency == null) {
        concurrency = 1;
    }
    else if(concurrency === 0) {
        throw new RangeError('Concurrency must not be zero');
    }

    var _worker = wrapAsync(worker);
    var numRunning = 0;
    var workersList = [];
    const events = {
        error: [],
        drain: [],
        saturated: [],
        unsaturated: [],
        empty: []
    };

    function on (event, handler) {
        events[event].push(handler);
    }

    function once (event, handler) {
        const handleAndRemove = (...args) => {
            off(event, handleAndRemove);
            handler(...args);
        };
        events[event].push(handleAndRemove);
    }

    function off (event, handler) {
        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])
        if (!handler) return events[event] = []
        events[event] = events[event].filter(ev => ev !== handler);
    }

    function trigger (event, ...args) {
        events[event].forEach(handler => handler(...args));
    }

    var processingScheduled = false;
    function _insert(data, insertAtFront, rejectOnError, callback) {
        if (callback != null && typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;

        var res, rej;
        function promiseCallback (err, ...args) {
            // we don't care about the error, let the global error handler
            // deal with it
            if (err) return rejectOnError ? rej(err) : res()
            if (args.length <= 1) return res(args[0])
            res(args);
        }

        var item = {
            data,
            callback: rejectOnError ?
                promiseCallback :
                (callback || promiseCallback)
        };

        if (insertAtFront) {
            q._tasks.unshift(item);
        } else {
            q._tasks.push(item);
        }

        if (!processingScheduled) {
            processingScheduled = true;
            setImmediate$1(() => {
                processingScheduled = false;
                q.process();
            });
        }

        if (rejectOnError || !callback) {
            return new Promise((resolve, reject) => {
                res = resolve;
                rej = reject;
            })
        }
    }

    function _createCB(tasks) {
        return function (err, ...args) {
            numRunning -= 1;

            for (var i = 0, l = tasks.length; i < l; i++) {
                var task = tasks[i];

                var index = workersList.indexOf(task);
                if (index === 0) {
                    workersList.shift();
                } else if (index > 0) {
                    workersList.splice(index, 1);
                }

                task.callback(err, ...args);

                if (err != null) {
                    trigger('error', err, task.data);
                }
            }

            if (numRunning <= (q.concurrency - q.buffer) ) {
                trigger('unsaturated');
            }

            if (q.idle()) {
                trigger('drain');
            }
            q.process();
        };
    }

    function _maybeDrain(data) {
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            setImmediate$1(() => trigger('drain'));
            return true
        }
        return false
    }

    const eventMethod = (name) => (handler) => {
        if (!handler) {
            return new Promise((resolve, reject) => {
                once(name, (err, data) => {
                    if (err) return reject(err)
                    resolve(data);
                });
            })
        }
        off(name);
        on(name, handler);

    };

    var isProcessing = false;
    var q = {
        _tasks: new DLL(),
        *[Symbol.iterator] () {
            yield* q._tasks[Symbol.iterator]();
        },
        concurrency,
        payload,
        buffer: concurrency / 4,
        started: false,
        paused: false,
        push (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, false, false, callback))
            }
            return _insert(data, false, false, callback);
        },
        pushAsync (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, false, true, callback))
            }
            return _insert(data, false, true, callback);
        },
        kill () {
            off();
            q._tasks.empty();
        },
        unshift (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, true, false, callback))
            }
            return _insert(data, true, false, callback);
        },
        unshiftAsync (data, callback) {
            if (Array.isArray(data)) {
                if (_maybeDrain(data)) return
                return data.map(datum => _insert(datum, true, true, callback))
            }
            return _insert(data, true, true, callback);
        },
        remove (testFn) {
            q._tasks.remove(testFn);
        },
        process () {
            // Avoid trying to start too many processing operations. This can occur
            // when callbacks resolve synchronously (#1267).
            if (isProcessing) {
                return;
            }
            isProcessing = true;
            while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                var tasks = [], data = [];
                var l = q._tasks.length;
                if (q.payload) l = Math.min(l, q.payload);
                for (var i = 0; i < l; i++) {
                    var node = q._tasks.shift();
                    tasks.push(node);
                    workersList.push(node);
                    data.push(node.data);
                }

                numRunning += 1;

                if (q._tasks.length === 0) {
                    trigger('empty');
                }

                if (numRunning === q.concurrency) {
                    trigger('saturated');
                }

                var cb = onlyOnce(_createCB(tasks));
                _worker(data, cb);
            }
            isProcessing = false;
        },
        length () {
            return q._tasks.length;
        },
        running () {
            return numRunning;
        },
        workersList () {
            return workersList;
        },
        idle() {
            return q._tasks.length + numRunning === 0;
        },
        pause () {
            q.paused = true;
        },
        resume () {
            if (q.paused === false) { return; }
            q.paused = false;
            setImmediate$1(q.process);
        }
    };
    // define these as fixed properties, so people get useful errors when updating
    Object.defineProperties(q, {
        saturated: {
            writable: false,
            value: eventMethod('saturated')
        },
        unsaturated: {
            writable: false,
            value: eventMethod('unsaturated')
        },
        empty: {
            writable: false,
            value: eventMethod('empty')
        },
        drain: {
            writable: false,
            value: eventMethod('drain')
        },
        error: {
            writable: false,
            value: eventMethod('error')
        },
    });
    return q;
}

/**
 * Creates a `cargo` object with the specified payload. Tasks added to the
 * cargo will be processed altogether (up to the `payload` limit). If the
 * `worker` is in progress, the task is queued until it becomes available. Once
 * the `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, cargo passes an array of tasks to a single worker, repeating
 * when the worker is finished.
 *
 * @name cargo
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargo and inner queue.
 * @example
 *
 * // create a cargo object with payload 2
 * var cargo = async.cargo(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2);
 *
 * // add some items
 * cargo.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargo.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * await cargo.push({name: 'baz'});
 * console.log('finished processing baz');
 */
function cargo(worker, payload) {
    return queue(worker, 1, payload);
}

/**
 * Creates a `cargoQueue` object with the specified payload. Tasks added to the
 * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.
 * If the all `workers` are in progress, the task is queued until one becomes available. Once
 * a `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,
 * the cargoQueue passes an array of tasks to multiple parallel workers.
 *
 * @name cargoQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @see [async.cargo]{@link module:ControlFLow.cargo}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargoQueue and inner queue.
 * @example
 *
 * // create a cargoQueue object with payload 2 and concurrency 2
 * var cargoQueue = async.cargoQueue(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2, 2);
 *
 * // add some items
 * cargoQueue.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargoQueue.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * cargoQueue.push({name: 'baz'}, function(err) {
 *     console.log('finished processing baz');
 * });
 * cargoQueue.push({name: 'boo'}, function(err) {
 *     console.log('finished processing boo');
 * });
 */
function cargo$1(worker, concurrency, payload) {
    return queue(worker, concurrency, payload);
}

/**
 * Reduces `coll` into a single value using an async `iteratee` to return each
 * successive step. `memo` is the initial state of the reduction. This function
 * only operates in series.
 *
 * For performance reasons, it may make sense to split a call to this function
 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
 * results. This function is for situations where each step in the reduction
 * needs to be async; if you can get the data before reducing it, then it's
 * probably a good idea to do so.
 *
 * @name reduce
 * @static
 * @memberOf module:Collections
 * @method
 * @alias inject
 * @alias foldl
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee completes with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];
 *
 * // asynchronous function that computes the file size in bytes
 * // file size is added to the memoized value, then returned
 * function getFileSizeInBytes(memo, file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, memo + stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // 6000
 *         // which is the sum of the file sizes of the three files
 *     }
 * });
 *
 * // Error Handling
 * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(result);
 *     }
 * });
 *
 * // Using Promises
 * async.reduce(fileList, 0, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 *     // 6000
 *     // which is the sum of the file sizes of the three files
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.reduce(withMissingFileList, 0, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);
 *         console.log(result);
 *         // 6000
 *         // which is the sum of the file sizes of the three files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);
 *         console.log(result);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function reduce(coll, memo, iteratee, callback) {
    callback = once(callback);
    var _iteratee = wrapAsync(iteratee);
    return eachOfSeries$1(coll, (x, i, iterCb) => {
        _iteratee(memo, x, (err, v) => {
            memo = v;
            iterCb(err);
        });
    }, err => callback(err, memo));
}
var reduce$1 = awaitify(reduce, 4);

/**
 * Version of the compose function that is more natural to read. Each function
 * consumes the return value of the previous function. It is the equivalent of
 * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name seq
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.compose]{@link module:ControlFlow.compose}
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} a function that composes the `functions` in order
 * @example
 *
 * // Requires lodash (or underscore), express3 and dresende's orm2.
 * // Part of an app, that fetches cats of the logged user.
 * // This example uses `seq` function to avoid overnesting and error
 * // handling clutter.
 * app.get('/cats', function(request, response) {
 *     var User = request.models.User;
 *     async.seq(
 *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))
 *         function(user, fn) {
 *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
 *         }
 *     )(req.session.user_id, function (err, cats) {
 *         if (err) {
 *             console.error(err);
 *             response.json({ status: 'error', message: err.message });
 *         } else {
 *             response.json({ status: 'ok', message: 'Cats found', data: cats });
 *         }
 *     });
 * });
 */
function seq(...functions) {
    var _functions = functions.map(wrapAsync);
    return function (...args) {
        var that = this;

        var cb = args[args.length - 1];
        if (typeof cb == 'function') {
            args.pop();
        } else {
            cb = promiseCallback();
        }

        reduce$1(_functions, args, (newargs, fn, iterCb) => {
            fn.apply(that, newargs.concat((err, ...nextargs) => {
                iterCb(err, nextargs);
            }));
        },
        (err, results) => cb(err, ...results));

        return cb[PROMISE_SYMBOL]
    };
}

/**
 * Creates a function which is a composition of the passed asynchronous
 * functions. Each function consumes the return value of the function that
 * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
 * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
 *
 * If the last argument to the composed function is not a function, a promise
 * is returned when you call it.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name compose
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} an asynchronous function that is the composed
 * asynchronous `functions`
 * @example
 *
 * function add1(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n + 1);
 *     }, 10);
 * }
 *
 * function mul3(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n * 3);
 *     }, 10);
 * }
 *
 * var add1mul3 = async.compose(mul3, add1);
 * add1mul3(4, function (err, result) {
 *     // result now equals 15
 * });
 */
function compose(...args) {
    return seq(...args.reverse());
}

/**
 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
 *
 * @name mapLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapLimit (coll, limit, iteratee, callback) {
    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)
}
var mapLimit$1 = awaitify(mapLimit, 4);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
 *
 * @name concatLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapLimit
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */
function concatLimit(coll, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(coll, limit, (val, iterCb) => {
        _iteratee(val, (err, ...args) => {
            if (err) return iterCb(err);
            return iterCb(err, args);
        });
    }, (err, mapResults) => {
        var result = [];
        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                result = result.concat(...mapResults[i]);
            }
        }

        return callback(err, result);
    });
}
var concatLimit$1 = awaitify(concatLimit, 4);

/**
 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
 * the concatenated list. The `iteratee`s are called in parallel, and the
 * results are concatenated as they return. The results array will be returned in
 * the original order of `coll` passed to the `iteratee` function.
 *
 * @name concat
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @alias flatMap
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * let directoryList = ['dir1','dir2','dir3'];
 * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];
 *
 * // Using callbacks
 * async.concat(directoryList, fs.readdir, function(err, results) {
 *    if (err) {
 *        console.log(err);
 *    } else {
 *        console.log(results);
 *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 *    }
 * });
 *
 * // Error Handling
 * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {
 *    if (err) {
 *        console.log(err);
 *        // [ Error: ENOENT: no such file or directory ]
 *        // since dir4 does not exist
 *    } else {
 *        console.log(results);
 *    }
 * });
 *
 * // Using Promises
 * async.concat(directoryList, fs.readdir)
 * .then(results => {
 *     console.log(results);
 *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 * }).catch(err => {
 *      console.log(err);
 * });
 *
 * // Error Handling
 * async.concat(withMissingDirectoryList, fs.readdir)
 * .then(results => {
 *     console.log(results);
 * }).catch(err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4 does not exist
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.concat(directoryList, fs.readdir);
 *         console.log(results);
 *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]
 *     } catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let results = await async.concat(withMissingDirectoryList, fs.readdir);
 *         console.log(results);
 *     } catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *         // since dir4 does not exist
 *     }
 * }
 *
 */
function concat(coll, iteratee, callback) {
    return concatLimit$1(coll, Infinity, iteratee, callback)
}
var concat$1 = awaitify(concat, 3);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
 *
 * @name concatSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @alias flatMapSeries
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
 * The iteratee should complete with an array an array of results.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @returns A Promise, if no callback is passed
 */
function concatSeries(coll, iteratee, callback) {
    return concatLimit$1(coll, 1, iteratee, callback)
}
var concatSeries$1 = awaitify(concatSeries, 3);

/**
 * Returns a function that when called, calls-back with the values provided.
 * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
 * [`auto`]{@link module:ControlFlow.auto}.
 *
 * @name constant
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {...*} arguments... - Any number of arguments to automatically invoke
 * callback with.
 * @returns {AsyncFunction} Returns a function that when invoked, automatically
 * invokes the callback with the previous given arguments.
 * @example
 *
 * async.waterfall([
 *     async.constant(42),
 *     function (value, next) {
 *         // value === 42
 *     },
 *     //...
 * ], callback);
 *
 * async.waterfall([
 *     async.constant(filename, "utf8"),
 *     fs.readFile,
 *     function (fileData, next) {
 *         //...
 *     }
 *     //...
 * ], callback);
 *
 * async.auto({
 *     hostname: async.constant("https://server.net/"),
 *     port: findFreePort,
 *     launchServer: ["hostname", "port", function (options, cb) {
 *         startServer(options, cb);
 *     }],
 *     //...
 * }, callback);
 */
function constant(...args) {
    return function (...ignoredArgs/*, callback*/) {
        var callback = ignoredArgs.pop();
        return callback(null, ...args);
    };
}

function _createTester(check, getResult) {
    return (eachfn, arr, _iteratee, cb) => {
        var testPassed = false;
        var testResult;
        const iteratee = wrapAsync(_iteratee);
        eachfn(arr, (value, _, callback) => {
            iteratee(value, (err, result) => {
                if (err || err === false) return callback(err);

                if (check(result) && !testResult) {
                    testPassed = true;
                    testResult = getResult(true, value);
                    return callback(null, breakLoop);
                }
                callback();
            });
        }, err => {
            if (err) return cb(err);
            cb(null, testPassed ? testResult : getResult(false));
        });
    };
}

/**
 * Returns the first value in `coll` that passes an async truth test. The
 * `iteratee` is applied in parallel, meaning the first iteratee to return
 * `true` will fire the detect `callback` with that result. That means the
 * result might not be the first item in the original `coll` (in terms of order)
 * that passes the test.

 * If order within the original `coll` is important, then look at
 * [`detectSeries`]{@link module:Collections.detectSeries}.
 *
 * @name detect
 * @static
 * @memberOf module:Collections
 * @method
 * @alias find
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns A Promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // dir1/file1.txt
 *        // result now equals the first file in the list that exists
 *    }
 *);
 *
 * // Using Promises
 * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)
 * .then(result => {
 *     console.log(result);
 *     // dir1/file1.txt
 *     // result now equals the first file in the list that exists
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);
 *         console.log(result);
 *         // dir1/file1.txt
 *         // result now equals the file in the list that exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function detect(coll, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)
}
var detect$1 = awaitify(detect, 3);

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name detectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findLimit
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns a Promise if no callback is passed
 */
function detectLimit(coll, limit, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)
}
var detectLimit$1 = awaitify(detectLimit, 4);

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
 *
 * @name detectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findSeries
 * @category Collections
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @returns a Promise if no callback is passed
 */
function detectSeries(coll, iteratee, callback) {
    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)
}

var detectSeries$1 = awaitify(detectSeries, 3);

function consoleFunc(name) {
    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {
        /* istanbul ignore else */
        if (typeof console === 'object') {
            /* istanbul ignore else */
            if (err) {
                /* istanbul ignore else */
                if (console.error) {
                    console.error(err);
                }
            } else if (console[name]) { /* istanbul ignore else */
                resultArgs.forEach(x => console[name](x));
            }
        }
    })
}

/**
 * Logs the result of an [`async` function]{@link AsyncFunction} to the
 * `console` using `console.dir` to display the properties of the resulting object.
 * Only works in Node.js or in browsers that support `console.dir` and
 * `console.error` (such as FF and Chrome).
 * If multiple arguments are returned from the async function,
 * `console.dir` is called on each argument in order.
 *
 * @name dir
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, {hello: name});
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.dir(hello, 'world');
 * {hello: 'world'}
 */
var dir = consoleFunc('dir');

/**
 * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
 * the order of operations, the arguments `test` and `iteratee` are switched.
 *
 * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
 *
 * @name doWhilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - A function which is called each time `test`
 * passes. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped.
 * `callback` will be passed an error and any arguments passed to the final
 * `iteratee`'s callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 */
function doWhilst(iteratee, test, callback) {
    callback = onlyOnce(callback);
    var _fn = wrapAsync(iteratee);
    var _test = wrapAsync(test);
    var results;

    function next(err, ...args) {
        if (err) return callback(err);
        if (err === false) return;
        results = args;
        _test(...args, check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (err === false) return;
        if (!truth) return callback(null, ...results);
        _fn(next);
    }

    return check(null, true);
}

var doWhilst$1 = awaitify(doWhilst, 3);

/**
 * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
 * argument ordering differs from `until`.
 *
 * @name doUntil
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform after each
 * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `iteratee`
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 */
function doUntil(iteratee, test, callback) {
    const _test = wrapAsync(test);
    return doWhilst$1(iteratee, (...args) => {
        const cb = args.pop();
        _test(...args, (err, truth) => cb (err, !truth));
    }, callback);
}

function _withoutIndex(iteratee) {
    return (value, index, callback) => iteratee(value, callback);
}

/**
 * Applies the function `iteratee` to each item in `coll`, in parallel.
 * The `iteratee` is called with an item from the list, and a callback for when
 * it has finished. If the `iteratee` passes an error to its `callback`, the
 * main `callback` (for the `each` function) is immediately called with the
 * error.
 *
 * Note, that since this function applies `iteratee` to each item in parallel,
 * there is no guarantee that the iteratee functions will complete in order.
 *
 * @name each
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEach
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to
 * each item in `coll`. Invoked with (item, callback).
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOf`.
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];
 * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];
 *
 * // asynchronous function that deletes a file
 * const deleteFile = function(file, callback) {
 *     fs.unlink(file, callback);
 * };
 *
 * // Using callbacks
 * async.each(fileList, deleteFile, function(err) {
 *     if( err ) {
 *         console.log(err);
 *     } else {
 *         console.log('All files have been deleted successfully');
 *     }
 * });
 *
 * // Error Handling
 * async.each(withMissingFileList, deleteFile, function(err){
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4/file2.txt does not exist
 *     // dir1/file1.txt could have been deleted
 * });
 *
 * // Using Promises
 * async.each(fileList, deleteFile)
 * .then( () => {
 *     console.log('All files have been deleted successfully');
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.each(fileList, deleteFile)
 * .then( () => {
 *     console.log('All files have been deleted successfully');
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 *     // since dir4/file2.txt does not exist
 *     // dir1/file1.txt could have been deleted
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         await async.each(files, deleteFile);
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         await async.each(withMissingFileList, deleteFile);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *         // since dir4/file2.txt does not exist
 *         // dir1/file1.txt could have been deleted
 *     }
 * }
 *
 */
function eachLimit(coll, iteratee, callback) {
    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}

var each = awaitify(eachLimit, 3);

/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachLimit$1(coll, limit, iteratee, callback) {
    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}
var eachLimit$2 = awaitify(eachLimit$1, 4);

/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item
 * in series and therefore the iteratee functions will complete in order.

 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @returns {Promise} a promise, if a callback is omitted
 */
function eachSeries(coll, iteratee, callback) {
    return eachLimit$2(coll, 1, iteratee, callback)
}
var eachSeries$1 = awaitify(eachSeries, 3);

/**
 * Wrap an async function and ensure it calls its callback on a later tick of
 * the event loop.  If the function already calls its callback on a next tick,
 * no extra deferral is added. This is useful for preventing stack overflows
 * (`RangeError: Maximum call stack size exceeded`) and generally keeping
 * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
 * contained. ES2017 `async` functions are returned as-is -- they are immune
 * to Zalgo's corrupting influences, as they always resolve on a later tick.
 *
 * @name ensureAsync
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - an async function, one that expects a node-style
 * callback as its last argument.
 * @returns {AsyncFunction} Returns a wrapped function with the exact same call
 * signature as the function passed in.
 * @example
 *
 * function sometimesAsync(arg, callback) {
 *     if (cache[arg]) {
 *         return callback(null, cache[arg]); // this would be synchronous!!
 *     } else {
 *         doSomeIO(arg, callback); // this IO would be asynchronous
 *     }
 * }
 *
 * // this has a risk of stack overflows if many results are cached in a row
 * async.mapSeries(args, sometimesAsync, done);
 *
 * // this will defer sometimesAsync's callback if necessary,
 * // preventing stack overflows
 * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
 */
function ensureAsync(fn) {
    if (isAsync(fn)) return fn;
    return function (...args/*, callback*/) {
        var callback = args.pop();
        var sync = true;
        args.push((...innerArgs) => {
            if (sync) {
                setImmediate$1(() => callback(...innerArgs));
            } else {
                callback(...innerArgs);
            }
        });
        fn.apply(this, args);
        sync = false;
    };
}

/**
 * Returns `true` if every element in `coll` satisfies an async test. If any
 * iteratee call returns `false`, the main `callback` is immediately called.
 *
 * @name every
 * @static
 * @memberOf module:Collections
 * @method
 * @alias all
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];
 * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.every(fileList, fileExists, function(err, result) {
 *     console.log(result);
 *     // true
 *     // result is true since every file exists
 * });
 *
 * async.every(withMissingFileList, fileExists, function(err, result) {
 *     console.log(result);
 *     // false
 *     // result is false since NOT every file exists
 * });
 *
 * // Using Promises
 * async.every(fileList, fileExists)
 * .then( result => {
 *     console.log(result);
 *     // true
 *     // result is true since every file exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * async.every(withMissingFileList, fileExists)
 * .then( result => {
 *     console.log(result);
 *     // false
 *     // result is false since NOT every file exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.every(fileList, fileExists);
 *         console.log(result);
 *         // true
 *         // result is true since every file exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * async () => {
 *     try {
 *         let result = await async.every(withMissingFileList, fileExists);
 *         console.log(result);
 *         // false
 *         // result is false since NOT every file exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function every(coll, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)
}
var every$1 = awaitify(every, 3);

/**
 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
 *
 * @name everyLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function everyLimit(coll, limit, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)
}
var everyLimit$1 = awaitify(everyLimit, 4);

/**
 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
 *
 * @name everySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in series.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function everySeries(coll, iteratee, callback) {
    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)
}
var everySeries$1 = awaitify(everySeries, 3);

function filterArray(eachfn, arr, iteratee, callback) {
    var truthValues = new Array(arr.length);
    eachfn(arr, (x, index, iterCb) => {
        iteratee(x, (err, v) => {
            truthValues[index] = !!v;
            iterCb(err);
        });
    }, err => {
        if (err) return callback(err);
        var results = [];
        for (var i = 0; i < arr.length; i++) {
            if (truthValues[i]) results.push(arr[i]);
        }
        callback(null, results);
    });
}

function filterGeneric(eachfn, coll, iteratee, callback) {
    var results = [];
    eachfn(coll, (x, index, iterCb) => {
        iteratee(x, (err, v) => {
            if (err) return iterCb(err);
            if (v) {
                results.push({index, value: x});
            }
            iterCb(err);
        });
    }, err => {
        if (err) return callback(err);
        callback(null, results
            .sort((a, b) => a.index - b.index)
            .map(v => v.value));
    });
}

function _filter(eachfn, coll, iteratee, callback) {
    var filter = isArrayLike(coll) ? filterArray : filterGeneric;
    return filter(eachfn, coll, wrapAsync(iteratee), callback);
}

/**
 * Returns a new array of all the values in `coll` which pass an async truth
 * test. This operation is performed in parallel, but the results array will be
 * in the same order as the original.
 *
 * @name filter
 * @static
 * @memberOf module:Collections
 * @method
 * @alias select
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.filter(files, fileExists, function(err, results) {
 *    if(err) {
 *        console.log(err);
 *    } else {
 *        console.log(results);
 *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *        // results is now an array of the existing files
 *    }
 * });
 *
 * // Using Promises
 * async.filter(files, fileExists)
 * .then(results => {
 *     console.log(results);
 *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *     // results is now an array of the existing files
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.filter(files, fileExists);
 *         console.log(results);
 *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]
 *         // results is now an array of the existing files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function filter (coll, iteratee, callback) {
    return _filter(eachOf$1, coll, iteratee, callback)
}
var filter$1 = awaitify(filter, 3);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name filterLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback provided
 */
function filterLimit (coll, limit, iteratee, callback) {
    return _filter(eachOfLimit(limit), coll, iteratee, callback)
}
var filterLimit$1 = awaitify(filterLimit, 4);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
 *
 * @name filterSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectSeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results)
 * @returns {Promise} a promise, if no callback provided
 */
function filterSeries (coll, iteratee, callback) {
    return _filter(eachOfSeries$1, coll, iteratee, callback)
}
var filterSeries$1 = awaitify(filterSeries, 3);

/**
 * Calls the asynchronous function `fn` with a callback parameter that allows it
 * to call itself again, in series, indefinitely.

 * If an error is passed to the callback then `errback` is called with the
 * error, and execution stops, otherwise it will never be called.
 *
 * @name forever
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} fn - an async function to call repeatedly.
 * Invoked with (next).
 * @param {Function} [errback] - when `fn` passes an error to it's callback,
 * this function will be called, and execution stops. Invoked with (err).
 * @returns {Promise} a promise that rejects if an error occurs and an errback
 * is not passed
 * @example
 *
 * async.forever(
 *     function(next) {
 *         // next is suitable for passing to things that need a callback(err [, whatever]);
 *         // it will result in this function being called again.
 *     },
 *     function(err) {
 *         // if next is called with a value in its first parameter, it will appear
 *         // in here as 'err', and execution will stop.
 *     }
 * );
 */
function forever(fn, errback) {
    var done = onlyOnce(errback);
    var task = wrapAsync(ensureAsync(fn));

    function next(err) {
        if (err) return done(err);
        if (err === false) return;
        task(next);
    }
    return next();
}
var forever$1 = awaitify(forever, 2);

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
 *
 * @name groupByLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 */
function groupByLimit(coll, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(coll, limit, (val, iterCb) => {
        _iteratee(val, (err, key) => {
            if (err) return iterCb(err);
            return iterCb(err, {key, val});
        });
    }, (err, mapResults) => {
        var result = {};
        // from MDN, handle object having an `hasOwnProperty` prop
        var {hasOwnProperty} = Object.prototype;

        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                var {key} = mapResults[i];
                var {val} = mapResults[i];

                if (hasOwnProperty.call(result, key)) {
                    result[key].push(val);
                } else {
                    result[key] = [val];
                }
            }
        }

        return callback(err, result);
    });
}

var groupByLimit$1 = awaitify(groupByLimit, 4);

/**
 * Returns a new object, where each value corresponds to an array of items, from
 * `coll`, that returned the corresponding key. That is, the keys of the object
 * correspond to the values passed to the `iteratee` callback.
 *
 * Note: Since this function applies the `iteratee` to each item in parallel,
 * there is no guarantee that the `iteratee` functions will complete in order.
 * However, the values for each key in the `result` will be in the same order as
 * the original `coll`. For Objects, the values will roughly be in the order of
 * the original Objects' keys (but this can vary across JavaScript engines).
 *
 * @name groupBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * const files = ['dir1/file1.txt','dir2','dir4']
 *
 * // asynchronous function that detects file type as none, file, or directory
 * function detectFile(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(null, 'none');
 *         }
 *         callback(null, stat.isDirectory() ? 'directory' : 'file');
 *     });
 * }
 *
 * //Using callbacks
 * async.groupBy(files, detectFile, function(err, result) {
 *     if(err) {
 *         console.log(err);
 *     } else {
 *	       console.log(result);
 *         // {
 *         //     file: [ 'dir1/file1.txt' ],
 *         //     none: [ 'dir4' ],
 *         //     directory: [ 'dir2']
 *         // }
 *         // result is object containing the files grouped by type
 *     }
 * });
 *
 * // Using Promises
 * async.groupBy(files, detectFile)
 * .then( result => {
 *     console.log(result);
 *     // {
 *     //     file: [ 'dir1/file1.txt' ],
 *     //     none: [ 'dir4' ],
 *     //     directory: [ 'dir2']
 *     // }
 *     // result is object containing the files grouped by type
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.groupBy(files, detectFile);
 *         console.log(result);
 *         // {
 *         //     file: [ 'dir1/file1.txt' ],
 *         //     none: [ 'dir4' ],
 *         //     directory: [ 'dir2']
 *         // }
 *         // result is object containing the files grouped by type
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function groupBy (coll, iteratee, callback) {
    return groupByLimit$1(coll, Infinity, iteratee, callback)
}

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.
 *
 * @name groupBySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whose
 * properties are arrays of values which returned the corresponding key.
 * @returns {Promise} a promise, if no callback is passed
 */
function groupBySeries (coll, iteratee, callback) {
    return groupByLimit$1(coll, 1, iteratee, callback)
}

/**
 * Logs the result of an `async` function to the `console`. Only works in
 * Node.js or in browsers that support `console.log` and `console.error` (such
 * as FF and Chrome). If multiple arguments are returned from the async
 * function, `console.log` is called on each argument in order.
 *
 * @name log
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, 'hello ' + name);
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.log(hello, 'world');
 * 'hello world'
 */
var log = consoleFunc('log');

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name mapValuesLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapValuesLimit(obj, limit, iteratee, callback) {
    callback = once(callback);
    var newObj = {};
    var _iteratee = wrapAsync(iteratee);
    return eachOfLimit(limit)(obj, (val, key, next) => {
        _iteratee(val, key, (err, result) => {
            if (err) return next(err);
            newObj[key] = result;
            next(err);
        });
    }, err => callback(err, newObj));
}

var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);

/**
 * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
 *
 * Produces a new Object by mapping each value of `obj` through the `iteratee`
 * function. The `iteratee` is called each `value` and `key` from `obj` and a
 * callback for when it has finished processing. Each of these callbacks takes
 * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
 * passes an error to its callback, the main `callback` (for the `mapValues`
 * function) is immediately called with the error.
 *
 * Note, the order of the keys in the result is not guaranteed.  The keys will
 * be roughly in the order they complete, (but this is very engine-specific)
 *
 * @name mapValues
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 * // file4.txt does not exist
 *
 * const fileMap = {
 *     f1: 'file1.txt',
 *     f2: 'file2.txt',
 *     f3: 'file3.txt'
 * };
 *
 * const withMissingFileMap = {
 *     f1: 'file1.txt',
 *     f2: 'file2.txt',
 *     f3: 'file4.txt'
 * };
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, key, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // result is now a map of file size in bytes for each file, e.g.
 *         // {
 *         //     f1: 1000,
 *         //     f2: 2000,
 *         //     f3: 3000
 *         // }
 *     }
 * });
 *
 * // Error handling
 * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {
 *     if (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     } else {
 *         console.log(result);
 *     }
 * });
 *
 * // Using Promises
 * async.mapValues(fileMap, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 *     // result is now a map of file size in bytes for each file, e.g.
 *     // {
 *     //     f1: 1000,
 *     //     f2: 2000,
 *     //     f3: 3000
 *     // }
 * }).catch (err => {
 *     console.log(err);
 * });
 *
 * // Error Handling
 * async.mapValues(withMissingFileMap, getFileSizeInBytes)
 * .then( result => {
 *     console.log(result);
 * }).catch (err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.mapValues(fileMap, getFileSizeInBytes);
 *         console.log(result);
 *         // result is now a map of file size in bytes for each file, e.g.
 *         // {
 *         //     f1: 1000,
 *         //     f2: 2000,
 *         //     f3: 3000
 *         // }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // Error Handling
 * async () => {
 *     try {
 *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);
 *         console.log(result);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function mapValues(obj, iteratee, callback) {
    return mapValuesLimit$1(obj, Infinity, iteratee, callback)
}

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
 *
 * @name mapValuesSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */
function mapValuesSeries(obj, iteratee, callback) {
    return mapValuesLimit$1(obj, 1, iteratee, callback)
}

/**
 * Caches the results of an async function. When creating a hash to store
 * function results against, the callback is omitted from the hash and an
 * optional hash function can be used.
 *
 * **Note: if the async function errs, the result will not be cached and
 * subsequent calls will call the wrapped function.**
 *
 * If no hash function is specified, the first argument is used as a hash key,
 * which may work reasonably if it is a string or a data type that converts to a
 * distinct string. Note that objects and arrays will not behave reasonably.
 * Neither will cases where the other arguments are significant. In such cases,
 * specify your own hash function.
 *
 * The cache of results is exposed as the `memo` property of the function
 * returned by `memoize`.
 *
 * @name memoize
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function to proxy and cache results from.
 * @param {Function} hasher - An optional function for generating a custom hash
 * for storing results. It has all the arguments applied to it apart from the
 * callback, and must be synchronous.
 * @returns {AsyncFunction} a memoized version of `fn`
 * @example
 *
 * var slow_fn = function(name, callback) {
 *     // do something
 *     callback(null, result);
 * };
 * var fn = async.memoize(slow_fn);
 *
 * // fn can now be used as if it were slow_fn
 * fn('some name', function() {
 *     // callback
 * });
 */
function memoize(fn, hasher = v => v) {
    var memo = Object.create(null);
    var queues = Object.create(null);
    var _fn = wrapAsync(fn);
    var memoized = initialParams((args, callback) => {
        var key = hasher(...args);
        if (key in memo) {
            setImmediate$1(() => callback(null, ...memo[key]));
        } else if (key in queues) {
            queues[key].push(callback);
        } else {
            queues[key] = [callback];
            _fn(...args, (err, ...resultArgs) => {
                // #1465 don't memoize if an error occurred
                if (!err) {
                    memo[key] = resultArgs;
                }
                var q = queues[key];
                delete queues[key];
                for (var i = 0, l = q.length; i < l; i++) {
                    q[i](err, ...resultArgs);
                }
            });
        }
    });
    memoized.memo = memo;
    memoized.unmemoized = fn;
    return memoized;
}

/* istanbul ignore file */

/**
 * Calls `callback` on a later loop around the event loop. In Node.js this just
 * calls `process.nextTick`.  In the browser it will use `setImmediate` if
 * available, otherwise `setTimeout(callback, 0)`, which means other higher
 * priority events may precede the execution of `callback`.
 *
 * This is used internally for browser-compatibility purposes.
 *
 * @name nextTick
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.setImmediate]{@link module:Utils.setImmediate}
 * @category Util
 * @param {Function} callback - The function to call on a later loop around
 * the event loop. Invoked with (args...).
 * @param {...*} args... - any number of additional arguments to pass to the
 * callback on the next tick.
 * @example
 *
 * var call_order = [];
 * async.nextTick(function() {
 *     call_order.push('two');
 *     // call_order now equals ['one','two']
 * });
 * call_order.push('one');
 *
 * async.setImmediate(function (a, b, c) {
 *     // a, b, and c equal 1, 2, and 3
 * }, 1, 2, 3);
 */
var _defer$1;

if (hasNextTick) {
    _defer$1 = process.nextTick;
} else if (hasSetImmediate) {
    _defer$1 = setImmediate;
} else {
    _defer$1 = fallback;
}

var nextTick = wrap(_defer$1);

var _parallel = awaitify((eachfn, tasks, callback) => {
    var results = isArrayLike(tasks) ? [] : {};

    eachfn(tasks, (task, key, taskCb) => {
        wrapAsync(task)((err, ...result) => {
            if (result.length < 2) {
                [result] = result;
            }
            results[key] = result;
            taskCb(err);
        });
    }, err => callback(err, results));
}, 3);

/**
 * Run the `tasks` collection of functions in parallel, without waiting until
 * the previous function has completed. If any of the functions pass an error to
 * its callback, the main `callback` is immediately called with the value of the
 * error. Once the `tasks` have completed, the results are passed to the final
 * `callback` as an array.
 *
 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
 * parallel execution of code.  If your tasks do not use any timers or perform
 * any I/O, they will actually be executed in series.  Any synchronous setup
 * sections for each task will happen one after the other.  JavaScript remains
 * single-threaded.
 *
 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
 * execution of other tasks when a task fails.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 * results from {@link async.parallel}.
 *
 * @name parallel
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 *
 * @example
 *
 * //Using Callbacks
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ], function(err, results) {
 *     console.log(results);
 *     // results is equal to ['one','two'] even though
 *     // the second function had a shorter timeout.
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * });
 *
 * //Using Promises
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ]).then(results => {
 *     console.log(results);
 *     // results is equal to ['one','two'] even though
 *     // the second function had a shorter timeout.
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }).then(results => {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * //Using async/await
 * async () => {
 *     try {
 *         let results = await async.parallel([
 *             function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 'one');
 *                 }, 200);
 *             },
 *             function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 'two');
 *                 }, 100);
 *             }
 *         ]);
 *         console.log(results);
 *         // results is equal to ['one','two'] even though
 *         // the second function had a shorter timeout.
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // an example using an object instead of an array
 * async () => {
 *     try {
 *         let results = await async.parallel({
 *             one: function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 1);
 *                 }, 200);
 *             },
 *            two: function(callback) {
 *                 setTimeout(function() {
 *                     callback(null, 2);
 *                 }, 100);
 *            }
 *         });
 *         console.log(results);
 *         // results is equal to: { one: 1, two: 2 }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function parallel(tasks, callback) {
    return _parallel(eachOf$1, tasks, callback);
}

/**
 * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name parallelLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.parallel]{@link module:ControlFlow.parallel}
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 * @returns {Promise} a promise, if a callback is not passed
 */
function parallelLimit(tasks, limit, callback) {
    return _parallel(eachOfLimit(limit), tasks, callback);
}

/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Iterable} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {number} payload - an integer that specifies how many items are
 * passed to the worker function at a time. only applies if this is a
 * [cargo]{@link module:ControlFlow.cargo} object
 * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns
 * a promise that rejects if an error occurs.
 * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns
 * a promise that rejects if an error occurs.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a function that sets a callback that is
 * called when the number of running workers hits the `concurrency` limit, and
 * further tasks will be queued.  If the callback is omitted, `q.saturated()`
 * returns a promise for the next occurrence.
 * @property {Function} unsaturated - a function that sets a callback that is
 * called when the number of running workers is less than the `concurrency` &
 * `buffer` limits, and further tasks will not be queued. If the callback is
 * omitted, `q.unsaturated()` returns a promise for the next occurrence.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a function that sets a callback that is called
 * when the last item from the `queue` is given to a `worker`. If the callback
 * is omitted, `q.empty()` returns a promise for the next occurrence.
 * @property {Function} drain - a function that sets a callback that is called
 * when the last item from the `queue` has returned from the `worker`. If the
 * callback is omitted, `q.drain()` returns a promise for the next occurrence.
 * @property {Function} error - a function that sets a callback that is called
 * when a task errors. Has the signature `function(error, task)`. If the
 * callback is omitted, `error()` returns a promise that rejects on the next
 * error.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 *
 * @example
 * const q = async.queue(worker, 2)
 * q.push(item1)
 * q.push(item2)
 * q.push(item3)
 * // queues are iterable, spread into an array to inspect
 * const items = [...q] // [item1, item2, item3]
 * // or use for of
 * for (let item of q) {
 *     console.log(item)
 * }
 *
 * q.drain(() => {
 *     console.log('all done')
 * })
 * // or
 * await q.drain()
 */

/**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain(function() {
 *     console.log('all items have been processed');
 * });
 * // or await the end
 * await q.drain()
 *
 * // assign an error callback
 * q.error(function(err, task) {
 *     console.error('task experienced an error');
 * });
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * // callback is optional
 * q.push({name: 'bar'});
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */
function queue$1 (worker, concurrency) {
    var _worker = wrapAsync(worker);
    return queue((items, cb) => {
        _worker(items[0], cb);
    }, concurrency, 1);
}

// Binary min-heap implementation used for priority queue.
// Implementation is stable, i.e. push time is considered for equal priorities
class Heap {
    constructor() {
        this.heap = [];
        this.pushCount = Number.MIN_SAFE_INTEGER;
    }

    get length() {
        return this.heap.length;
    }

    empty () {
        this.heap = [];
        return this;
    }

    percUp(index) {
        let p;

        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {
            let t = this.heap[index];
            this.heap[index] = this.heap[p];
            this.heap[p] = t;

            index = p;
        }
    }

    percDown(index) {
        let l;

        while ((l=leftChi(index)) < this.heap.length) {
            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {
                l = l+1;
            }

            if (smaller(this.heap[index], this.heap[l])) {
                break;
            }

            let t = this.heap[index];
            this.heap[index] = this.heap[l];
            this.heap[l] = t;

            index = l;
        }
    }

    push(node) {
        node.pushCount = ++this.pushCount;
        this.heap.push(node);
        this.percUp(this.heap.length-1);
    }

    unshift(node) {
        return this.heap.push(node);
    }

    shift() {
        let [top] = this.heap;

        this.heap[0] = this.heap[this.heap.length-1];
        this.heap.pop();
        this.percDown(0);

        return top;
    }

    toArray() {
        return [...this];
    }

    *[Symbol.iterator] () {
        for (let i = 0; i < this.heap.length; i++) {
            yield this.heap[i].data;
        }
    }

    remove (testFn) {
        let j = 0;
        for (let i = 0; i < this.heap.length; i++) {
            if (!testFn(this.heap[i])) {
                this.heap[j] = this.heap[i];
                j++;
            }
        }

        this.heap.splice(j);

        for (let i = parent(this.heap.length-1); i >= 0; i--) {
            this.percDown(i);
        }

        return this;
    }
}

function leftChi(i) {
    return (i<<1)+1;
}

function parent(i) {
    return ((i+1)>>1)-1;
}

function smaller(x, y) {
    if (x.priority !== y.priority) {
        return x.priority < y.priority;
    }
    else {
        return x.pushCount < y.pushCount;
    }
}

/**
 * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
 * completed in ascending priority order.
 *
 * @name priorityQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`.
 * Invoked with (task, callback).
 * @param {number} concurrency - An `integer` for determining how many `worker`
 * functions should be run in parallel.  If omitted, the concurrency defaults to
 * `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
 * differences between `queue` and `priorityQueue` objects:
 * * `push(task, priority, [callback])` - `priority` should be a number. If an
 *   array of `tasks` is given, all tasks will be assigned the same priority.
 * * The `unshift` method was removed.
 */
function priorityQueue(worker, concurrency) {
    // Start with a normal queue
    var q = queue$1(worker, concurrency);
    var processingScheduled = false;

    q._tasks = new Heap();

    // Override push to accept second parameter representing priority
    q.push = function(data, priority = 0, callback = () => {}) {
        if (typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;
        if (!Array.isArray(data)) {
            data = [data];
        }
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            return setImmediate$1(() => q.drain());
        }

        for (var i = 0, l = data.length; i < l; i++) {
            var item = {
                data: data[i],
                priority,
                callback
            };

            q._tasks.push(item);
        }

        if (!processingScheduled) {
            processingScheduled = true;
            setImmediate$1(() => {
                processingScheduled = false;
                q.process();
            });
        }
    };

    // Remove unshift function
    delete q.unshift;

    return q;
}

/**
 * Runs the `tasks` array of functions in parallel, without waiting until the
 * previous function has completed. Once any of the `tasks` complete or pass an
 * error to its callback, the main `callback` is immediately called. It's
 * equivalent to `Promise.race()`.
 *
 * @name race
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
 * to run. Each function can complete with an optional `result` value.
 * @param {Function} callback - A callback to run once any of the functions have
 * completed. This function gets an error or result from the first function that
 * completed. Invoked with (err, result).
 * @returns undefined
 * @example
 *
 * async.race([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // main callback
 * function(err, result) {
 *     // the result will be equal to 'two' as it finishes earlier
 * });
 */
function race(tasks, callback) {
    callback = once(callback);
    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
    if (!tasks.length) return callback();
    for (var i = 0, l = tasks.length; i < l; i++) {
        wrapAsync(tasks[i])(callback);
    }
}

var race$1 = awaitify(race, 2);

/**
 * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
 *
 * @name reduceRight
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reduce]{@link module:Collections.reduce}
 * @alias foldr
 * @category Collection
 * @param {Array} array - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee completes with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @returns {Promise} a promise, if no callback is passed
 */
function reduceRight (array, memo, iteratee, callback) {
    var reversed = [...array].reverse();
    return reduce$1(reversed, memo, iteratee, callback);
}

/**
 * Wraps the async function in another function that always completes with a
 * result object, even when it errors.
 *
 * The result object has either the property `error` or `value`.
 *
 * @name reflect
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function you want to wrap
 * @returns {Function} - A function that always passes null to it's callback as
 * the error. The second argument to the callback will be an `object` with
 * either an `error` or a `value` property.
 * @example
 *
 * async.parallel([
 *     async.reflect(function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff but error ...
 *         callback('bad stuff happened');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     })
 * ],
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = 'bad stuff happened'
 *     // results[2].value = 'two'
 * });
 */
function reflect(fn) {
    var _fn = wrapAsync(fn);
    return initialParams(function reflectOn(args, reflectCallback) {
        args.push((error, ...cbArgs) => {
            let retVal = {};
            if (error) {
                retVal.error = error;
            }
            if (cbArgs.length > 0){
                var value = cbArgs;
                if (cbArgs.length <= 1) {
                    [value] = cbArgs;
                }
                retVal.value = value;
            }
            reflectCallback(null, retVal);
        });

        return _fn.apply(this, args);
    });
}

/**
 * A helper function that wraps an array or an object of functions with `reflect`.
 *
 * @name reflectAll
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.reflect]{@link module:Utils.reflect}
 * @category Util
 * @param {Array|Object|Iterable} tasks - The collection of
 * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.
 * @returns {Array} Returns an array of async functions, each wrapped in
 * `async.reflect`
 * @example
 *
 * let tasks = [
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         // do some more stuff but error ...
 *         callback(new Error('bad stuff happened'));
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ];
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = Error('bad stuff happened')
 *     // results[2].value = 'two'
 * });
 *
 * // an example using an object instead of an array
 * let tasks = {
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         callback('two');
 *     },
 *     three: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'three');
 *         }, 100);
 *     }
 * };
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results.one.value = 'one'
 *     // results.two.error = 'two'
 *     // results.three.value = 'three'
 * });
 */
function reflectAll(tasks) {
    var results;
    if (Array.isArray(tasks)) {
        results = tasks.map(reflect);
    } else {
        results = {};
        Object.keys(tasks).forEach(key => {
            results[key] = reflect.call(this, tasks[key]);
        });
    }
    return results;
}

function reject(eachfn, arr, _iteratee, callback) {
    const iteratee = wrapAsync(_iteratee);
    return _filter(eachfn, arr, (value, cb) => {
        iteratee(value, (err, v) => {
            cb(err, !v);
        });
    }, callback);
}

/**
 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
 *
 * @name reject
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 *
 * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.reject(fileList, fileExists, function(err, results) {
 *    // [ 'dir3/file6.txt' ]
 *    // results now equals an array of the non-existing files
 * });
 *
 * // Using Promises
 * async.reject(fileList, fileExists)
 * .then( results => {
 *     console.log(results);
 *     // [ 'dir3/file6.txt' ]
 *     // results now equals an array of the non-existing files
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let results = await async.reject(fileList, fileExists);
 *         console.log(results);
 *         // [ 'dir3/file6.txt' ]
 *         // results now equals an array of the non-existing files
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function reject$1 (coll, iteratee, callback) {
    return reject(eachOf$1, coll, iteratee, callback)
}
var reject$2 = awaitify(reject$1, 3);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name rejectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function rejectLimit (coll, limit, iteratee, callback) {
    return reject(eachOfLimit(limit), coll, iteratee, callback)
}
var rejectLimit$1 = awaitify(rejectLimit, 4);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
 *
 * @name rejectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback is passed
 */
function rejectSeries (coll, iteratee, callback) {
    return reject(eachOfSeries$1, coll, iteratee, callback)
}
var rejectSeries$1 = awaitify(rejectSeries, 3);

function constant$1(value) {
    return function () {
        return value;
    }
}

/**
 * Attempts to get a successful response from `task` no more than `times` times
 * before returning an error. If the task is successful, the `callback` will be
 * passed the result of the successful task. If all attempts fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name retry
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @see [async.retryable]{@link module:ControlFlow.retryable}
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
 * object with `times` and `interval` or a number.
 * * `times` - The number of attempts to make before giving up.  The default
 *   is `5`.
 * * `interval` - The time to wait between retries, in milliseconds.  The
 *   default is `0`. The interval may also be specified as a function of the
 *   retry count (see example).
 * * `errorFilter` - An optional synchronous function that is invoked on
 *   erroneous result. If it returns `true` the retry attempts will continue;
 *   if the function returns `false` the retry flow is aborted with the current
 *   attempt's error and result being returned to the final callback.
 *   Invoked with (err).
 * * If `opts` is a number, the number specifies the number of times to retry,
 *   with the default interval of `0`.
 * @param {AsyncFunction} task - An async function to retry.
 * Invoked with (callback).
 * @param {Function} [callback] - An optional callback which is called when the
 * task has succeeded, or after the final failed attempt. It receives the `err`
 * and `result` arguments of the last attempt at completing the `task`. Invoked
 * with (err, results).
 * @returns {Promise} a promise if no callback provided
 *
 * @example
 *
 * // The `retry` function can be used as a stand-alone control flow by passing
 * // a callback, as shown below:
 *
 * // try calling apiMethod 3 times
 * async.retry(3, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 3 times, waiting 200 ms between each retry
 * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 10 times with exponential backoff
 * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
 * async.retry({
 *   times: 10,
 *   interval: function(retryCount) {
 *     return 50 * Math.pow(2, retryCount);
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod the default 5 times no delay between each retry
 * async.retry(apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod only when error condition satisfies, all other
 * // errors will abort the retry control flow and return to final callback
 * async.retry({
 *   errorFilter: function(err) {
 *     return err.message === 'Temporary error'; // only retry on a specific error
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // to retry individual methods that are not as reliable within other
 * // control flow functions, use the `retryable` wrapper:
 * async.auto({
 *     users: api.getUsers.bind(api),
 *     payments: async.retryable(3, api.getPayments.bind(api))
 * }, function(err, results) {
 *     // do something with the results
 * });
 *
 */
const DEFAULT_TIMES = 5;
const DEFAULT_INTERVAL = 0;

function retry(opts, task, callback) {
    var options = {
        times: DEFAULT_TIMES,
        intervalFunc: constant$1(DEFAULT_INTERVAL)
    };

    if (arguments.length < 3 && typeof opts === 'function') {
        callback = task || promiseCallback();
        task = opts;
    } else {
        parseTimes(options, opts);
        callback = callback || promiseCallback();
    }

    if (typeof task !== 'function') {
        throw new Error("Invalid arguments for async.retry");
    }

    var _task = wrapAsync(task);

    var attempt = 1;
    function retryAttempt() {
        _task((err, ...args) => {
            if (err === false) return
            if (err && attempt++ < options.times &&
                (typeof options.errorFilter != 'function' ||
                    options.errorFilter(err))) {
                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));
            } else {
                callback(err, ...args);
            }
        });
    }

    retryAttempt();
    return callback[PROMISE_SYMBOL]
}

function parseTimes(acc, t) {
    if (typeof t === 'object') {
        acc.times = +t.times || DEFAULT_TIMES;

        acc.intervalFunc = typeof t.interval === 'function' ?
            t.interval :
            constant$1(+t.interval || DEFAULT_INTERVAL);

        acc.errorFilter = t.errorFilter;
    } else if (typeof t === 'number' || typeof t === 'string') {
        acc.times = +t || DEFAULT_TIMES;
    } else {
        throw new Error("Invalid arguments for async.retry");
    }
}

/**
 * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method
 * wraps a task and makes it retryable, rather than immediately calling it
 * with retries.
 *
 * @name retryable
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.retry]{@link module:ControlFlow.retry}
 * @category Control Flow
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
 * options, exactly the same as from `retry`, except for a `opts.arity` that
 * is the arity of the `task` function, defaulting to `task.length`
 * @param {AsyncFunction} task - the asynchronous function to wrap.
 * This function will be passed any arguments passed to the returned wrapper.
 * Invoked with (...args, callback).
 * @returns {AsyncFunction} The wrapped function, which when invoked, will
 * retry on an error, based on the parameters specified in `opts`.
 * This function will accept the same parameters as `task`.
 * @example
 *
 * async.auto({
 *     dep1: async.retryable(3, getFromFlakyService),
 *     process: ["dep1", async.retryable(3, function (results, cb) {
 *         maybeProcessData(results.dep1, cb);
 *     })]
 * }, callback);
 */
function retryable (opts, task) {
    if (!task) {
        task = opts;
        opts = null;
    }
    let arity = (opts && opts.arity) || task.length;
    if (isAsync(task)) {
        arity += 1;
    }
    var _task = wrapAsync(task);
    return initialParams((args, callback) => {
        if (args.length < arity - 1 || callback == null) {
            args.push(callback);
            callback = promiseCallback();
        }
        function taskFn(cb) {
            _task(...args, cb);
        }

        if (opts) retry(opts, taskFn, callback);
        else retry(taskFn, callback);

        return callback[PROMISE_SYMBOL]
    });
}

/**
 * Run the functions in the `tasks` collection in series, each one running once
 * the previous function has completed. If any functions in the series pass an
 * error to its callback, no more functions are run, and `callback` is
 * immediately called with the value of the error. Otherwise, `callback`
 * receives an array of results when `tasks` have completed.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function, and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 *  results from {@link async.series}.
 *
 * **Note** that while many implementations preserve the order of object
 * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
 * explicitly states that
 *
 * > The mechanics and order of enumerating the properties is not specified.
 *
 * So if you rely on the order in which your series of functions are executed,
 * and want this to work on all platforms, consider using an array.
 *
 * @name series
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing
 * [async functions]{@link AsyncFunction} to run in series.
 * Each function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This function gets a results array (or object)
 * containing all the result arguments passed to the `task` callbacks. Invoked
 * with (err, result).
 * @return {Promise} a promise, if no callback is passed
 * @example
 *
 * //Using Callbacks
 * async.series([
 *     function(callback) {
 *         setTimeout(function() {
 *             // do some async task
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             // then do another async task
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ], function(err, results) {
 *     console.log(results);
 *     // results is equal to ['one','two']
 * });
 *
 * // an example using objects instead of arrays
 * async.series({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             // do some async task
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             // then do another async task
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * });
 *
 * //Using Promises
 * async.series([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ]).then(results => {
 *     console.log(results);
 *     // results is equal to ['one','two']
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // an example using an object instead of an array
 * async.series({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             // do some async task
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             // then do another async task
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }).then(results => {
 *     console.log(results);
 *     // results is equal to: { one: 1, two: 2 }
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * //Using async/await
 * async () => {
 *     try {
 *         let results = await async.series([
 *             function(callback) {
 *                 setTimeout(function() {
 *                     // do some async task
 *                     callback(null, 'one');
 *                 }, 200);
 *             },
 *             function(callback) {
 *                 setTimeout(function() {
 *                     // then do another async task
 *                     callback(null, 'two');
 *                 }, 100);
 *             }
 *         ]);
 *         console.log(results);
 *         // results is equal to ['one','two']
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * // an example using an object instead of an array
 * async () => {
 *     try {
 *         let results = await async.parallel({
 *             one: function(callback) {
 *                 setTimeout(function() {
 *                     // do some async task
 *                     callback(null, 1);
 *                 }, 200);
 *             },
 *            two: function(callback) {
 *                 setTimeout(function() {
 *                     // then do another async task
 *                     callback(null, 2);
 *                 }, 100);
 *            }
 *         });
 *         console.log(results);
 *         // results is equal to: { one: 1, two: 2 }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function series(tasks, callback) {
    return _parallel(eachOfSeries$1, tasks, callback);
}

/**
 * Returns `true` if at least one element in the `coll` satisfies an async test.
 * If any iteratee call returns `true`, the main `callback` is immediately
 * called.
 *
 * @name some
 * @static
 * @memberOf module:Collections
 * @method
 * @alias any
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // dir1 is a directory that contains file1.txt, file2.txt
 * // dir2 is a directory that contains file3.txt, file4.txt
 * // dir3 is a directory that contains file5.txt
 * // dir4 does not exist
 *
 * // asynchronous function that checks if a file exists
 * function fileExists(file, callback) {
 *    fs.access(file, fs.constants.F_OK, (err) => {
 *        callback(null, !err);
 *    });
 * }
 *
 * // Using callbacks
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // true
 *        // result is true since some file in the list exists
 *    }
 *);
 *
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,
 *    function(err, result) {
 *        console.log(result);
 *        // false
 *        // result is false since none of the files exists
 *    }
 *);
 *
 * // Using Promises
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)
 * .then( result => {
 *     console.log(result);
 *     // true
 *     // result is true since some file in the list exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)
 * .then( result => {
 *     console.log(result);
 *     // false
 *     // result is false since none of the files exists
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);
 *         console.log(result);
 *         // true
 *         // result is true since some file in the list exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 * async () => {
 *     try {
 *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);
 *         console.log(result);
 *         // false
 *         // result is false since none of the files exists
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function some(coll, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)
}
var some$1 = awaitify(some, 3);

/**
 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
 *
 * @name someLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anyLimit
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function someLimit(coll, limit, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)
}
var someLimit$1 = awaitify(someLimit, 4);

/**
 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
 *
 * @name someSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anySeries
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in series.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 */
function someSeries(coll, iteratee, callback) {
    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)
}
var someSeries$1 = awaitify(someSeries, 3);

/**
 * Sorts a list by the results of running each `coll` value through an async
 * `iteratee`.
 *
 * @name sortBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a value to use as the sort criteria as
 * its `result`.
 * Invoked with (item, callback).
 * @param {Function} callback - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is the items
 * from the original `coll` sorted by the values returned by the `iteratee`
 * calls. Invoked with (err, results).
 * @returns {Promise} a promise, if no callback passed
 * @example
 *
 * // bigfile.txt is a file that is 251100 bytes in size
 * // mediumfile.txt is a file that is 11000 bytes in size
 * // smallfile.txt is a file that is 121 bytes in size
 *
 * // asynchronous function that returns the file size in bytes
 * function getFileSizeInBytes(file, callback) {
 *     fs.stat(file, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         callback(null, stat.size);
 *     });
 * }
 *
 * // Using callbacks
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,
 *     function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *         }
 *     }
 * );
 *
 * // By modifying the callback parameter the
 * // sorting order can be influenced:
 *
 * // ascending order
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {
 *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
 *         if (getFileSizeErr) return callback(getFileSizeErr);
 *         callback(null, fileSize);
 *     });
 * }, function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *         }
 *     }
 * );
 *
 * // descending order
 * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {
 *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {
 *         if (getFileSizeErr) {
 *             return callback(getFileSizeErr);
 *         }
 *         callback(null, fileSize * -1);
 *     });
 * }, function(err, results) {
 *         if (err) {
 *             console.log(err);
 *         } else {
 *             console.log(results);
 *             // results is now the original array of files sorted by
 *             // file size (ascending by default), e.g.
 *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']
 *         }
 *     }
 * );
 *
 * // Error handling
 * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,
 *     function(err, results) {
 *         if (err) {
 *             console.log(err);
 *             // [ Error: ENOENT: no such file or directory ]
 *         } else {
 *             console.log(results);
 *         }
 *     }
 * );
 *
 * // Using Promises
 * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 *     // results is now the original array of files sorted by
 *     // file size (ascending by default), e.g.
 *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 * }).catch( err => {
 *     console.log(err);
 * });
 *
 * // Error handling
 * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)
 * .then( results => {
 *     console.log(results);
 * }).catch( err => {
 *     console.log(err);
 *     // [ Error: ENOENT: no such file or directory ]
 * });
 *
 * // Using async/await
 * (async () => {
 *     try {
 *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
 *         console.log(results);
 *         // results is now the original array of files sorted by
 *         // file size (ascending by default), e.g.
 *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * })();
 *
 * // Error handling
 * async () => {
 *     try {
 *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);
 *         console.log(results);
 *     }
 *     catch (err) {
 *         console.log(err);
 *         // [ Error: ENOENT: no such file or directory ]
 *     }
 * }
 *
 */
function sortBy (coll, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return map$1(coll, (x, iterCb) => {
        _iteratee(x, (err, criteria) => {
            if (err) return iterCb(err);
            iterCb(err, {value: x, criteria});
        });
    }, (err, results) => {
        if (err) return callback(err);
        callback(null, results.sort(comparator).map(v => v.value));
    });

    function comparator(left, right) {
        var a = left.criteria, b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
    }
}
var sortBy$1 = awaitify(sortBy, 3);

/**
 * Sets a time limit on an asynchronous function. If the function does not call
 * its callback within the specified milliseconds, it will be called with a
 * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
 *
 * @name timeout
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} asyncFn - The async function to limit in time.
 * @param {number} milliseconds - The specified time limit.
 * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
 * to timeout Error for more information..
 * @returns {AsyncFunction} Returns a wrapped function that can be used with any
 * of the control flow functions.
 * Invoke this function with the same parameters as you would `asyncFunc`.
 * @example
 *
 * function myFunction(foo, callback) {
 *     doAsyncTask(foo, function(err, data) {
 *         // handle errors
 *         if (err) return callback(err);
 *
 *         // do some stuff ...
 *
 *         // return processed data
 *         return callback(null, data);
 *     });
 * }
 *
 * var wrapped = async.timeout(myFunction, 1000);
 *
 * // call `wrapped` as you would `myFunction`
 * wrapped({ bar: 'bar' }, function(err, data) {
 *     // if `myFunction` takes < 1000 ms to execute, `err`
 *     // and `data` will have their expected values
 *
 *     // else `err` will be an Error with the code 'ETIMEDOUT'
 * });
 */
function timeout(asyncFn, milliseconds, info) {
    var fn = wrapAsync(asyncFn);

    return initialParams((args, callback) => {
        var timedOut = false;
        var timer;

        function timeoutCallback() {
            var name = asyncFn.name || 'anonymous';
            var error  = new Error('Callback function "' + name + '" timed out.');
            error.code = 'ETIMEDOUT';
            if (info) {
                error.info = info;
            }
            timedOut = true;
            callback(error);
        }

        args.push((...cbArgs) => {
            if (!timedOut) {
                callback(...cbArgs);
                clearTimeout(timer);
            }
        });

        // setup timer and call original function
        timer = setTimeout(timeoutCallback, milliseconds);
        fn(...args);
    });
}

function range(size) {
    var result = Array(size);
    while (size--) {
        result[size] = size;
    }
    return result;
}

/**
 * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name timesLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} count - The number of times to run the function.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see [async.map]{@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 */
function timesLimit(count, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    return mapLimit$1(range(count), limit, _iteratee, callback);
}

/**
 * Calls the `iteratee` function `n` times, and accumulates results in the same
 * manner you would use with [map]{@link module:Collections.map}.
 *
 * @name times
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 * @example
 *
 * // Pretend this is some complicated async factory
 * var createUser = function(id, callback) {
 *     callback(null, {
 *         id: 'user' + id
 *     });
 * };
 *
 * // generate 5 users
 * async.times(5, function(n, next) {
 *     createUser(n, function(err, user) {
 *         next(err, user);
 *     });
 * }, function(err, users) {
 *     // we should now have 5 users
 * });
 */
function times (n, iteratee, callback) {
    return timesLimit(n, Infinity, iteratee, callback)
}

/**
 * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
 *
 * @name timesSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @returns {Promise} a promise, if no callback is provided
 */
function timesSeries (n, iteratee, callback) {
    return timesLimit(n, 1, iteratee, callback)
}

/**
 * A relative of `reduce`.  Takes an Object or Array, and iterates over each
 * element in parallel, each step potentially mutating an `accumulator` value.
 * The type of the accumulator defaults to the type of collection passed in.
 *
 * @name transform
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
 * @param {*} [accumulator] - The initial state of the transform.  If omitted,
 * it will default to an empty Object or Array, depending on the type of `coll`
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * collection that potentially modifies the accumulator.
 * Invoked with (accumulator, item, key, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the transformed accumulator.
 * Invoked with (err, result).
 * @returns {Promise} a promise, if no callback provided
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 *
 * // helper function that returns human-readable size format from bytes
 * function formatBytes(bytes, decimals = 2) {
 *   // implementation not included for brevity
 *   return humanReadbleFilesize;
 * }
 *
 * const fileList = ['file1.txt','file2.txt','file3.txt'];
 *
 * // asynchronous function that returns the file size, transformed to human-readable format
 * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.
 * function transformFileSize(acc, value, key, callback) {
 *     fs.stat(value, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         acc[key] = formatBytes(stat.size);
 *         callback(null);
 *     });
 * }
 *
 * // Using callbacks
 * async.transform(fileList, transformFileSize, function(err, result) {
 *     if(err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
 *     }
 * });
 *
 * // Using Promises
 * async.transform(fileList, transformFileSize)
 * .then(result => {
 *     console.log(result);
 *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * (async () => {
 *     try {
 *         let result = await async.transform(fileList, transformFileSize);
 *         console.log(result);
 *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * })();
 *
 * @example
 *
 * // file1.txt is a file that is 1000 bytes in size
 * // file2.txt is a file that is 2000 bytes in size
 * // file3.txt is a file that is 3000 bytes in size
 *
 * // helper function that returns human-readable size format from bytes
 * function formatBytes(bytes, decimals = 2) {
 *   // implementation not included for brevity
 *   return humanReadbleFilesize;
 * }
 *
 * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };
 *
 * // asynchronous function that returns the file size, transformed to human-readable format
 * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.
 * function transformFileSize(acc, value, key, callback) {
 *     fs.stat(value, function(err, stat) {
 *         if (err) {
 *             return callback(err);
 *         }
 *         acc[key] = formatBytes(stat.size);
 *         callback(null);
 *     });
 * }
 *
 * // Using callbacks
 * async.transform(fileMap, transformFileSize, function(err, result) {
 *     if(err) {
 *         console.log(err);
 *     } else {
 *         console.log(result);
 *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
 *     }
 * });
 *
 * // Using Promises
 * async.transform(fileMap, transformFileSize)
 * .then(result => {
 *     console.log(result);
 *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
 * }).catch(err => {
 *     console.log(err);
 * });
 *
 * // Using async/await
 * async () => {
 *     try {
 *         let result = await async.transform(fileMap, transformFileSize);
 *         console.log(result);
 *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }
 *     }
 *     catch (err) {
 *         console.log(err);
 *     }
 * }
 *
 */
function transform (coll, accumulator, iteratee, callback) {
    if (arguments.length <= 3 && typeof accumulator === 'function') {
        callback = iteratee;
        iteratee = accumulator;
        accumulator = Array.isArray(coll) ? [] : {};
    }
    callback = once(callback || promiseCallback());
    var _iteratee = wrapAsync(iteratee);

    eachOf$1(coll, (v, k, cb) => {
        _iteratee(accumulator, v, k, cb);
    }, err => callback(err, accumulator));
    return callback[PROMISE_SYMBOL]
}

/**
 * It runs each task in series but stops whenever any of the functions were
 * successful. If one of the tasks were successful, the `callback` will be
 * passed the result of the successful task. If all tasks fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name tryEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to
 * run, each function is passed a `callback(err, result)` it must call on
 * completion with an error `err` (which can be `null`) and an optional `result`
 * value.
 * @param {Function} [callback] - An optional callback which is called when one
 * of the tasks has succeeded, or all have failed. It receives the `err` and
 * `result` arguments of the last attempt at completing the `task`. Invoked with
 * (err, results).
 * @returns {Promise} a promise, if no callback is passed
 * @example
 * async.tryEach([
 *     function getDataFromFirstWebsite(callback) {
 *         // Try getting the data from the first website
 *         callback(err, data);
 *     },
 *     function getDataFromSecondWebsite(callback) {
 *         // First website failed,
 *         // Try getting the data from the backup website
 *         callback(err, data);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     Now do something with the data.
 * });
 *
 */
function tryEach(tasks, callback) {
    var error = null;
    var result;
    return eachSeries$1(tasks, (task, taskCb) => {
        wrapAsync(task)((err, ...args) => {
            if (err === false) return taskCb(err);

            if (args.length < 2) {
                [result] = args;
            } else {
                result = args;
            }
            error = err;
            taskCb(err ? null : {});
        });
    }, () => callback(error, result));
}

var tryEach$1 = awaitify(tryEach);

/**
 * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
 * unmemoized form. Handy for testing.
 *
 * @name unmemoize
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.memoize]{@link module:Utils.memoize}
 * @category Util
 * @param {AsyncFunction} fn - the memoized function
 * @returns {AsyncFunction} a function that calls the original unmemoized function
 */
function unmemoize(fn) {
    return (...args) => {
        return (fn.unmemoized || fn)(...args);
    };
}

/**
 * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs.
 *
 * @name whilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if no callback is passed
 * @example
 *
 * var count = 0;
 * async.whilst(
 *     function test(cb) { cb(null, count < 5); },
 *     function iter(callback) {
 *         count++;
 *         setTimeout(function() {
 *             callback(null, count);
 *         }, 1000);
 *     },
 *     function (err, n) {
 *         // 5 seconds have passed, n = 5
 *     }
 * );
 */
function whilst(test, iteratee, callback) {
    callback = onlyOnce(callback);
    var _fn = wrapAsync(iteratee);
    var _test = wrapAsync(test);
    var results = [];

    function next(err, ...rest) {
        if (err) return callback(err);
        results = rest;
        if (err === false) return;
        _test(check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (err === false) return;
        if (!truth) return callback(null, ...results);
        _fn(next);
    }

    return _test(check);
}
var whilst$1 = awaitify(whilst, 3);

/**
 * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs. `callback` will be passed an error and any
 * arguments passed to the final `iteratee`'s callback.
 *
 * The inverse of [whilst]{@link module:ControlFlow.whilst}.
 *
 * @name until
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `iteratee`. Invoked with (callback).
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns {Promise} a promise, if a callback is not passed
 *
 * @example
 * const results = []
 * let finished = false
 * async.until(function test(cb) {
 *     cb(null, finished)
 * }, function iter(next) {
 *     fetchPage(url, (err, body) => {
 *         if (err) return next(err)
 *         results = results.concat(body.objects)
 *         finished = !!body.next
 *         next(err)
 *     })
 * }, function done (err) {
 *     // all pages have been fetched
 * })
 */
function until(test, iteratee, callback) {
    const _test = wrapAsync(test);
    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);
}

/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns undefined
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */
function waterfall (tasks, callback) {
    callback = once(callback);
    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;

    function nextTask(args) {
        var task = wrapAsync(tasks[taskIndex++]);
        task(...args, onlyOnce(next));
    }

    function next(err, ...args) {
        if (err === false) return
        if (err || taskIndex === tasks.length) {
            return callback(err, ...args);
        }
        nextTask(args);
    }

    nextTask([]);
}

var waterfall$1 = awaitify(waterfall);

/**
 * An "async function" in the context of Async is an asynchronous function with
 * a variable number of parameters, with the final parameter being a callback.
 * (`function (arg1, arg2, ..., callback) {}`)
 * The final callback is of the form `callback(err, results...)`, which must be
 * called once the function is completed.  The callback should be called with a
 * Error as its first argument to signal that an error occurred.
 * Otherwise, if no error occurred, it should be called with `null` as the first
 * argument, and any additional `result` arguments that may apply, to signal
 * successful completion.
 * The callback must be called exactly once, ideally on a later tick of the
 * JavaScript event loop.
 *
 * This type of function is also referred to as a "Node-style async function",
 * or a "continuation passing-style function" (CPS). Most of the methods of this
 * library are themselves CPS/Node-style async functions, or functions that
 * return CPS/Node-style async functions.
 *
 * Wherever we accept a Node-style async function, we also directly accept an
 * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
 * In this case, the `async` function will not be passed a final callback
 * argument, and any thrown error will be used as the `err` argument of the
 * implicit callback, and the return value will be used as the `result` value.
 * (i.e. a `rejected` of the returned Promise becomes the `err` callback
 * argument, and a `resolved` value becomes the `result`.)
 *
 * Note, due to JavaScript limitations, we can only detect native `async`
 * functions and not transpilied implementations.
 * Your environment must have `async`/`await` support for this to work.
 * (e.g. Node > v7.6, or a recent version of a modern browser).
 * If you are using `async` functions through a transpiler (e.g. Babel), you
 * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
 * because the `async function` will be compiled to an ordinary function that
 * returns a promise.
 *
 * @typedef {Function} AsyncFunction
 * @static
 */

var index = {
    apply,
    applyEach: applyEach$1,
    applyEachSeries,
    asyncify,
    auto,
    autoInject,
    cargo,
    cargoQueue: cargo$1,
    compose,
    concat: concat$1,
    concatLimit: concatLimit$1,
    concatSeries: concatSeries$1,
    constant,
    detect: detect$1,
    detectLimit: detectLimit$1,
    detectSeries: detectSeries$1,
    dir,
    doUntil,
    doWhilst: doWhilst$1,
    each,
    eachLimit: eachLimit$2,
    eachOf: eachOf$1,
    eachOfLimit: eachOfLimit$2,
    eachOfSeries: eachOfSeries$1,
    eachSeries: eachSeries$1,
    ensureAsync,
    every: every$1,
    everyLimit: everyLimit$1,
    everySeries: everySeries$1,
    filter: filter$1,
    filterLimit: filterLimit$1,
    filterSeries: filterSeries$1,
    forever: forever$1,
    groupBy,
    groupByLimit: groupByLimit$1,
    groupBySeries,
    log,
    map: map$1,
    mapLimit: mapLimit$1,
    mapSeries: mapSeries$1,
    mapValues,
    mapValuesLimit: mapValuesLimit$1,
    mapValuesSeries,
    memoize,
    nextTick,
    parallel,
    parallelLimit,
    priorityQueue,
    queue: queue$1,
    race: race$1,
    reduce: reduce$1,
    reduceRight,
    reflect,
    reflectAll,
    reject: reject$2,
    rejectLimit: rejectLimit$1,
    rejectSeries: rejectSeries$1,
    retry,
    retryable,
    seq,
    series,
    setImmediate: setImmediate$1,
    some: some$1,
    someLimit: someLimit$1,
    someSeries: someSeries$1,
    sortBy: sortBy$1,
    timeout,
    times,
    timesLimit,
    timesSeries,
    transform,
    tryEach: tryEach$1,
    unmemoize,
    until,
    waterfall: waterfall$1,
    whilst: whilst$1,

    // aliases
    all: every$1,
    allLimit: everyLimit$1,
    allSeries: everySeries$1,
    any: some$1,
    anyLimit: someLimit$1,
    anySeries: someSeries$1,
    find: detect$1,
    findLimit: detectLimit$1,
    findSeries: detectSeries$1,
    flatMap: concat$1,
    flatMapLimit: concatLimit$1,
    flatMapSeries: concatSeries$1,
    forEach: each,
    forEachSeries: eachSeries$1,
    forEachLimit: eachLimit$2,
    forEachOf: eachOf$1,
    forEachOfSeries: eachOfSeries$1,
    forEachOfLimit: eachOfLimit$2,
    inject: reduce$1,
    foldl: reduce$1,
    foldr: reduceRight,
    select: filter$1,
    selectLimit: filterLimit$1,
    selectSeries: filterSeries$1,
    wrapSync: asyncify,
    during: whilst$1,
    doDuring: doWhilst$1
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/browsers/src/index.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,